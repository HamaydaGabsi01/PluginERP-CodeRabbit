-- MySQL dump 10.13  Distrib 5.1.42, for Win32 (ia32)
--
-- Host: localhost    Database: mdt_test
-- ------------------------------------------------------
-- Server version	5.1.42-community

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `accounting_bank`
--

DROP TABLE IF EXISTS `accounting_bank`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_bank` (
  `Id` int(11) NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_bank_account`
--

DROP TABLE IF EXISTS `accounting_bank_account`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_bank_account` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `bank` int(10) unsigned DEFAULT NULL,
  `number` varchar(100) DEFAULT NULL,
  `rib` varchar(100) DEFAULT NULL,
  `iban` varchar(100) DEFAULT NULL,
  `solde` decimal(15,5) DEFAULT '0.00000',
  `principal` tinyint(1) DEFAULT '0',
  `agency` varchar(500) DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_bank_account_1` (`currency`),
  KEY `FK_accounting_bank_account_2` (`socity`),
  CONSTRAINT `FK_accounting_bank_account_2` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_accounting_bank_account_1` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_bank_account_status`
--

DROP TABLE IF EXISTS `accounting_bank_account_status`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_bank_account_status` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `bank_account` int(10) unsigned DEFAULT NULL,
  `motif` int(10) unsigned DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `solde` decimal(15,5) DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `state` int(10) DEFAULT NULL,
  `ended` tinyint(1) DEFAULT '0',
  `bank_check_reference` varchar(45) DEFAULT NULL,
  `bank_check` int(10) unsigned DEFAULT '0',
  `currency_rate` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=1692 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_bank_deposit`
--

DROP TABLE IF EXISTS `accounting_bank_deposit`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_bank_deposit` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `bank_account` int(10) unsigned DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  `description` varchar(1000) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT '0.00000',
  `number` int(10) unsigned DEFAULT '0',
  `bank_check_reference` varchar(45) DEFAULT NULL,
  `bank_check` int(10) unsigned DEFAULT '0',
  `check` tinyint(1) DEFAULT '0',
  `reference` varchar(45) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `bank_deposit_type` int(10) unsigned DEFAULT NULL,
  `cash_desk` int(10) unsigned DEFAULT NULL,
  `sens` int(11) DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_bank_deposit_1` (`bank_deposit_type`),
  KEY `FK_accounting_bank_deposit_2` (`cash_desk`),
  CONSTRAINT `FK_accounting_bank_deposit_1` FOREIGN KEY (`bank_deposit_type`) REFERENCES `accounting_bank_deposit_type` (`Id`),
  CONSTRAINT `FK_accounting_bank_deposit_2` FOREIGN KEY (`cash_desk`) REFERENCES `accounting_cash_desk` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `accounting_bank_depositOnValidate` AFTER UPDATE ON `accounting_bank_deposit` FOR EACH ROW BEGIN


if(new.validated = 1 and OLD.validated = 0) then
  call accountingCash_registerADDByBank_deposit(new.Id);
end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `accounting_bank_deposit_line`
--

DROP TABLE IF EXISTS `accounting_bank_deposit_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_bank_deposit_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `bank_deposit` int(10) unsigned DEFAULT NULL,
  `payment` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=205 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_bank_deposit_type`
--

DROP TABLE IF EXISTS `accounting_bank_deposit_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_bank_deposit_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_bank_motif`
--

DROP TABLE IF EXISTS `accounting_bank_motif`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_bank_motif` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `state` int(11) DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=36 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_cash_desk`
--

DROP TABLE IF EXISTS `accounting_cash_desk`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_cash_desk` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `principal` tinyint(1) DEFAULT NULL,
  `sale` tinyint(1) DEFAULT NULL,
  `purchase` tinyint(1) DEFAULT NULL,
  `hr` tinyint(1) DEFAULT NULL,
  `bank` tinyint(1) DEFAULT NULL,
  `cash` tinyint(1) DEFAULT NULL,
  `pos` tinyint(1) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  `memo` varchar(450) CHARACTER SET latin1 DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_cash_desk_1` (`payment_method`),
  KEY `FK_accounting_cash_desk_2` (`currency`),
  KEY `FK_accounting_cash_desk_3` (`socity`),
  CONSTRAINT `FK_accounting_cash_desk_3` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_accounting_cash_desk_1` FOREIGN KEY (`payment_method`) REFERENCES `commercial_payment_method` (`Id`),
  CONSTRAINT `FK_accounting_cash_desk_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_cash_in_out`
--

DROP TABLE IF EXISTS `accounting_cash_in_out`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_cash_in_out` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `motif` int(10) unsigned DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `in_out` int(10) DEFAULT NULL,
  `register` varchar(500) DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  `memo` varchar(500) DEFAULT NULL,
  `cash_desk` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_cash_in_out_1` (`motif`),
  KEY `FK_accounting_cash_in_out_2` (`cash_desk`),
  KEY `FK_accounting_cash_in_out_3` (`agent`),
  CONSTRAINT `FK_accounting_cash_in_out_1` FOREIGN KEY (`motif`) REFERENCES `accounting_cash_register_motif` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_in_out_2` FOREIGN KEY (`cash_desk`) REFERENCES `accounting_cash_desk` (`Id`),
  CONSTRAINT `FK_accounting_cash_in_out_3` FOREIGN KEY (`agent`) REFERENCES `hr_employe` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_accounting_cash_in_outOnInsert` AFTER INSERT ON `accounting_cash_in_out` FOR EACH ROW BEGIN
if(new.validated = 1) then
  call accountingCash_registerADDByCash_in_out(new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_accounting_cash_in_outOnUpdate` AFTER UPDATE ON `accounting_cash_in_out` FOR EACH ROW BEGIN
if(new.validated = 1) then
  call accountingCash_registerADDByCash_in_out(new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `accounting_cash_register`
--

DROP TABLE IF EXISTS `accounting_cash_register`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_cash_register` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `motif` int(10) unsigned DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `solde` decimal(15,5) DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `state` int(10) DEFAULT NULL,
  `cash_desk` int(10) unsigned DEFAULT NULL,
  `payment` int(10) unsigned DEFAULT NULL,
  `payment_transfert` int(10) unsigned DEFAULT NULL,
  `pos_session_inventory` int(10) unsigned DEFAULT NULL,
  `bank_deposit_line` int(10) unsigned DEFAULT NULL,
  `bank_deposit` int(10) unsigned DEFAULT NULL,
  `register` varchar(20000) DEFAULT NULL,
  `cash_in_out` int(10) unsigned DEFAULT NULL,
  `transfer` int(10) unsigned DEFAULT NULL,
  `pos_session_transfer` int(10) unsigned DEFAULT NULL,
  `pos_session_transfer_payment` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_cash_register_1` (`cash_desk`),
  KEY `FK_accounting_cash_register_2` (`payment`),
  KEY `FK_accounting_cash_register_3` (`payment_transfert`),
  KEY `FK_accounting_cash_register_4` (`pos_session_inventory`),
  KEY `FK_accounting_cash_register_5` (`bank_deposit_line`),
  KEY `FK_accounting_cash_register_6` (`bank_deposit`),
  KEY `FK_accounting_cash_register_7` (`cash_in_out`),
  KEY `FK_accounting_cash_register_8` (`transfer`),
  KEY `FK_accounting_cash_register_9` (`pos_session_transfer`),
  KEY `FK_accounting_cash_register_10` (`pos_session_transfer_payment`),
  CONSTRAINT `FK_accounting_cash_register_1` FOREIGN KEY (`cash_desk`) REFERENCES `accounting_cash_desk` (`Id`),
  CONSTRAINT `FK_accounting_cash_register_10` FOREIGN KEY (`pos_session_transfer_payment`) REFERENCES `pos_session_transfer_payment` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_accounting_cash_register_2` FOREIGN KEY (`payment`) REFERENCES `commercial_payment` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_register_3` FOREIGN KEY (`payment_transfert`) REFERENCES `accounting_payment_transfer` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_register_4` FOREIGN KEY (`pos_session_inventory`) REFERENCES `pos_session_inventory` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_register_5` FOREIGN KEY (`bank_deposit_line`) REFERENCES `accounting_bank_deposit_line` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_register_6` FOREIGN KEY (`bank_deposit`) REFERENCES `accounting_bank_deposit` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_register_7` FOREIGN KEY (`cash_in_out`) REFERENCES `accounting_cash_in_out` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_register_8` FOREIGN KEY (`transfer`) REFERENCES `accounting_transfer` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_cash_register_9` FOREIGN KEY (`pos_session_transfer`) REFERENCES `pos_session_transfer` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7432 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_accounting_cash_registerBeforeInsert` BEFORE INSERT ON `accounting_cash_register` FOR EACH ROW BEGIN


SET new.solde = (select amount from accounting_cash_desk where Id = new.cash_desk) + new.amount;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_accounting_cash_registerAfterInsert` AFTER INSERT ON `accounting_cash_register` FOR EACH ROW BEGIN


update accounting_cash_desk set amount = new.solde
where Id = new.cash_desk;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `accounting_cash_register_motif`
--

DROP TABLE IF EXISTS `accounting_cash_register_motif`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_cash_register_motif` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `bank` tinyint(1) unsigned DEFAULT NULL,
  `state` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_fiscal_year`
--

DROP TABLE IF EXISTS `accounting_fiscal_year`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_fiscal_year` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `beginning_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `note` varchar(255) DEFAULT NULL,
  `closed` tinyint(1) DEFAULT NULL,
  `declared` tinyint(1) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_payment_transfer`
--

DROP TABLE IF EXISTS `accounting_payment_transfer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_payment_transfer` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `payment` int(10) unsigned DEFAULT NULL,
  `transfer` int(10) unsigned DEFAULT NULL,
  `memo` varchar(450) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_payment_transfer_1` (`payment`),
  KEY `FK_accounting_payment_transfer_2` (`transfer`),
  CONSTRAINT `FK_accounting_payment_transfer_1` FOREIGN KEY (`payment`) REFERENCES `commercial_payment` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_accounting_payment_transfer_2` FOREIGN KEY (`transfer`) REFERENCES `accounting_transfer` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_period`
--

DROP TABLE IF EXISTS `accounting_period`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_period` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `beginning_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `note` varchar(255) DEFAULT NULL,
  `closed` tinyint(1) DEFAULT NULL,
  `declared` tinyint(1) DEFAULT NULL,
  `fiscal_year` int(10) unsigned DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `statement_date` datetime DEFAULT NULL,
  `purchase_base` decimal(15,3) DEFAULT NULL,
  `sale_base` decimal(15,3) DEFAULT NULL,
  `purchase_tax` decimal(15,3) DEFAULT NULL,
  `sale_tax` decimal(15,3) DEFAULT NULL,
  `vat_statement` decimal(15,3) DEFAULT NULL,
  `statement_value` decimal(15,3) DEFAULT NULL,
  `close_date` datetime DEFAULT NULL,
  `purchase_vat_amount` decimal(15,3) DEFAULT NULL,
  `sale_vat_amount` decimal(15,3) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_period_statement`
--

DROP TABLE IF EXISTS `accounting_period_statement`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_period_statement` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `period` int(10) unsigned NOT NULL,
  `piece` int(10) unsigned NOT NULL,
  `piece_type` varchar(255) DEFAULT NULL,
  `tax` int(10) unsigned DEFAULT NULL,
  `tax_type` varchar(255) DEFAULT NULL,
  `base_value` decimal(15,3) DEFAULT NULL,
  `value` decimal(15,3) DEFAULT NULL,
  `piece_type_name` varchar(45) DEFAULT NULL,
  `piece_code` varchar(45) DEFAULT NULL,
  `piece_reference` varchar(45) DEFAULT NULL,
  `taxe_name` varchar(45) DEFAULT NULL,
  `piece_total_amount` decimal(15,3) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_transfer`
--

DROP TABLE IF EXISTS `accounting_transfer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_transfer` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `amount` decimal(15,5) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `cash_desk_in` int(10) unsigned DEFAULT NULL,
  `cash_desk_out` int(10) unsigned DEFAULT NULL,
  `memo` varchar(450) CHARACTER SET latin1 DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `payment_release` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_transfer_1` (`cash_desk_in`),
  KEY `FK_accounting_transfer_2` (`cash_desk_out`),
  KEY `FK_accounting_transfer_3` (`state`),
  CONSTRAINT `FK_accounting_transfer_1` FOREIGN KEY (`cash_desk_in`) REFERENCES `accounting_cash_desk` (`Id`),
  CONSTRAINT `FK_accounting_transfer_2` FOREIGN KEY (`cash_desk_out`) REFERENCES `accounting_cash_desk` (`Id`),
  CONSTRAINT `FK_accounting_transfer_3` FOREIGN KEY (`state`) REFERENCES `accounting_transfer_state_log` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_transfer_state`
--

DROP TABLE IF EXISTS `accounting_transfer_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_transfer_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(450) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_transfer_state_log`
--

DROP TABLE IF EXISTS `accounting_transfer_state_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_transfer_state_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `transfer` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_transfer_state_log_1` (`transfer`),
  KEY `FK_accounting_transfer_state_log_2` (`state`),
  CONSTRAINT `FK_accounting_transfer_state_log_1` FOREIGN KEY (`transfer`) REFERENCES `accounting_transfer` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_accounting_transfer_state_log_2` FOREIGN KEY (`state`) REFERENCES `accounting_transfer_state` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `accounting_transfer_state_logOnInsert` AFTER INSERT ON `accounting_transfer_state_log` FOR EACH ROW BEGIN

update accounting_transfer set state = new.Id
where Id = new.transfer;

if(new.state = 2) then
  call accountingCash_registerADDByTransfer(new.transfer);
end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `accounting_user_cash_desk`
--

DROP TABLE IF EXISTS `accounting_user_cash_desk`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_user_cash_desk` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `assignment_date` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `cash_desk` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `memo` varchar(450) CHARACTER SET latin1 DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_accounting_user_cash_desk_1` (`cash_desk`),
  KEY `FK_accounting_user_cash_desk_2` (`user`),
  KEY `FK_accounting_user_cash_desk_3` (`type`),
  CONSTRAINT `FK_accounting_user_cash_desk_1` FOREIGN KEY (`cash_desk`) REFERENCES `accounting_cash_desk` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_accounting_user_cash_desk_2` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_accounting_user_cash_desk_3` FOREIGN KEY (`type`) REFERENCES `accounting_user_cash_desk_type` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `accounting_user_cash_desk_type`
--

DROP TABLE IF EXISTS `accounting_user_cash_desk_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `accounting_user_cash_desk_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(450) DEFAULT NULL,
  `payment` tinyint(1) DEFAULT NULL,
  `transfer` tinyint(1) DEFAULT NULL,
  `transfer_state` tinyint(1) DEFAULT NULL,
  `encaissement` tinyint(1) DEFAULT NULL,
  `decaissement` tinyint(1) DEFAULT NULL,
  `bank` tinyint(1) DEFAULT NULL,
  `payment_release` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity`
--

DROP TABLE IF EXISTS `atooerp_activity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `type` int(10) unsigned NOT NULL,
  `summary` varchar(255) NOT NULL,
  `due_date` datetime DEFAULT NULL,
  `done_date` datetime DEFAULT NULL,
  `assigned_employee` int(10) unsigned DEFAULT NULL,
  `author` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `state` int(10) unsigned NOT NULL DEFAULT '1',
  `parent` int(10) unsigned DEFAULT NULL,
  `object_type` varchar(255) NOT NULL,
  `object` int(10) unsigned NOT NULL,
  `date` datetime NOT NULL,
  `form` varchar(1000) NOT NULL,
  `gps` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_activity_type` (`type`),
  KEY `FK_atooerp_activity_author` (`author`),
  KEY `FK_atooerp_activity_parent` (`parent`),
  KEY `FK_atooerp_activity_employee` (`assigned_employee`) USING BTREE,
  CONSTRAINT `FK_atooerp_activity_author` FOREIGN KEY (`author`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_atooerp_activity_employee` FOREIGN KEY (`assigned_employee`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_atooerp_activity_parent` FOREIGN KEY (`parent`) REFERENCES `atooerp_activity` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_atooerp_activity_type` FOREIGN KEY (`type`) REFERENCES `atooerp_activity_type` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity_action`
--

DROP TABLE IF EXISTS `atooerp_activity_action`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity_action` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity_form`
--

DROP TABLE IF EXISTS `atooerp_activity_form`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity_form` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `activity_type` int(10) unsigned NOT NULL,
  `form` int(10) unsigned NOT NULL,
  `optional` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_activity_form_type` (`activity_type`),
  KEY `FK_atooerp_activity_form` (`form`),
  CONSTRAINT `FK_atooerp_activity_form` FOREIGN KEY (`form`) REFERENCES `marketing_quiz_form` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_activity_form_type` FOREIGN KEY (`activity_type`) REFERENCES `atooerp_activity_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity_next`
--

DROP TABLE IF EXISTS `atooerp_activity_next`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity_next` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `activity_type` int(10) unsigned NOT NULL,
  `next_activity_type` int(10) unsigned NOT NULL,
  `next_type` int(10) unsigned NOT NULL,
  `next_condition` int(10) unsigned NOT NULL,
  `next_schedule_count` int(10) unsigned DEFAULT NULL,
  `next_schedule_unit` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_activity_next_activity_type` (`activity_type`),
  KEY `FK_atooerp_activity_next_next_activity_type` (`next_activity_type`),
  KEY `FK_atooerp_activity_next_next_type` (`next_type`),
  KEY `FK_atooerp_activity_next_condition` (`next_condition`),
  CONSTRAINT `FK_atooerp_activity_next_activity_type` FOREIGN KEY (`activity_type`) REFERENCES `atooerp_activity_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_activity_next_condition` FOREIGN KEY (`next_condition`) REFERENCES `atooerp_activity_next_condition` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_activity_next_next_activity_type` FOREIGN KEY (`next_activity_type`) REFERENCES `atooerp_activity_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_activity_next_next_type` FOREIGN KEY (`next_type`) REFERENCES `atooerp_activity_next_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity_next_condition`
--

DROP TABLE IF EXISTS `atooerp_activity_next_condition`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity_next_condition` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity_next_type`
--

DROP TABLE IF EXISTS `atooerp_activity_next_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity_next_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity_state`
--

DROP TABLE IF EXISTS `atooerp_activity_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_activity_type`
--

DROP TABLE IF EXISTS `atooerp_activity_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_activity_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `name` varchar(45) NOT NULL,
  `icon` blob NOT NULL,
  `action` int(10) unsigned DEFAULT NULL,
  `employee` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `summary` varchar(255) DEFAULT NULL,
  `keep_done` tinyint(1) NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  `due_date_minute` decimal(10,2) NOT NULL,
  `due_date_hour` decimal(10,2) NOT NULL,
  `due_date_day` decimal(10,2) NOT NULL,
  `due_date_week` decimal(10,2) NOT NULL,
  `due_date_month` decimal(10,2) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_activity_type_action` (`action`),
  KEY `FK_atooerp_activity_type_employee` (`employee`),
  CONSTRAINT `FK_atooerp_activity_type_action` FOREIGN KEY (`action`) REFERENCES `atooerp_activity_action` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_activity_type_employee` FOREIGN KEY (`employee`) REFERENCES `hr_employe` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_address`
--

DROP TABLE IF EXISTS `atooerp_address`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_address` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `number` varchar(45) DEFAULT NULL,
  `street` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `state` varchar(45) DEFAULT NULL,
  `country` varchar(45) DEFAULT NULL,
  `full` varchar(100) DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  `etablishment` int(10) unsigned DEFAULT NULL,
  `postal_code` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_address_1` (`person`),
  KEY `FK_atooerp_address_2` (`etablishment`),
  CONSTRAINT `FK_atooerp_address_1` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_address_2` FOREIGN KEY (`etablishment`) REFERENCES `atooerp_establishment` (`Id`) ON DELETE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=8538 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_app_commercial_partner_temp_configuration`
--

DROP TABLE IF EXISTS `atooerp_app_commercial_partner_temp_configuration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_app_commercial_partner_temp_configuration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `attribute_name` varchar(100) NOT NULL,
  `is_visible` tinyint(1) NOT NULL,
  `is_null` tinyint(1) NOT NULL,
  `rank` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_app_control`
--

DROP TABLE IF EXISTS `atooerp_app_control`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_app_control` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `label` varchar(255) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `app_interface` int(15) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_app_control_1` (`app_interface`),
  CONSTRAINT `FK_atooerp_app_control_1` FOREIGN KEY (`app_interface`) REFERENCES `atooerp_app_interface` (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=34 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_app_group_control`
--

DROP TABLE IF EXISTS `atooerp_app_group_control`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_app_group_control` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `group` int(10) unsigned DEFAULT NULL,
  `app_control` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_app_interface`
--

DROP TABLE IF EXISTS `atooerp_app_interface`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_app_interface` (
  `id` int(15) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_app_permission_temp`
--

DROP TABLE IF EXISTS `atooerp_app_permission_temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_app_permission_temp` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `group` int(10) unsigned NOT NULL,
  `opportunity_partner` tinyint(1) NOT NULL DEFAULT '0',
  `payment_partner` tinyint(1) NOT NULL DEFAULT '0',
  `quiz_partner` tinyint(1) NOT NULL DEFAULT '0',
  `update_partner` tinyint(1) NOT NULL DEFAULT '0',
  `opportunity_state` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_app_permission_temp_1` (`group`),
  CONSTRAINT `FK_atooerp_app_permission_temp_1` FOREIGN KEY (`group`) REFERENCES `atooerp_group` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_atoo_product`
--

DROP TABLE IF EXISTS `atooerp_atoo_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_atoo_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `code` varchar(45) DEFAULT NULL,
  `commercialisation_date` datetime DEFAULT NULL,
  `description` varchar(445) DEFAULT NULL,
  `logo` blob,
  `characteristics` blob,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_atoo_product_module`
--

DROP TABLE IF EXISTS `atooerp_atoo_product_module`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_atoo_product_module` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `atoo_product` int(10) unsigned DEFAULT NULL,
  `module` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_bank`
--

DROP TABLE IF EXISTS `atooerp_bank`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_bank` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `chec_socity` tinyint(1) DEFAULT NULL,
  `website` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `note` varchar(45) DEFAULT NULL,
  `number` varchar(45) DEFAULT NULL COMMENT 'adress',
  `street` varchar(45) DEFAULT NULL COMMENT 'adress',
  `city` varchar(45) DEFAULT NULL COMMENT 'adress',
  `state` varchar(45) DEFAULT NULL COMMENT 'adress',
  `country` varchar(45) DEFAULT NULL COMMENT 'adress',
  `postal_code` varchar(45) DEFAULT NULL COMMENT 'adress',
  `currency` int(10) unsigned DEFAULT NULL,
  `vat_code` varchar(45) DEFAULT NULL,
  `trade_register` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_communication`
--

DROP TABLE IF EXISTS `atooerp_communication`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_communication` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `title` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `email_checked` tinyint(1) DEFAULT NULL,
  `communication_type` varchar(200) DEFAULT NULL,
  `communication_name` varchar(45) DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `function` int(10) unsigned DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  `establishment` int(10) unsigned DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_communication_1` (`user`),
  KEY `FK_atooerp_communication_2` (`function`),
  KEY `FK_atooerp_communication_3` (`person`),
  KEY `FK_atooerp_communication_4` (`establishment`),
  CONSTRAINT `FK_atooerp_communication_1` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_communication_2` FOREIGN KEY (`function`) REFERENCES `atooerp_function` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_communication_3` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_communication_4` FOREIGN KEY (`establishment`) REFERENCES `atooerp_establishment` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=19629 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_contact`
--

DROP TABLE IF EXISTS `atooerp_contact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_contact` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `contact_value` varchar(100) DEFAULT NULL,
  `contact_description` int(10) unsigned DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  `etablishment` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_contact_2` (`person`),
  KEY `FK_atooerp_contact_3` (`etablishment`),
  KEY `FK_atooerp_contact_1` (`contact_description`),
  CONSTRAINT `FK_atooerp_contact_1` FOREIGN KEY (`contact_description`) REFERENCES `atooerp_contact_description` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_contact_2` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_contact_3` FOREIGN KEY (`etablishment`) REFERENCES `atooerp_establishment` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=22169 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_contact_description`
--

DROP TABLE IF EXISTS `atooerp_contact_description`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_contact_description` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `picture` blob,
  `contact_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_contact_description_1` (`contact_type`),
  CONSTRAINT `FK_atooerp_contact_description_1` FOREIGN KEY (`contact_type`) REFERENCES `atooerp_contact_type` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_contact_type`
--

DROP TABLE IF EXISTS `atooerp_contact_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_contact_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_control`
--

DROP TABLE IF EXISTS `atooerp_control`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_control` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `form` varchar(245) DEFAULT NULL,
  `control` varchar(245) DEFAULT NULL,
  `default_visibility` tinyint(1) DEFAULT NULL,
  `grid` varchar(245) DEFAULT NULL,
  `type` varchar(200) DEFAULT NULL,
  `text` varchar(1000) DEFAULT NULL,
  `solution` int(10) unsigned DEFAULT NULL COMMENT 'if 1 then desktop else app mobile',
  `parent` varchar(245) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7290 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_controls`
--

DROP TABLE IF EXISTS `atooerp_controls`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_controls` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `form` varchar(45) DEFAULT NULL,
  `control` varchar(45) DEFAULT NULL,
  `default_visibility` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_convocation`
--

DROP TABLE IF EXISTS `atooerp_convocation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_convocation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `convocation_type` int(10) unsigned DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_convocation_1` (`convocation_type`),
  KEY `FK_atooerp_convocation_3` (`person`),
  CONSTRAINT `FK_atooerp_convocation_1` FOREIGN KEY (`convocation_type`) REFERENCES `atooerp_convocation_type` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_convocation_2` FOREIGN KEY (`Id`) REFERENCES `atooerp_communication` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_convocation_3` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_convocation_type`
--

DROP TABLE IF EXISTS `atooerp_convocation_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_convocation_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `day_limite` datetime DEFAULT NULL,
  `time` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_country`
--

DROP TABLE IF EXISTS `atooerp_country`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_country` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` int(3) DEFAULT NULL,
  `alpha2` varchar(2) DEFAULT NULL,
  `alpha3` varchar(3) DEFAULT NULL,
  `name_en_gb` varchar(100) DEFAULT NULL,
  `name_fr_fr` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=242 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_currency`
--

DROP TABLE IF EXISTS `atooerp_currency`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_currency` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `symbol` varchar(45) DEFAULT NULL,
  `unitie_name` varchar(45) DEFAULT NULL,
  `big_unitie` varchar(45) DEFAULT NULL,
  `small_unitie` varchar(45) DEFAULT NULL,
  `decimal_numbre` int(10) unsigned DEFAULT '3',
  `round` int(10) unsigned DEFAULT '3',
  `principal` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_document`
--

DROP TABLE IF EXISTS `atooerp_document`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_document` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `description` varchar(1000) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `date_validity` datetime DEFAULT NULL,
  `extension` varchar(45) DEFAULT NULL,
  `type_document` int(10) unsigned DEFAULT NULL,
  `content` longblob,
  `check` tinyint(1) DEFAULT NULL,
  `size` int(10) unsigned DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `return_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_document_1` (`type_document`),
  KEY `Index_3` (`piece`,`piece_type`)
) ENGINE=InnoDB AUTO_INCREMENT=68022 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_document_delete`
--

DROP TABLE IF EXISTS `atooerp_document_delete`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_document_delete` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=34633 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_domain`
--

DROP TABLE IF EXISTS `atooerp_domain`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_domain` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `domain_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_domain_1` (`domain_type`),
  CONSTRAINT `FK_atooerp_domain_1` FOREIGN KEY (`domain_type`) REFERENCES `atooerp_domain_type` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=52 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_domain_type`
--

DROP TABLE IF EXISTS `atooerp_domain_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_domain_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_establishment`
--

DROP TABLE IF EXISTS `atooerp_establishment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_establishment` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `domain` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_establishment_2` (`domain`),
  CONSTRAINT `FK_atooerp_establishment_2` FOREIGN KEY (`domain`) REFERENCES `atooerp_domain` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1040 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_function`
--

DROP TABLE IF EXISTS `atooerp_function`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_function` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_group`
--

DROP TABLE IF EXISTS `atooerp_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `module` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=46 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_input_editors`
--

DROP TABLE IF EXISTS `atooerp_input_editors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_input_editors` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) CHARACTER SET latin1 NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language`
--

DROP TABLE IF EXISTS `atooerp_language`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `create_date` datetime NOT NULL,
  `memo` varchar(200) DEFAULT NULL,
  `right_to_left` tinyint(1) NOT NULL,
  `is_default` tinyint(1) NOT NULL DEFAULT '0',
  `code` varchar(5) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `after_language_insert` AFTER INSERT ON `atooerp_language` FOR EACH ROW BEGIN
    CALL insert_new_language_translations(NEW.Id);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `atooerp_language_control`
--

DROP TABLE IF EXISTS `atooerp_language_control`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_control` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `control` int(10) unsigned NOT NULL,
  `language` int(10) unsigned NOT NULL,
  `translation` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_language_control_control` (`control`),
  KEY `FK_atooerp_language_control_language` (`language`),
  CONSTRAINT `FK_atooerp_language_control_control` FOREIGN KEY (`control`) REFERENCES `atooerp_control` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_language_control_language` FOREIGN KEY (`language`) REFERENCES `atooerp_language` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language_label`
--

DROP TABLE IF EXISTS `atooerp_language_label`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_label` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `text` varchar(1000) NOT NULL,
  `hash` char(64) NOT NULL,
  `class` varchar(255) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language_label_translation`
--

DROP TABLE IF EXISTS `atooerp_language_label_translation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_label_translation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `original` int(10) unsigned NOT NULL,
  `translation` varchar(1000) NOT NULL,
  `language` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_language_label_translation_language` (`language`),
  KEY `FK_atooerp_language_label_translation_label` (`original`),
  CONSTRAINT `FK_atooerp_language_label_translation_label` FOREIGN KEY (`original`) REFERENCES `atooerp_language_label` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_language_label_translation_language` FOREIGN KEY (`language`) REFERENCES `atooerp_language` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language_message`
--

DROP TABLE IF EXISTS `atooerp_language_message`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_message` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `message` varchar(1000) NOT NULL,
  `caption` varchar(255) DEFAULT NULL,
  `class` varchar(255) NOT NULL,
  `hash` char(64) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language_message_translation`
--

DROP TABLE IF EXISTS `atooerp_language_message_translation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_message_translation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `original` int(10) unsigned NOT NULL,
  `message` varchar(1000) NOT NULL,
  `caption` varchar(255) DEFAULT NULL,
  `language` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_language_message_translation_original` (`original`),
  KEY `FK_atooerp_language_message_translation_language` (`language`),
  CONSTRAINT `FK_atooerp_language_message_translation_language` FOREIGN KEY (`language`) REFERENCES `atooerp_language` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_language_message_translation_original` FOREIGN KEY (`original`) REFERENCES `atooerp_language_message` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language_messagebox_buttons`
--

DROP TABLE IF EXISTS `atooerp_language_messagebox_buttons`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_messagebox_buttons` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `language` int(10) unsigned NOT NULL,
  `ok` varchar(45) NOT NULL,
  `cancel` varchar(45) NOT NULL,
  `yes` varchar(45) NOT NULL,
  `no` varchar(45) NOT NULL,
  `abort` varchar(45) NOT NULL,
  `ignore` varchar(45) NOT NULL,
  `retry` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_language_messagebox_buttons_language` (`language`),
  CONSTRAINT `FK_atooerp_language_messagebox_buttons_language` FOREIGN KEY (`language`) REFERENCES `atooerp_language` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language_struct`
--

DROP TABLE IF EXISTS `atooerp_language_struct`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_struct` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `table` varchar(45) NOT NULL,
  `column` varchar(45) NOT NULL,
  `row` varchar(45) NOT NULL,
  `language` int(10) unsigned NOT NULL,
  `translation` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_language_struct_language` (`language`),
  KEY `Index_3` (`table`,`column`),
  CONSTRAINT `FK_atooerp_language_struct_language` FOREIGN KEY (`language`) REFERENCES `atooerp_language` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_language_type`
--

DROP TABLE IF EXISTS `atooerp_language_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_language_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `language` int(10) unsigned NOT NULL,
  `type` varchar(200) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `getInsertFormTitle` varchar(200) DEFAULT NULL,
  `getInsertTitle` varchar(200) DEFAULT NULL,
  `getUpdateFormTitle` varchar(200) DEFAULT NULL,
  `getUpdateTitle` varchar(200) DEFAULT NULL,
  `getListeFormTitle` varchar(200) DEFAULT NULL,
  `getListeTitle` varchar(200) DEFAULT NULL,
  `insert_message` varchar(200) DEFAULT NULL,
  `update_message` varchar(200) DEFAULT NULL,
  `delete_message` varchar(200) DEFAULT NULL,
  `delete_confirmation_message` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_language_type_language` (`language`),
  CONSTRAINT `FK_atooerp_language_type_language` FOREIGN KEY (`language`) REFERENCES `atooerp_language` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_licence`
--

DROP TABLE IF EXISTS `atooerp_licence`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_licence` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `start_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `serial_number` varchar(45) DEFAULT NULL,
  `socity_name` varchar(45) DEFAULT NULL,
  `vat_code` varchar(45) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `serial_hard_disk` varchar(45) DEFAULT NULL,
  `serial_processor` varchar(45) DEFAULT NULL,
  `key` varchar(445) DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  `change_reason` int(10) unsigned DEFAULT NULL,
  `atoo_product` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_licence_change_reason`
--

DROP TABLE IF EXISTS `atooerp_licence_change_reason`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_licence_change_reason` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_log`
--

DROP TABLE IF EXISTS `atooerp_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user` int(10) unsigned DEFAULT NULL,
  `object_type` varchar(255) DEFAULT NULL,
  `object` int(10) unsigned DEFAULT NULL,
  `type` varchar(255) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `ip` varchar(45) DEFAULT NULL,
  `mac_adress` varchar(100) DEFAULT NULL,
  `machine_name` varchar(100) DEFAULT NULL,
  `gps` varchar(100) DEFAULT NULL,
  `description` mediumtext,
  `name` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=18023 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_account`
--

DROP TABLE IF EXISTS `atooerp_mailer_account`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_account` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `email_address` varchar(200) DEFAULT NULL,
  `security_Protocol` int(10) unsigned DEFAULT NULL,
  `port` int(11) DEFAULT NULL,
  `password` varchar(45) DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `is_default` tinyint(1) DEFAULT NULL,
  `smtp_server` varchar(200) DEFAULT NULL,
  `server` int(10) unsigned DEFAULT NULL,
  `full_signature` longblob,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_email_account_1` (`user`),
  KEY `FK_mailer_account_2` (`security_Protocol`),
  KEY `FK_mailer_account_3` (`server`),
  CONSTRAINT `FK_mailer_account_2` FOREIGN KEY (`security_Protocol`) REFERENCES `atooerp_mailer_security_protocol` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_mailer_account_3` FOREIGN KEY (`server`) REFERENCES `atooerp_mailer_server` (`Id`),
  CONSTRAINT `FK_mailer_email_account_1` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email`
--

DROP TABLE IF EXISTS `atooerp_mailer_email`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `sender` varchar(2000) DEFAULT NULL,
  `recipient` varchar(100) DEFAULT NULL,
  `subject` varchar(300) DEFAULT NULL,
  `body` longblob,
  `create_date` datetime DEFAULT NULL,
  `sending_date` datetime DEFAULT NULL,
  `email_account` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `name` varchar(1000) DEFAULT NULL,
  `cc` varchar(2000) DEFAULT NULL,
  `cci` varchar(2000) DEFAULT NULL,
  `template` int(10) unsigned DEFAULT NULL,
  `piece` int(10) DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_email_1` (`email_account`),
  KEY `FK_mailer_email_2` (`state`),
  KEY `FK_mailer_email_3` (`template`),
  KEY `index_5` (`piece`,`piece_type`),
  CONSTRAINT `FK_mailer_email_1` FOREIGN KEY (`email_account`) REFERENCES `atooerp_mailer_account` (`Id`),
  CONSTRAINT `FK_mailer_email_2` FOREIGN KEY (`state`) REFERENCES `atooerp_mailer_email_state` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_mailer_email_3` FOREIGN KEY (`template`) REFERENCES `atooerp_mailer_email_template` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=353 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email_address`
--

DROP TABLE IF EXISTS `atooerp_mailer_email_address`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email_address` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `address` varchar(100) NOT NULL,
  `create_date` datetime DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_mailer_email_address_1` (`user`),
  CONSTRAINT `FK_atooerp_mailer_email_address_1` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=253 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email_address_send_type`
--

DROP TABLE IF EXISTS `atooerp_mailer_email_address_send_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email_address_send_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `email_address` int(10) unsigned DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `email` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_email_address_send_type_1` (`email_address`),
  KEY `FK_mailer_email_address_send_type_2` (`email`),
  KEY `FK_mailer_email_address_send_type_3` (`type`),
  CONSTRAINT `FK_mailer_email_address_send_type_1` FOREIGN KEY (`email_address`) REFERENCES `atooerp_mailer_email_address` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_mailer_email_address_send_type_2` FOREIGN KEY (`email`) REFERENCES `atooerp_mailer_email` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_mailer_email_address_send_type_3` FOREIGN KEY (`type`) REFERENCES `atooerp_mailer_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=351 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email_attachment`
--

DROP TABLE IF EXISTS `atooerp_mailer_email_attachment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email_attachment` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `memo` varchar(1000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `document` int(10) unsigned NOT NULL,
  `email` int(10) unsigned NOT NULL,
  `name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_attachement_1` (`email`),
  KEY `FK_mailer_attachment_2` (`document`),
  CONSTRAINT `FK_mailer_attachment_1` FOREIGN KEY (`email`) REFERENCES `atooerp_mailer_email` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_mailer_attachment_2` FOREIGN KEY (`document`) REFERENCES `atooerp_document` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=347 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email_progress`
--

DROP TABLE IF EXISTS `atooerp_mailer_email_progress`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email_progress` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `log` varchar(1000) DEFAULT NULL,
  `email` int(10) unsigned DEFAULT NULL,
  `email_state` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_email_progress_2` (`email_state`),
  KEY `FK_mailer_email_progress_1` (`email`),
  CONSTRAINT `FK_mailer_email_progress_1` FOREIGN KEY (`email`) REFERENCES `atooerp_mailer_email` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_mailer_email_progress_2` FOREIGN KEY (`email_state`) REFERENCES `atooerp_mailer_email_state` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=310 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email_state`
--

DROP TABLE IF EXISTS `atooerp_mailer_email_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email_template`
--

DROP TABLE IF EXISTS `atooerp_mailer_email_template`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email_template` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `content` longblob,
  `memo` varchar(1000) DEFAULT NULL,
  `piece_type` varchar(400) DEFAULT NULL,
  `is_default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=18 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_email_template_report_template`
--

DROP TABLE IF EXISTS `atooerp_mailer_email_template_report_template`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_email_template_report_template` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `template` int(10) unsigned DEFAULT NULL,
  `report_template` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_mailer_emailt_template_report_template_1` (`template`),
  KEY `FK_atooerp_mailer_emailt_template_report_template_2` (`report_template`),
  CONSTRAINT `FK_atooerp_mailer_emailt_template_report_template_1` FOREIGN KEY (`template`) REFERENCES `atooerp_mailer_email_template` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_atooerp_mailer_emailt_template_report_template_2` FOREIGN KEY (`report_template`) REFERENCES `atooerp_report_template` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=61 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_report_template_document`
--

DROP TABLE IF EXISTS `atooerp_mailer_report_template_document`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_report_template_document` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `report_template` int(10) unsigned DEFAULT NULL,
  `document` int(10) unsigned DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_document_report_template_2` (`report_template`),
  KEY `FK_atooerp_document_report_template_1` (`document`),
  CONSTRAINT `FK_atooerp_document_report_template_1` FOREIGN KEY (`document`) REFERENCES `atooerp_document` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_document_report_template_2` FOREIGN KEY (`report_template`) REFERENCES `atooerp_report_template` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=700 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_security_protocol`
--

DROP TABLE IF EXISTS `atooerp_mailer_security_protocol`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_security_protocol` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_send_log`
--

DROP TABLE IF EXISTS `atooerp_mailer_send_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_send_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `log` varchar(1000) DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_send_log_1` (`state`),
  CONSTRAINT `FK_mailer_send_log_1` FOREIGN KEY (`state`) REFERENCES `atooerp_mailer_email_state` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_server`
--

DROP TABLE IF EXISTS `atooerp_mailer_server`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_server` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `address` varchar(45) DEFAULT NULL,
  `send_timer` int(10) unsigned DEFAULT NULL,
  `check_timer` int(10) unsigned DEFAULT NULL,
  `send_state` int(10) unsigned DEFAULT NULL,
  `check_state` int(10) unsigned DEFAULT NULL,
  `is_default` tinyint(1) DEFAULT NULL,
  `is_sending` tinyint(1) DEFAULT '0',
  `hostname` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_email_server_1` (`check_state`),
  KEY `FK_mailer_email_server_2` (`send_state`),
  CONSTRAINT `FK_mailer_email_server_1` FOREIGN KEY (`check_state`) REFERENCES `atooerp_mailer_server_state` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_mailer_email_server_2` FOREIGN KEY (`send_state`) REFERENCES `atooerp_mailer_server_state` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_server_log`
--

DROP TABLE IF EXISTS `atooerp_mailer_server_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_server_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `server` int(10) unsigned DEFAULT NULL,
  `log` varchar(1000) DEFAULT NULL,
  `server_state` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_mailer_server_log_1` (`server`),
  KEY `FK_mailer_server_log_2` (`server_state`),
  CONSTRAINT `FK_mailer_server_log_1` FOREIGN KEY (`server`) REFERENCES `atooerp_mailer_server` (`Id`),
  CONSTRAINT `FK_mailer_server_log_2` FOREIGN KEY (`server_state`) REFERENCES `atooerp_mailer_server_state` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_server_state`
--

DROP TABLE IF EXISTS `atooerp_mailer_server_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_server_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `started` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_service_log`
--

DROP TABLE IF EXISTS `atooerp_mailer_service_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_service_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `log` varchar(1000) DEFAULT NULL,
  `address` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mailer_type`
--

DROP TABLE IF EXISTS `atooerp_mailer_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mailer_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mapping`
--

DROP TABLE IF EXISTS `atooerp_mapping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mapping` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `class_name` varchar(45) NOT NULL,
  `form_list` varchar(45) DEFAULT NULL,
  `form_add` varchar(45) DEFAULT NULL COMMENT 'ajouter',
  `form_apda` varchar(45) DEFAULT NULL COMMENT 'modifier',
  `form_card` varchar(45) DEFAULT NULL COMMENT 'fiche',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mask`
--

DROP TABLE IF EXISTS `atooerp_mask`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mask` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` varchar(1000) DEFAULT NULL,
  `control` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_mask_control`
--

DROP TABLE IF EXISTS `atooerp_mask_control`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_mask_control` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `piece` int(10) unsigned DEFAULT NULL,
  `mask` int(10) unsigned DEFAULT NULL,
  `control` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_mask_control_1` (`mask`),
  CONSTRAINT `FK_atooerp_mask_control_1` FOREIGN KEY (`mask`) REFERENCES `atooerp_mask` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_messages`
--

DROP TABLE IF EXISTS `atooerp_messages`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_messages` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `text` mediumtext,
  `piece` int(10) unsigned DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `sender` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`piece`,`piece_type`),
  KEY `FK_atooerp_message_1` (`sender`),
  CONSTRAINT `FK_atooerp_message_1` FOREIGN KEY (`sender`) REFERENCES `atooerp_user` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_messages_receiver`
--

DROP TABLE IF EXISTS `atooerp_messages_receiver`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_messages_receiver` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `message` int(10) unsigned NOT NULL,
  `is_read` tinyint(1) DEFAULT NULL,
  `read_date` datetime DEFAULT NULL,
  `receiver` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_message_receiver_2` (`message`) USING BTREE,
  KEY `FK_atooerp_message_receiver_3` (`receiver`) USING BTREE,
  CONSTRAINT `FK_atooerp_message_receiver_2` FOREIGN KEY (`message`) REFERENCES `atooerp_messages` (`Id`),
  CONSTRAINT `FK_atooerp_message_receiver_3` FOREIGN KEY (`receiver`) REFERENCES `atooerp_user` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_migration`
--

DROP TABLE IF EXISTS `atooerp_migration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_migration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL,
  `version` varchar(200) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_module`
--

DROP TABLE IF EXISTS `atooerp_module`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_module` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_note`
--

DROP TABLE IF EXISTS `atooerp_note`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_note` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `description` mediumtext,
  `piece` int(10) unsigned DEFAULT NULL,
  `piece_type` varchar(255) DEFAULT NULL,
  `create_date` datetime NOT NULL,
  `create_user` int(10) unsigned NOT NULL,
  `modify_date` datetime DEFAULT NULL,
  `modify_user` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_notification`
--

DROP TABLE IF EXISTS `atooerp_notification`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_notification` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `treatment_date` datetime DEFAULT NULL,
  `seen` tinyint(1) DEFAULT '0',
  `treated` tinyint(1) DEFAULT '0',
  `object` int(10) unsigned DEFAULT NULL,
  `object_name` varchar(255) DEFAULT NULL,
  `type` int(10) unsigned DEFAULT '0',
  `treatment_user` int(10) unsigned DEFAULT '0',
  `message` varchar(245) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_notification_date`
--

DROP TABLE IF EXISTS `atooerp_notification_date`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_notification_date` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_notification_seen_user`
--

DROP TABLE IF EXISTS `atooerp_notification_seen_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_notification_seen_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `notification` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_notification_type`
--

DROP TABLE IF EXISTS `atooerp_notification_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_notification_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `message` varchar(45) DEFAULT NULL,
  `object_type` varchar(445) DEFAULT NULL,
  `window` varchar(445) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=13 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_notification_type_user_group`
--

DROP TABLE IF EXISTS `atooerp_notification_type_user_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_notification_type_user_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `notification_type` int(10) unsigned DEFAULT NULL,
  `user_group` int(10) unsigned DEFAULT NULL,
  `visible` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_object_limitation`
--

DROP TABLE IF EXISTS `atooerp_object_limitation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_object_limitation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `atoo_product` int(10) unsigned DEFAULT NULL,
  `object_name` varchar(445) DEFAULT NULL,
  `limitation_number` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person`
--

DROP TABLE IF EXISTS `atooerp_person`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `first_name` varchar(45) DEFAULT NULL,
  `last_name` varchar(45) DEFAULT NULL,
  `sex` int(10) unsigned DEFAULT NULL,
  `marital_status` int(10) unsigned DEFAULT NULL,
  `birth_date` datetime DEFAULT NULL,
  `birth_place` varchar(45) DEFAULT NULL,
  `nationality` int(10) unsigned DEFAULT NULL,
  `address` int(10) unsigned DEFAULT NULL,
  `identity` int(10) unsigned DEFAULT NULL,
  `picture` longblob,
  `primary_occupation` int(10) unsigned DEFAULT NULL,
  `handicap` tinyint(1) DEFAULT NULL,
  `handicap_description` varchar(1000) DEFAULT NULL,
  `profile_instance` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_person_1` (`sex`),
  KEY `FK_atooerp_person_2` (`marital_status`),
  KEY `FK_atooerp_person_3` (`primary_occupation`),
  CONSTRAINT `FK_atooerp_person_1` FOREIGN KEY (`sex`) REFERENCES `atooerp_person_sex` (`Id`),
  CONSTRAINT `FK_atooerp_person_2` FOREIGN KEY (`marital_status`) REFERENCES `atooerp_person_marital_status` (`Id`),
  CONSTRAINT `FK_atooerp_person_3` FOREIGN KEY (`primary_occupation`) REFERENCES `atooerp_domain` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4772 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person_function`
--

DROP TABLE IF EXISTS `atooerp_person_function`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person_function` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `description` varchar(1000) DEFAULT NULL,
  `document` blob,
  `person` int(10) unsigned DEFAULT NULL,
  `function` int(10) unsigned DEFAULT NULL,
  `domain` int(10) unsigned DEFAULT NULL,
  `establishment` int(10) unsigned DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_person_function_1` (`person`),
  KEY `FK_atooerp_person_function_2` (`function`),
  KEY `FK_atooerp_person_function_3` (`domain`),
  KEY `FK_atooerp_person_function_4` (`establishment`),
  CONSTRAINT `FK_atooerp_person_function_1` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_person_function_2` FOREIGN KEY (`function`) REFERENCES `atooerp_function` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_person_function_3` FOREIGN KEY (`domain`) REFERENCES `atooerp_domain` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_person_function_4` FOREIGN KEY (`establishment`) REFERENCES `atooerp_establishment` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=12488 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person_identity`
--

DROP TABLE IF EXISTS `atooerp_person_identity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person_identity` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `country` int(10) unsigned DEFAULT NULL,
  `piece_type` int(10) unsigned DEFAULT NULL,
  `value_number` varchar(45) DEFAULT NULL,
  `validated_date` datetime DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_person_identity_1` (`person`),
  KEY `FK_atooerp_person_identity_2` (`piece_type`),
  KEY `FK_atooerp_person_identity_3` (`country`),
  CONSTRAINT `FK_atooerp_person_identity_1` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_atooerp_person_identity_2` FOREIGN KEY (`piece_type`) REFERENCES `atooerp_person_identity_piece_type` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_person_identity_3` FOREIGN KEY (`country`) REFERENCES `atooerp_country` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8451 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person_identity_piece_type`
--

DROP TABLE IF EXISTS `atooerp_person_identity_piece_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person_identity_piece_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person_marital_status`
--

DROP TABLE IF EXISTS `atooerp_person_marital_status`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person_marital_status` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person_relation`
--

DROP TABLE IF EXISTS `atooerp_person_relation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person_relation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `person` int(10) unsigned NOT NULL,
  `parent` int(10) unsigned NOT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `relation_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_person_relation_1` (`person`),
  KEY `FK_atooerp_person_relation_2` (`parent`),
  KEY `FK_atooerp_person_relation_3` (`relation_type`),
  CONSTRAINT `FK_atooerp_person_relation_1` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_person_relation_2` FOREIGN KEY (`parent`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_person_relation_3` FOREIGN KEY (`relation_type`) REFERENCES `atooerp_person_relation_type` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person_relation_type`
--

DROP TABLE IF EXISTS `atooerp_person_relation_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person_relation_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_person_sex`
--

DROP TABLE IF EXISTS `atooerp_person_sex`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_person_sex` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_project`
--

DROP TABLE IF EXISTS `atooerp_project`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_project` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `description` mediumtext,
  `start_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `total_budget` double DEFAULT '0',
  `consumed_budget` double DEFAULT '0',
  `status` int(10) unsigned DEFAULT NULL,
  `manager` int(10) unsigned DEFAULT NULL,
  `collaborators` int(10) unsigned DEFAULT NULL,
  `active` tinyint(1) DEFAULT '1',
  `partner` int(10) unsigned DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `duration` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_project_1` (`manager`),
  KEY `FK_atooerp_project_2` (`partner`) USING BTREE,
  KEY `FK_atooerp_project_3` (`status`),
  CONSTRAINT `FK_atooerp_project_1` FOREIGN KEY (`manager`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_atooerp_project_2` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_project_3` FOREIGN KEY (`status`) REFERENCES `atooerp_project_status` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_project_cycle`
--

DROP TABLE IF EXISTS `atooerp_project_cycle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_project_cycle` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `project` int(10) unsigned NOT NULL,
  `cycle` int(10) unsigned NOT NULL,
  `created_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_project_cycle_1` (`project`),
  KEY `FK_atooerp_project_cycle_2` (`cycle`),
  CONSTRAINT `FK_atooerp_project_cycle_1` FOREIGN KEY (`project`) REFERENCES `atooerp_project` (`Id`),
  CONSTRAINT `FK_atooerp_project_cycle_2` FOREIGN KEY (`cycle`) REFERENCES `atooerp_step_cycle` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_project_priorities`
--

DROP TABLE IF EXISTS `atooerp_project_priorities`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_project_priorities` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `level` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_project_status`
--

DROP TABLE IF EXISTS `atooerp_project_status`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_project_status` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_project_task`
--

DROP TABLE IF EXISTS `atooerp_project_task`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_project_task` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `start_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `status` int(10) unsigned DEFAULT NULL,
  `priority` int(10) unsigned DEFAULT NULL,
  `assigned` int(10) unsigned DEFAULT NULL,
  `spend_hours` datetime DEFAULT NULL,
  `estimated_cost` double DEFAULT NULL,
  `actual_cost` double DEFAULT NULL,
  `project` int(10) unsigned DEFAULT NULL,
  `parent_task_id` int(10) unsigned DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `duration` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_project_task_1` (`assigned`),
  KEY `FK_atooerp_project_task_3` (`priority`),
  KEY `FK_atooerp_project_task_2` (`status`),
  KEY `FK_atooerp_project_task_4` (`project`),
  CONSTRAINT `FK_atooerp_project_task_1` FOREIGN KEY (`assigned`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_project_task_2` FOREIGN KEY (`status`) REFERENCES `atooerp_project_status` (`Id`),
  CONSTRAINT `FK_atooerp_project_task_3` FOREIGN KEY (`priority`) REFERENCES `atooerp_project_priorities` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_project_task_4` FOREIGN KEY (`project`) REFERENCES `atooerp_project` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_project_task_piece`
--

DROP TABLE IF EXISTS `atooerp_project_task_piece`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_project_task_piece` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `task` int(10) unsigned DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `piece_type` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_project_task_piece_1` (`task`),
  KEY `FK_atooerp_project_task_piece_2` (`piece`),
  CONSTRAINT `FK_atooerp_project_task_piece_1` FOREIGN KEY (`task`) REFERENCES `atooerp_project_task` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_report_template`
--

DROP TABLE IF EXISTS `atooerp_report_template`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_report_template` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `memo` varchar(45) DEFAULT NULL,
  `content` longblob,
  `piece_type` varchar(100) DEFAULT NULL,
  `is_default` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=29 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_socity`
--

DROP TABLE IF EXISTS `atooerp_socity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_socity` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  `legal_form` varchar(45) DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `activity` varchar(255) DEFAULT NULL,
  `description` varchar(445) DEFAULT NULL,
  `website` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `number` varchar(45) DEFAULT NULL COMMENT 'adress',
  `street` varchar(45) DEFAULT NULL COMMENT 'adress',
  `city` varchar(45) DEFAULT NULL COMMENT 'adress',
  `state` varchar(45) DEFAULT NULL COMMENT 'adress',
  `country` varchar(45) DEFAULT NULL COMMENT 'adress',
  `postal_code` varchar(45) DEFAULT NULL COMMENT 'adress',
  `delivery_number` varchar(45) DEFAULT NULL,
  `delivery_street` varchar(45) DEFAULT NULL,
  `delivery_city` varchar(45) DEFAULT NULL,
  `delivery_state` varchar(45) DEFAULT NULL,
  `delivery_country` varchar(45) DEFAULT NULL,
  `delivery_postal_code` varchar(45) DEFAULT NULL,
  `customs_code` varchar(45) DEFAULT NULL,
  `vat_code` varchar(45) DEFAULT NULL,
  `trade_register` varchar(45) DEFAULT NULL,
  `share_capital` varchar(45) DEFAULT NULL,
  `logo` longblob,
  `accountant` int(10) DEFAULT '0',
  `header_picture` longblob,
  `bottom_picture` longblob,
  `currency` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_socity_1` (`currency`),
  CONSTRAINT `FK_atooerp_socity_1` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_socity_group`
--

DROP TABLE IF EXISTS `atooerp_socity_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_socity_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(45) DEFAULT NULL,
  `opportunity_consult` tinyint(1) DEFAULT NULL,
  `opportunity_save` tinyint(1) DEFAULT NULL,
  `opportunity_validate` tinyint(1) DEFAULT NULL,
  `purchase_quotation_consult` tinyint(1) DEFAULT NULL,
  `purchase_quotation_save` tinyint(1) DEFAULT NULL,
  `purchase_quotation_validate` tinyint(1) DEFAULT NULL,
  `sale_quotation_consult` tinyint(1) DEFAULT NULL,
  `sale_quotation_save` tinyint(1) DEFAULT NULL,
  `sale_quotation_validate` tinyint(1) DEFAULT NULL,
  `purchase_order_consult` tinyint(1) DEFAULT NULL,
  `purchase_order_save` tinyint(1) DEFAULT NULL,
  `purchase_order_validate` tinyint(1) DEFAULT NULL,
  `sale_order_consult` tinyint(1) DEFAULT NULL,
  `sale_order_save` tinyint(1) DEFAULT NULL,
  `sale_order_validate` tinyint(1) DEFAULT NULL,
  `purchase_shipping_consult` tinyint(1) DEFAULT NULL,
  `purchase_shipping_save` tinyint(1) DEFAULT NULL,
  `purchase_shipping_validate` tinyint(1) DEFAULT NULL,
  `sale_shipping_consult` tinyint(1) DEFAULT NULL,
  `sale_shipping_save` tinyint(1) DEFAULT NULL,
  `sale_shipping_validate` tinyint(1) DEFAULT NULL,
  `purchase_shipping_return_consult` tinyint(1) DEFAULT NULL,
  `purchase_shipping_return_save` tinyint(1) DEFAULT NULL,
  `purchase_shipping_return_validate` tinyint(1) DEFAULT NULL,
  `sale_shipping_return_consult` tinyint(1) DEFAULT NULL,
  `sale_shipping_return_save` tinyint(1) DEFAULT NULL,
  `sale_shipping_return_validate` tinyint(1) DEFAULT NULL,
  `purchase_Invoice_consult` tinyint(1) DEFAULT NULL,
  `purchase_Invoice_save` tinyint(1) DEFAULT NULL,
  `purchase_Invoice_validate` tinyint(1) DEFAULT NULL,
  `sale_Invoice_consult` tinyint(1) DEFAULT NULL,
  `sale_Invoice_save` tinyint(1) DEFAULT NULL,
  `sale_Invoice_validate` tinyint(1) DEFAULT NULL,
  `purchase_credit_invoice_consult` tinyint(1) DEFAULT NULL,
  `purchase_credit_invoice_save` tinyint(1) DEFAULT NULL,
  `purchase_credit_invoice_validate` tinyint(1) DEFAULT NULL,
  `purchase_payment_consult` tinyint(1) DEFAULT NULL,
  `purchase_payment_save` tinyint(1) DEFAULT NULL,
  `purchase_payment_validate` tinyint(1) DEFAULT NULL,
  `sale_payment_consult` tinyint(1) DEFAULT NULL,
  `sale_payment_save` tinyint(1) DEFAULT NULL,
  `sale_payment_validate` tinyint(1) DEFAULT NULL,
  `pos_order_consult` tinyint(1) DEFAULT NULL,
  `pos_order_save` tinyint(1) DEFAULT NULL,
  `pos_order_validate` tinyint(1) DEFAULT NULL,
  `need_expression_consult` tinyint(1) DEFAULT NULL,
  `need_expression_save` tinyint(1) DEFAULT NULL,
  `need_expression_validate` tinyint(1) DEFAULT NULL,
  `stock_entry_consult` tinyint(1) DEFAULT NULL,
  `stock_entry_save` tinyint(1) DEFAULT NULL,
  `stock_entry_validate` tinyint(1) DEFAULT NULL,
  `stock_mouvement_consult` tinyint(1) DEFAULT NULL,
  `stock_mouvement_save` tinyint(1) DEFAULT NULL,
  `stock_mouvement_validate` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_socity_user`
--

DROP TABLE IF EXISTS `atooerp_socity_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_socity_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `enabled` tinyint(1) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `group` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_socity_user_1` (`socity`),
  KEY `FK_atooerp_socity_user_2` (`user`),
  KEY `FK_atooerp_socity_user_3` (`group`),
  CONSTRAINT `FK_atooerp_socity_user_1` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_atooerp_socity_user_2` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_atooerp_socity_user_3` FOREIGN KEY (`group`) REFERENCES `atooerp_socity_group` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_sql_query`
--

DROP TABLE IF EXISTS `atooerp_sql_query`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_sql_query` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `sql` text NOT NULL,
  `form` varchar(1000) NOT NULL,
  `grid` varchar(255) NOT NULL,
  `name` varchar(45) NOT NULL,
  `active` tinyint(1) NOT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_sql_script`
--

DROP TABLE IF EXISTS `atooerp_sql_script`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_sql_script` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `sql_sript_id` int(10) unsigned NOT NULL,
  `create_date` datetime NOT NULL,
  `name` varchar(200) NOT NULL,
  `value` mediumtext,
  `comment` text,
  `executed` tinyint(1) NOT NULL,
  `executed_date` datetime NOT NULL,
  `error` mediumtext,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=121 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_step`
--

DROP TABLE IF EXISTS `atooerp_step`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_step` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  `icon` longblob,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_step_cycle`
--

DROP TABLE IF EXISTS `atooerp_step_cycle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_step_cycle` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `entity` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `enabled` tinyint(1) DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_step_cycle_1` (`entity`),
  CONSTRAINT `FK_atooerp_step_cycle_1` FOREIGN KEY (`entity`) REFERENCES `atooerp_step_entity` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_step_cycle_line`
--

DROP TABLE IF EXISTS `atooerp_step_cycle_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_step_cycle_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `rank` int(10) unsigned DEFAULT NULL,
  `step` int(10) unsigned DEFAULT NULL,
  `cycle` int(10) unsigned DEFAULT NULL,
  `is_closing` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_step_cycle_line_1` (`step`),
  KEY `FK_atooerp_step_cycle_line_2` (`cycle`),
  CONSTRAINT `FK_atooerp_step_cycle_line_2` FOREIGN KEY (`cycle`) REFERENCES `atooerp_step_cycle` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_step_cycle_line_1` FOREIGN KEY (`step`) REFERENCES `atooerp_step` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_step_entity`
--

DROP TABLE IF EXISTS `atooerp_step_entity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_step_entity` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=690 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_step_object`
--

DROP TABLE IF EXISTS `atooerp_step_object`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_step_object` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `current` int(10) unsigned DEFAULT NULL,
  `cycle` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_step_object_1` (`current`),
  KEY `FK_atooerp_step_object_2` (`cycle`),
  CONSTRAINT `FK_atooerp_step_object_1` FOREIGN KEY (`current`) REFERENCES `atooerp_step` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_step_object_2` FOREIGN KEY (`cycle`) REFERENCES `atooerp_step_cycle` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_step_object_step`
--

DROP TABLE IF EXISTS `atooerp_step_object_step`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_step_object_step` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `step` int(10) unsigned DEFAULT NULL,
  `object` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_step_object_step_1` (`step`),
  KEY `FK_atooerp_step_object_step_2` (`object`),
  CONSTRAINT `FK_atooerp_step_object_step_1` FOREIGN KEY (`step`) REFERENCES `atooerp_step` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_step_object_step_2` FOREIGN KEY (`object`) REFERENCES `atooerp_step_object` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_tag`
--

DROP TABLE IF EXISTS `atooerp_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_tag` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(1000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `color` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`piece_type`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_tag_piece`
--

DROP TABLE IF EXISTS `atooerp_tag_piece`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_tag_piece` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `tag` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_tag_piece_1` (`tag`),
  KEY `Index_3` (`piece`,`piece_type`),
  CONSTRAINT `FK_atooerp_tag_piece_1` FOREIGN KEY (`tag`) REFERENCES `atooerp_tag` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_type`
--

DROP TABLE IF EXISTS `atooerp_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `system` tinyint(1) NOT NULL DEFAULT '0',
  `parent` int(10) unsigned DEFAULT NULL,
  `by_request` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_type_1` (`parent`),
  CONSTRAINT `FK_atooerp_type_1` FOREIGN KEY (`parent`) REFERENCES `atooerp_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_type_document`
--

DROP TABLE IF EXISTS `atooerp_type_document`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_type_document` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=1004 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_type_element`
--

DROP TABLE IF EXISTS `atooerp_type_element`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_type_element` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) NOT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `type_id` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_type_element_1` (`type_id`),
  KEY `FK_atooerp_type_element_2` (`parent`),
  CONSTRAINT `FK_atooerp_type_element_1` FOREIGN KEY (`type_id`) REFERENCES `atooerp_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_type_element_2` FOREIGN KEY (`parent`) REFERENCES `atooerp_type_element` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_type_input_editors`
--

DROP TABLE IF EXISTS `atooerp_type_input_editors`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_type_input_editors` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `type_id` int(10) unsigned NOT NULL,
  `input_editors_id` int(10) unsigned NOT NULL,
  `memo` varchar(2000) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_type_input_editors_1` (`type_id`),
  KEY `FK_atooerp_type_input_editors_2` (`input_editors_id`),
  CONSTRAINT `FK_atooerp_type_input_editors_1` FOREIGN KEY (`type_id`) REFERENCES `atooerp_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_atooerp_type_input_editors_2` FOREIGN KEY (`input_editors_id`) REFERENCES `atooerp_input_editors` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_user`
--

DROP TABLE IF EXISTS `atooerp_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `login` varchar(45) DEFAULT NULL,
  `password` varchar(45) DEFAULT '',
  `barcode` varchar(45) DEFAULT '',
  `skins` varchar(45) DEFAULT NULL,
  `type` int(10) unsigned DEFAULT '0',
  `stamp` longblob,
  `email` varchar(200) DEFAULT NULL,
  `email_smtpserver` varchar(200) DEFAULT NULL,
  `email_smtpserver_port` varchar(45) DEFAULT NULL,
  `email_smtpserver_enable_ssl` tinyint(1) DEFAULT NULL,
  `email_password` varchar(200) DEFAULT NULL,
  `email_signature` varchar(2000) DEFAULT NULL,
  `email_signature_picture` longblob,
  `first_name` varchar(200) DEFAULT NULL,
  `last_name` varchar(200) DEFAULT NULL,
  `job_position` varchar(45) DEFAULT NULL,
  `sex` int(10) unsigned DEFAULT '2',
  `key_dallas` varchar(100) DEFAULT NULL,
  `product_restriction` tinyint(1) NOT NULL DEFAULT '1',
  `partner_restriction` tinyint(1) NOT NULL DEFAULT '1',
  `warehouse_restriction` tinyint(1) NOT NULL DEFAULT '1',
  `language` int(10) unsigned DEFAULT NULL,
  `socity_restriction` tinyint(1) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_user_1` (`sex`),
  KEY `FK_atooerp_user_language` (`language`),
  CONSTRAINT `FK_atooerp_user_1` FOREIGN KEY (`sex`) REFERENCES `atooerp_person_sex` (`Id`),
  CONSTRAINT `FK_atooerp_user_language` FOREIGN KEY (`language`) REFERENCES `atooerp_language` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=53 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_user_module_group`
--

DROP TABLE IF EXISTS `atooerp_user_module_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_user_module_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user` int(10) unsigned DEFAULT NULL,
  `module` int(10) unsigned DEFAULT NULL,
  `group` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=766 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_visibility`
--

DROP TABLE IF EXISTS `atooerp_visibility`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_visibility` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `group` int(10) unsigned DEFAULT NULL,
  `control` int(10) unsigned DEFAULT NULL,
  `visibility` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=201 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_warning`
--

DROP TABLE IF EXISTS `atooerp_warning`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_warning` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `warning_type` int(10) unsigned DEFAULT NULL,
  `number` int(10) unsigned DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_atooerp_warning_1` (`warning_type`),
  KEY `FK_atooerp_warning_3` (`person`),
  CONSTRAINT `FK_atooerp_warning_1` FOREIGN KEY (`warning_type`) REFERENCES `atooerp_warning_type` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_warning_2` FOREIGN KEY (`Id`) REFERENCES `atooerp_communication` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_atooerp_warning_3` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `atooerp_warning_type`
--

DROP TABLE IF EXISTS `atooerp_warning_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `atooerp_warning_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `texte` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_admission`
--

DROP TABLE IF EXISTS `booking_admission`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_admission` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `reservation` int(10) unsigned DEFAULT NULL,
  `season` int(10) unsigned DEFAULT NULL,
  `return_date` datetime DEFAULT NULL,
  `signed_document` int(10) unsigned DEFAULT NULL,
  `signed_document_checked` tinyint(1) DEFAULT NULL,
  `attachment` tinyint(1) DEFAULT NULL,
  `attachment_title` varchar(100) DEFAULT NULL,
  `attachment_p1` varchar(10000) DEFAULT NULL,
  `email_p0` varchar(10000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_admission_3` (`season`),
  KEY `FK_booking_admission_4` (`signed_document`),
  KEY `FK_booking_admission_2` (`reservation`),
  CONSTRAINT `FK_booking_admission_1` FOREIGN KEY (`Id`) REFERENCES `atooerp_communication` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_admission_2` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_admission_3` FOREIGN KEY (`season`) REFERENCES `booking_season` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_admission_4` FOREIGN KEY (`signed_document`) REFERENCES `atooerp_document` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=19629 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_admission_config`
--

DROP TABLE IF EXISTS `booking_admission_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_admission_config` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `season_type` int(10) unsigned DEFAULT NULL,
  `email_p0` varchar(10000) DEFAULT NULL,
  `attachment_p1` varchar(10000) DEFAULT NULL,
  `attachment_return_day_number` int(10) unsigned DEFAULT NULL,
  `title` varchar(100) DEFAULT NULL,
  `attachment_title` varchar(100) DEFAULT NULL,
  `attachment` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_admission_config_2` (`season_type`),
  CONSTRAINT `FK_booking_admission_config_2` FOREIGN KEY (`season_type`) REFERENCES `booking_season_type` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_bed_extra`
--

DROP TABLE IF EXISTS `booking_bed_extra`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_bed_extra` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `day_number` int(10) unsigned DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `total_amount` decimal(15,5) DEFAULT NULL,
  `guest` int(10) unsigned DEFAULT NULL,
  `check_in` int(10) unsigned DEFAULT NULL,
  `paied_amount` decimal(15,5) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `bed_extra_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_bed_extra_1` (`guest`),
  KEY `FK_booking_bed_extra_2` (`check_in`),
  KEY `FK_booking_bed_extra_3` (`bed_extra_type`) USING BTREE,
  CONSTRAINT `FK_booking_bed_extra_1` FOREIGN KEY (`guest`) REFERENCES `booking_guest` (`Id`),
  CONSTRAINT `FK_booking_bed_extra_2` FOREIGN KEY (`check_in`) REFERENCES `booking_check_in` (`Id`),
  CONSTRAINT `FK_booking_bed_extra_3` FOREIGN KEY (`bed_extra_type`) REFERENCES `booking_bed_extra_type` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_bed_extra_type`
--

DROP TABLE IF EXISTS `booking_bed_extra_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_bed_extra_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `checked_price` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_bed_extra_type_category_season_duration`
--

DROP TABLE IF EXISTS `booking_bed_extra_type_category_season_duration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_bed_extra_type_category_season_duration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `bed_extra_type` int(10) unsigned DEFAULT NULL,
  `category_season_duration` int(10) unsigned DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_bed_extra_type_category_season_duration_1` (`bed_extra_type`),
  KEY `FK_booking_bed_extra_type_category_season_duration_2` (`category_season_duration`),
  CONSTRAINT `FK_booking_bed_extra_type_category_season_duration_1` FOREIGN KEY (`bed_extra_type`) REFERENCES `booking_bed_extra_type` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_bed_extra_type_category_season_duration_2` FOREIGN KEY (`category_season_duration`) REFERENCES `booking_category_season_duration` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_category`
--

DROP TABLE IF EXISTS `booking_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_category` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  `picture` blob,
  `full_name` varchar(100) DEFAULT NULL,
  `description` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_category_season_duration`
--

DROP TABLE IF EXISTS `booking_category_season_duration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_category_season_duration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `category` int(10) unsigned DEFAULT NULL,
  `season` int(10) unsigned DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `duration` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `reservation_type` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_category_season_duration_1` (`duration`),
  KEY `FK_booking_category_season_duration_2` (`category`),
  KEY `FK_booking_category_season_duration_3` (`season`),
  KEY `FK_booking_category_season_duration_4` (`reservation_type`),
  KEY `FK_booking_category_season_duration_5` (`payment_method`),
  CONSTRAINT `FK_booking_category_season_duration_1` FOREIGN KEY (`duration`) REFERENCES `booking_duration` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_category_season_duration_2` FOREIGN KEY (`category`) REFERENCES `booking_category` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_category_season_duration_3` FOREIGN KEY (`season`) REFERENCES `booking_season` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_category_season_duration_4` FOREIGN KEY (`reservation_type`) REFERENCES `booking_reservation_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_category_season_duration_5` FOREIGN KEY (`payment_method`) REFERENCES `commercial_payment_method` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=737 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_change_room_request`
--

DROP TABLE IF EXISTS `booking_change_room_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_change_room_request` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `state_date` datetime DEFAULT NULL,
  `reservation_state` int(10) unsigned DEFAULT NULL,
  `room_request` int(10) unsigned DEFAULT NULL,
  `room_in` int(10) unsigned DEFAULT NULL,
  `room_out` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `reservation` int(10) unsigned DEFAULT NULL,
  `date_change_room` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `check_in` int(10) unsigned DEFAULT NULL,
  `check_out` int(10) unsigned DEFAULT NULL,
  `change_room_type` int(10) unsigned DEFAULT NULL,
  `reservation_extra` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_change_room_request_1` (`reservation_state`),
  KEY `FK_booking_change_room_request_2` (`room_in`),
  KEY `FK_booking_change_room_request_3` (`room_out`),
  KEY `FK_booking_change_room_request_4` (`reservation`),
  KEY `FK_booking_change_room_request_5` (`check_in`),
  KEY `FK_booking_change_room_request_6` (`check_out`),
  KEY `FK_booking_change_room_request_7` (`room_request`),
  KEY `FK_booking_change_room_request_8` (`change_room_type`),
  KEY `FK_booking_change_room_request_9` (`reservation_extra`),
  CONSTRAINT `FK_booking_change_room_request_1` FOREIGN KEY (`reservation_state`) REFERENCES `booking_reservation_state` (`Id`),
  CONSTRAINT `FK_booking_change_room_request_2` FOREIGN KEY (`room_in`) REFERENCES `booking_room` (`Id`),
  CONSTRAINT `FK_booking_change_room_request_3` FOREIGN KEY (`room_out`) REFERENCES `booking_room` (`Id`),
  CONSTRAINT `FK_booking_change_room_request_4` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_change_room_request_5` FOREIGN KEY (`check_in`) REFERENCES `booking_check_in` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_booking_change_room_request_6` FOREIGN KEY (`check_out`) REFERENCES `booking_check_out` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_booking_change_room_request_7` FOREIGN KEY (`room_request`) REFERENCES `booking_room` (`Id`),
  CONSTRAINT `FK_booking_change_room_request_8` FOREIGN KEY (`change_room_type`) REFERENCES `booking_change_room_type` (`Id`),
  CONSTRAINT `FK_booking_change_room_request_9` FOREIGN KEY (`reservation_extra`) REFERENCES `booking_reservation_extra` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=638 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_change_room_type`
--

DROP TABLE IF EXISTS `booking_change_room_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_change_room_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `extra` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_change_room_type_1` (`extra`),
  CONSTRAINT `FK_booking_change_room_type_1` FOREIGN KEY (`extra`) REFERENCES `booking_extra` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_characteristic`
--

DROP TABLE IF EXISTS `booking_characteristic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_characteristic` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_check_in`
--

DROP TABLE IF EXISTS `booking_check_in`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_check_in` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `change_room` tinyint(1) DEFAULT NULL,
  `room` int(10) unsigned DEFAULT NULL,
  `reservation` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `check_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_check_in_1` (`room`),
  KEY `FK_booking_check_in_2` (`reservation`),
  KEY `FK_booking_check_in_3` (`check_type`),
  CONSTRAINT `FK_booking_check_in_1` FOREIGN KEY (`room`) REFERENCES `booking_room` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_check_in_2` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_check_in_3` FOREIGN KEY (`check_type`) REFERENCES `booking_check_type` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=8282 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_check_in_out_file_log`
--

DROP TABLE IF EXISTS `booking_check_in_out_file_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_check_in_out_file_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `success` tinyint(1) NOT NULL,
  `state` int(10) unsigned NOT NULL,
  `message` varchar(255) NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_check_in_out_file_log_state` (`state`),
  CONSTRAINT `FK_booking_check_in_out_file_log_state` FOREIGN KEY (`state`) REFERENCES `booking_check_in_out_file_state` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=10264 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_check_in_out_file_state`
--

DROP TABLE IF EXISTS `booking_check_in_out_file_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_check_in_out_file_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `check_in` int(10) unsigned DEFAULT NULL,
  `check_out` int(10) unsigned DEFAULT NULL,
  `is_sent` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_check_in_out_file_state_check_in` (`check_in`),
  KEY `FK_booking_check_in_out_file_state_check_out` (`check_out`),
  CONSTRAINT `FK_booking_check_in_out_file_state_check_in` FOREIGN KEY (`check_in`) REFERENCES `booking_check_in` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_check_in_out_file_state_check_out` FOREIGN KEY (`check_out`) REFERENCES `booking_check_out` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=16517 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_check_out`
--

DROP TABLE IF EXISTS `booking_check_out`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_check_out` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `change_room` tinyint(1) DEFAULT NULL,
  `check_in` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `check_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_check_out_1` (`check_in`),
  KEY `FK_booking_check_out_2` (`check_type`),
  CONSTRAINT `FK_booking_check_out_1` FOREIGN KEY (`check_in`) REFERENCES `booking_check_in` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_check_out_2` FOREIGN KEY (`check_type`) REFERENCES `booking_check_type` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7168 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_check_out_room_state_category`
--

DROP TABLE IF EXISTS `booking_check_out_room_state_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_check_out_room_state_category` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `memo` varchar(1000) DEFAULT NULL,
  `checked` tinyint(1) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `check_out` int(10) unsigned DEFAULT NULL,
  `room_state_category` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_check_out_room_state_category_1` (`check_out`),
  KEY `FK_booking_check_out_room_state_category_2` (`room_state_category`),
  CONSTRAINT `FK_booking_check_out_room_state_category_1` FOREIGN KEY (`check_out`) REFERENCES `booking_check_out` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_check_out_room_state_category_2` FOREIGN KEY (`room_state_category`) REFERENCES `booking_room_state_category` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_check_type`
--

DROP TABLE IF EXISTS `booking_check_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_check_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `booking_dashboard`
--

DROP TABLE IF EXISTS `booking_dashboard`;
/*!50001 DROP VIEW IF EXISTS `booking_dashboard`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `booking_dashboard` (
  `Id` int(10) unsigned,
  `first_name` varchar(45),
  `last_name` varchar(45),
  `Room` varchar(45),
  `birth_date` datetime,
  `Genre` varchar(45),
  `Nationalite` varchar(100),
  `Desipline` varchar(100),
  `Niveau` varchar(100),
  `Etablissement` varchar(200),
  `Type` varchar(45),
  `begin_date` datetime,
  `end_date` datetime,
  `name` varchar(45),
  `stirred` int(1) unsigned,
  `residence_in` varchar(200),
  `residence_out` varchar(200)
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `booking_department`
--

DROP TABLE IF EXISTS `booking_department`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_department` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `full_name` varchar(200) DEFAULT NULL,
  `description` varchar(2000) DEFAULT NULL,
  `shp_file` int(10) unsigned DEFAULT NULL,
  `dbf_file` int(10) unsigned DEFAULT NULL,
  `number` varchar(45) DEFAULT NULL,
  `street` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `state` varchar(45) DEFAULT NULL,
  `country` varchar(45) DEFAULT NULL,
  `postal_code` varchar(45) DEFAULT NULL,
  `full_adress` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_department_1` (`shp_file`),
  KEY `FK_booking_department_2` (`dbf_file`),
  CONSTRAINT `FK_booking_department_1` FOREIGN KEY (`shp_file`) REFERENCES `atooerp_document` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_department_2` FOREIGN KEY (`dbf_file`) REFERENCES `atooerp_document` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_duration`
--

DROP TABLE IF EXISTS `booking_duration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_duration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `day_min` int(10) unsigned DEFAULT NULL,
  `day_max` int(10) unsigned DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  `reservation_period_type` int(10) unsigned DEFAULT NULL,
  `reservation_round` int(10) unsigned DEFAULT NULL,
  `confirmation_max_days` int(10) unsigned DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `FK_booking_duration_1` (`reservation_period_type`),
  KEY `FK_booking_duration_2` (`reservation_round`),
  CONSTRAINT `FK_booking_duration_1` FOREIGN KEY (`reservation_period_type`) REFERENCES `booking_reservation_period_type` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_duration_2` FOREIGN KEY (`reservation_round`) REFERENCES `booking_reservation_round` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_extra`
--

DROP TABLE IF EXISTS `booking_extra`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_extra` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `fixed` tinyint(1) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `refundable` tinyint(1) DEFAULT '0' COMMENT 'remboursable',
  `full_name` varchar(200) DEFAULT NULL,
  `description` varchar(2000) DEFAULT NULL,
  `due_date_calculate` int(10) unsigned DEFAULT NULL COMMENT '1 extra_date/ 2 date_max/3 begin_date/4 end_date',
  `period` tinyint(1) DEFAULT '0',
  `age` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=38 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_extra_age_range`
--

DROP TABLE IF EXISTS `booking_extra_age_range`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_extra_age_range` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `min_age` decimal(15,5) NOT NULL,
  `max_age` decimal(15,5) NOT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `extra` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_extra_age_range_1` (`extra`),
  CONSTRAINT `FK_booking_extra_age_range_1` FOREIGN KEY (`extra`) REFERENCES `booking_extra` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_extra_category_season_duration`
--

DROP TABLE IF EXISTS `booking_extra_category_season_duration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_extra_category_season_duration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `fixed` tinyint(1) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `renewable` tinyint(1) DEFAULT NULL,
  `extra` int(10) unsigned DEFAULT NULL,
  `category_season_duration` int(10) unsigned DEFAULT NULL,
  `reservation_type` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_extra_category_season_duration_1` (`extra`),
  KEY `FK_booking_extra_category_season_duration_2` (`category_season_duration`),
  KEY `FK_booking_extra_category_season_duration_3` (`reservation_type`),
  KEY `FK_booking_extra_category_season_duration_4` (`product`) USING BTREE,
  KEY `FK_booking_extra_category_season_duration_payment_method` (`payment_method`),
  CONSTRAINT `FK_booking_extra_category_season_duration_1` FOREIGN KEY (`extra`) REFERENCES `booking_extra` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_extra_category_season_duration_2` FOREIGN KEY (`category_season_duration`) REFERENCES `booking_category_season_duration` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_extra_category_season_duration_3` FOREIGN KEY (`reservation_type`) REFERENCES `booking_reservation_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_extra_category_season_duration_4` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_extra_category_season_duration_payment_method` FOREIGN KEY (`payment_method`) REFERENCES `commercial_payment_method` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=127039 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_extra_residence`
--

DROP TABLE IF EXISTS `booking_extra_residence`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_extra_residence` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `enter` tinyint(1) DEFAULT NULL,
  `out` tinyint(1) DEFAULT NULL,
  `extra` int(10) unsigned DEFAULT NULL,
  `residence` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_extra_residence_1` (`extra`),
  KEY `FK_booking_extra_residence_2` (`residence`),
  CONSTRAINT `FK_booking_extra_residence_1` FOREIGN KEY (`extra`) REFERENCES `booking_extra` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_extra_residence_2` FOREIGN KEY (`residence`) REFERENCES `booking_residence` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1317 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_guest`
--

DROP TABLE IF EXISTS `booking_guest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_guest` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `partner` int(10) unsigned DEFAULT NULL,
  `profile_id` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_guest_1` (`partner`) USING BTREE,
  CONSTRAINT `FK_booking_guest_1` FOREIGN KEY (`Id`) REFERENCES `atooerp_person` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_guest_2` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=4772 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_guest_partner`
--

DROP TABLE IF EXISTS `booking_guest_partner`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_guest_partner` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `guest` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_guest_partner_1` (`guest`),
  KEY `FK_booking_guest_partner_2` (`partner`),
  CONSTRAINT `FK_booking_guest_partner_1` FOREIGN KEY (`guest`) REFERENCES `booking_guest` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_guest_partner_2` FOREIGN KEY (`partner`) REFERENCES `booking_partner` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_guest_resource`
--

DROP TABLE IF EXISTS `booking_guest_resource`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_guest_resource` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `create_date` datetime NOT NULL,
  `memo` varchar(1000) NOT NULL,
  `type_document` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_guest_resource_1` (`type_document`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_partner`
--

DROP TABLE IF EXISTS `booking_partner`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_partner` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_pre_reservation`
--

DROP TABLE IF EXISTS `booking_pre_reservation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_pre_reservation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `number` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `validated_date` datetime DEFAULT NULL,
  `state_date` datetime DEFAULT NULL,
  `reservation_state` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `category` int(10) unsigned DEFAULT NULL,
  `document` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_pre_reservation_1` (`document`),
  KEY `FK_booking_pre_reservation_2` (`category`),
  KEY `FK_booking_pre_reservation_3` (`partner`),
  KEY `FK_booking_pre_reservation_4` (`reservation_state`),
  CONSTRAINT `FK_booking_pre_reservation_1` FOREIGN KEY (`document`) REFERENCES `atooerp_document` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_pre_reservation_2` FOREIGN KEY (`category`) REFERENCES `booking_category` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_pre_reservation_3` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`),
  CONSTRAINT `FK_booking_pre_reservation_4` FOREIGN KEY (`reservation_state`) REFERENCES `booking_reservation_state` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_pre_reservation_room`
--

DROP TABLE IF EXISTS `booking_pre_reservation_room`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_pre_reservation_room` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `pre_reservation` int(10) unsigned DEFAULT NULL,
  `room` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_pre_reservation_room_1` (`room`),
  KEY `FK_booking_pre_reservation_room_2` (`pre_reservation`),
  CONSTRAINT `FK_booking_pre_reservation_room_1` FOREIGN KEY (`room`) REFERENCES `booking_room` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_pre_reservation_room_2` FOREIGN KEY (`pre_reservation`) REFERENCES `booking_pre_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=150 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_procedure_final_departure`
--

DROP TABLE IF EXISTS `booking_procedure_final_departure`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_procedure_final_departure` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `reservation` int(10) unsigned DEFAULT NULL,
  `admission_number` int(10) unsigned DEFAULT NULL,
  `departure_date` datetime DEFAULT NULL,
  `return_date` datetime DEFAULT NULL,
  `signed_document` int(10) unsigned DEFAULT NULL,
  `signed_document_checked` tinyint(1) DEFAULT '0',
  `signed_document_date` datetime DEFAULT NULL,
  `engagement_p2` varchar(3000) DEFAULT NULL,
  `email_p0` varchar(3000) DEFAULT NULL,
  `email_p2` varchar(3000) DEFAULT NULL,
  `departure_time` varchar(45) DEFAULT NULL,
  `provisional` tinyint(1) DEFAULT '0' COMMENT 'depart provisoir',
  PRIMARY KEY (`Id`),
  KEY `FK_booking_procedure_departure_1` (`reservation`),
  KEY `FK_booking_procedure_departure_2` (`signed_document`),
  CONSTRAINT `FK_booking_procedure_departure_1` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_procedure_departure_2` FOREIGN KEY (`signed_document`) REFERENCES `atooerp_document` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_procedure_final_departure_3` FOREIGN KEY (`Id`) REFERENCES `atooerp_communication` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=19623 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_procedure_final_departure_config`
--

DROP TABLE IF EXISTS `booking_procedure_final_departure_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_procedure_final_departure_config` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `engagement_p2` varchar(3000) DEFAULT NULL,
  `email_p0` varchar(3000) DEFAULT NULL,
  `email_p2` varchar(3000) DEFAULT NULL,
  `departure_time` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation`
--

DROP TABLE IF EXISTS `booking_reservation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `reservation_state` int(10) unsigned DEFAULT NULL,
  `adults_number` int(10) unsigned DEFAULT NULL,
  `children_number` int(10) unsigned DEFAULT NULL,
  `babies_number` int(10) unsigned DEFAULT NULL,
  `validated_date` datetime DEFAULT NULL,
  `state_date` datetime DEFAULT NULL,
  `reservation_round` int(10) unsigned DEFAULT NULL,
  `change_date_authorization_begin_date` int(10) unsigned DEFAULT NULL,
  `change_date_authorization_end_date` int(10) unsigned DEFAULT NULL,
  `reservation_period_type` int(10) unsigned DEFAULT NULL,
  `room` int(10) unsigned DEFAULT NULL,
  `guest` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `category` int(10) unsigned DEFAULT NULL,
  `duration_number` decimal(15,5) DEFAULT NULL,
  `duration_name` varchar(45) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `description` varchar(1000) DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `duration` int(10) unsigned DEFAULT NULL,
  `residence_in` int(10) unsigned DEFAULT NULL COMMENT '''brassage de l''exterieur''',
  `residence_out` int(10) unsigned DEFAULT NULL COMMENT '''brassage vers d''autre residence''',
  `stirred` int(1) unsigned DEFAULT NULL COMMENT 'brasse | 1=non brasse ; 2= brassee in; 3 brassee out',
  `first_room` int(10) unsigned DEFAULT NULL,
  `confirmation_max_date` datetime DEFAULT NULL,
  `final_departure_date` datetime DEFAULT NULL,
  `application_id` varchar(45) DEFAULT NULL,
  `pre_reservation` int(10) unsigned DEFAULT NULL,
  `partner_extra` int(10) unsigned DEFAULT NULL,
  `arrival_date` int(10) unsigned DEFAULT NULL,
  `departure_date` int(10) unsigned DEFAULT NULL,
  `arrival` datetime DEFAULT NULL,
  `departure` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_4` (`change_date_authorization_end_date`),
  KEY `FK_booking_reservation_3` (`reservation_round`) USING BTREE,
  KEY `FK_booking_reservation_2` (`change_date_authorization_begin_date`),
  KEY `FK_booking_reservation_6` (`reservation_period_type`),
  KEY `FK_booking_reservation_5` (`reservation_state`),
  KEY `FK_booking_reservation_7` (`room`),
  KEY `FK_booking_reservation_8` (`guest`),
  KEY `FK_booking_reservation_9` (`partner`),
  KEY `FK_booking_category` (`category`),
  KEY `FK_booking_reservation_10` (`duration`),
  KEY `FK_booking_reservation_11` (`residence_out`),
  KEY `FK_booking_reservation_12` (`residence_in`),
  KEY `FK_booking_reservation_13` (`type`),
  KEY `FK_booking_reservation_pre_reservation` (`pre_reservation`),
  KEY `FK_booking_reservation_partner_extra` (`partner_extra`),
  KEY `FK_arrival_date` (`arrival_date`),
  KEY `FK_departure_date` (`departure_date`),
  CONSTRAINT `FK_arrival_date` FOREIGN KEY (`arrival_date`) REFERENCES `booking_reservation_arrival_departure_date` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_category` FOREIGN KEY (`category`) REFERENCES `booking_category` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_10` FOREIGN KEY (`duration`) REFERENCES `booking_duration` (`Id`),
  CONSTRAINT `FK_booking_reservation_11` FOREIGN KEY (`residence_out`) REFERENCES `booking_residence` (`Id`),
  CONSTRAINT `FK_booking_reservation_12` FOREIGN KEY (`residence_in`) REFERENCES `booking_residence` (`Id`),
  CONSTRAINT `FK_booking_reservation_13` FOREIGN KEY (`type`) REFERENCES `booking_reservation_type` (`Id`),
  CONSTRAINT `FK_booking_reservation_2` FOREIGN KEY (`change_date_authorization_begin_date`) REFERENCES `booking_reservation_change_date_authorization` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_4` FOREIGN KEY (`change_date_authorization_end_date`) REFERENCES `booking_reservation_change_date_authorization` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_5` FOREIGN KEY (`reservation_state`) REFERENCES `booking_reservation_state` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_6` FOREIGN KEY (`reservation_period_type`) REFERENCES `booking_reservation_period_type` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_7` FOREIGN KEY (`room`) REFERENCES `booking_room` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_8` FOREIGN KEY (`guest`) REFERENCES `booking_guest` (`Id`),
  CONSTRAINT `FK_booking_reservation_9` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`),
  CONSTRAINT `FK_booking_reservation_partner_extra` FOREIGN KEY (`partner_extra`) REFERENCES `commercial_partner` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_pre_reservation` FOREIGN KEY (`pre_reservation`) REFERENCES `booking_pre_reservation` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_departure_date` FOREIGN KEY (`departure_date`) REFERENCES `booking_reservation_arrival_departure_date` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=7730 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_arrival_departure_date`
--

DROP TABLE IF EXISTS `booking_reservation_arrival_departure_date`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_arrival_departure_date` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `real_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `reservation` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `arrival_departure` int(10) unsigned NOT NULL COMMENT '1 arrival / Departure 2',
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_arrival_depature_date_1` (`reservation`),
  KEY `FK_arrival_departure` (`arrival_departure`),
  CONSTRAINT `FK_arrival_departure` FOREIGN KEY (`arrival_departure`) REFERENCES `booking_reservation_arrival_departure_type` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_arrival_depature_date_1` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=350 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_arrival_departure_type`
--

DROP TABLE IF EXISTS `booking_reservation_arrival_departure_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_arrival_departure_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_category_season_duration`
--

DROP TABLE IF EXISTS `booking_reservation_category_season_duration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_category_season_duration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `reservation` int(10) unsigned DEFAULT NULL,
  `category_season_duration` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_category_season_duration_1` (`reservation`),
  KEY `FK_booking_reservation_category_season_duration_2` (`category_season_duration`),
  CONSTRAINT `FK_booking_reservation_category_season_duration_1` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_category_season_duration_2` FOREIGN KEY (`category_season_duration`) REFERENCES `booking_category_season_duration` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=45804 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_certificate`
--

DROP TABLE IF EXISTS `booking_reservation_certificate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_certificate` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `reservation` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_certificate_2` (`reservation`),
  CONSTRAINT `FK_booking_reservation_certificate_1` FOREIGN KEY (`Id`) REFERENCES `atooerp_communication` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_certificate_2` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=19622 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_change_date_authorization`
--

DROP TABLE IF EXISTS `booking_reservation_change_date_authorization`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_change_date_authorization` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `changeable` tinyint(1) DEFAULT NULL,
  `day_number` int(10) unsigned DEFAULT NULL,
  `begin_date_default` tinyint(1) DEFAULT NULL,
  `end_date_default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_credit_sale_shipping`
--

DROP TABLE IF EXISTS `booking_reservation_credit_sale_shipping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_credit_sale_shipping` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `reservation` int(10) unsigned NOT NULL,
  `sale_shipping` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_credit_sale_shipping_1` (`reservation`),
  KEY `FK_booking_reservation_credit_sale_shipping_2` (`sale_shipping`),
  CONSTRAINT `FK_booking_reservation_credit_sale_shipping_1` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_credit_sale_shipping_2` FOREIGN KEY (`sale_shipping`) REFERENCES `sale_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=93 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_extra`
--

DROP TABLE IF EXISTS `booking_reservation_extra`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_extra` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `description` varchar(1000) DEFAULT NULL,
  `extra` int(10) unsigned DEFAULT NULL,
  `reservation` int(10) unsigned DEFAULT NULL,
  `sale_shipping` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) DEFAULT '1.00000',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `auto_generate` tinyint(1) DEFAULT NULL,
  `extra_parent_refundable` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_extra_1` (`extra`),
  KEY `FK_booking_reservation_extra_2` (`reservation`),
  KEY `FK_booking_reservation_extra_3` (`sale_shipping`),
  KEY `FK_booking_reservation_extra_4` (`product`),
  KEY `FK_booking_reservation_extra_5` (`extra_parent_refundable`),
  CONSTRAINT `FK_booking_reservation_extra_1` FOREIGN KEY (`extra`) REFERENCES `booking_extra` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_extra_2` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_extra_3` FOREIGN KEY (`sale_shipping`) REFERENCES `sale_shipping` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_extra_4` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_extra_5` FOREIGN KEY (`extra_parent_refundable`) REFERENCES `booking_reservation_extra` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=21258 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_period`
--

DROP TABLE IF EXISTS `booking_reservation_period`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_period` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `due_date` datetime DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `reservation_period_type` int(10) unsigned DEFAULT NULL,
  `reservation` int(10) unsigned DEFAULT NULL,
  `sale_shipping` int(10) unsigned DEFAULT NULL,
  `reservation_round` int(10) unsigned DEFAULT NULL,
  `unit_price` decimal(15,5) DEFAULT NULL,
  `quantity` decimal(15,5) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_period_1` (`reservation_period_type`),
  KEY `FK_booking_reservation_period_2` (`reservation`),
  KEY `FK_booking_reservation_period_3` (`sale_shipping`),
  KEY `FK_booking_reservation_period_4` (`reservation_round`),
  CONSTRAINT `FK_booking_reservation_period_1` FOREIGN KEY (`reservation_period_type`) REFERENCES `booking_reservation_period_type` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_period_2` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_period_3` FOREIGN KEY (`sale_shipping`) REFERENCES `sale_shipping` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_period_4` FOREIGN KEY (`reservation_round`) REFERENCES `booking_reservation_round` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=40608 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_period_type`
--

DROP TABLE IF EXISTS `booking_reservation_period_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_period_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_ressource`
--

DROP TABLE IF EXISTS `booking_reservation_ressource`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_ressource` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(45) DEFAULT NULL,
  `checked` tinyint(1) DEFAULT NULL,
  `type_document` int(10) unsigned DEFAULT NULL,
  `duration` int(10) unsigned DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `full_name` varchar(200) DEFAULT NULL,
  `description` varchar(2000) DEFAULT NULL,
  `document` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_ressource_1` (`type_document`),
  KEY `FK_booking_reservation_ressource_2` (`duration`),
  KEY `FK_booking_reservation_ressource_3` (`type`),
  KEY `FK_booking_reservation_ressource_4` (`document`),
  CONSTRAINT `FK_booking_reservation_ressource_1` FOREIGN KEY (`type_document`) REFERENCES `atooerp_type_document` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_ressource_2` FOREIGN KEY (`duration`) REFERENCES `booking_duration` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_ressource_3` FOREIGN KEY (`type`) REFERENCES `booking_reservation_type` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_ressource_4` FOREIGN KEY (`document`) REFERENCES `atooerp_document` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=1832 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_roommate`
--

DROP TABLE IF EXISTS `booking_reservation_roommate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_roommate` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `reservation` int(10) unsigned NOT NULL,
  `guest` int(10) unsigned DEFAULT NULL,
  `relation` int(10) unsigned DEFAULT NULL,
  `reservation_extra` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) NOT NULL,
  `date` datetime NOT NULL,
  `day_number` int(10) unsigned DEFAULT NULL,
  `check_in` int(10) unsigned DEFAULT NULL,
  `roommate_type` int(10) unsigned DEFAULT NULL,
  `extra_key` int(10) unsigned DEFAULT NULL,
  `extra_refundable` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_roommate_1` (`reservation`),
  KEY `FK_booking_reservation_roommate_3` (`reservation_extra`),
  KEY `FK_booking_reservation_roommate_4` (`check_in`),
  KEY `FK_booking_reservation_roommate_2` (`guest`),
  KEY `FK_booking_reservation_roommate_5` (`relation`),
  KEY `FK_booking_reservation_roommate_6` (`roommate_type`),
  KEY `FK_booking_reservation_roommate_7` (`extra_key`),
  KEY `FK_booking_reservation_roommate_8` (`extra_refundable`),
  CONSTRAINT `FK_booking_reservation_roommate_1` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_roommate_2` FOREIGN KEY (`guest`) REFERENCES `booking_guest` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_roommate_3` FOREIGN KEY (`reservation_extra`) REFERENCES `booking_reservation_extra` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_roommate_4` FOREIGN KEY (`check_in`) REFERENCES `booking_check_in` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_roommate_5` FOREIGN KEY (`relation`) REFERENCES `booking_reservation_roommate_relation` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_roommate_6` FOREIGN KEY (`roommate_type`) REFERENCES `booking_roommate_type` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_roommate_7` FOREIGN KEY (`extra_key`) REFERENCES `booking_reservation_extra` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_reservation_roommate_8` FOREIGN KEY (`extra_refundable`) REFERENCES `booking_reservation_extra` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=315 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_roommate_config`
--

DROP TABLE IF EXISTS `booking_reservation_roommate_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_roommate_config` (
  `exta` int(10) unsigned NOT NULL,
  PRIMARY KEY (`exta`) USING BTREE,
  CONSTRAINT `FK_booking_reservation_roommate_config_1` FOREIGN KEY (`exta`) REFERENCES `booking_extra` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_roommate_relation`
--

DROP TABLE IF EXISTS `booking_reservation_roommate_relation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_roommate_relation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=1001 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_round`
--

DROP TABLE IF EXISTS `booking_reservation_round`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_round` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_state`
--

DROP TABLE IF EXISTS `booking_reservation_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_type`
--

DROP TABLE IF EXISTS `booking_reservation_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_type_description`
--

DROP TABLE IF EXISTS `booking_reservation_type_description`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_type_description` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `stirred` tinyint(1) DEFAULT NULL,
  `duration` int(10) unsigned DEFAULT NULL,
  `description` varchar(10000) DEFAULT NULL,
  `reservation_type` int(10) unsigned DEFAULT NULL,
  `introduction` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_type_description_1` (`duration`),
  KEY `FK_booking_reservation_type_description_2` (`reservation_type`),
  CONSTRAINT `FK_booking_reservation_type_description_1` FOREIGN KEY (`duration`) REFERENCES `booking_duration` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_type_description_2` FOREIGN KEY (`reservation_type`) REFERENCES `booking_reservation_type` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=831 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_reservation_type_document`
--

DROP TABLE IF EXISTS `booking_reservation_type_document`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_reservation_type_document` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `stirred` tinyint(1) DEFAULT NULL,
  `duration` int(10) unsigned DEFAULT NULL,
  `document` int(10) unsigned DEFAULT NULL,
  `reservation_type` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_reservation_type_document_1` (`duration`),
  KEY `FK_booking_reservation_type_document_2` (`reservation_type`),
  KEY `FK_booking_reservation_type_document_3` (`document`),
  CONSTRAINT `booking_reservation_type_document_1` FOREIGN KEY (`duration`) REFERENCES `booking_duration` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `booking_reservation_type_document_2` FOREIGN KEY (`reservation_type`) REFERENCES `booking_reservation_type` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_reservation_type_document_3` FOREIGN KEY (`document`) REFERENCES `atooerp_document` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=435 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_residence`
--

DROP TABLE IF EXISTS `booking_residence`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_residence` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Id`),
  CONSTRAINT `FK_booking_residence_1` FOREIGN KEY (`Id`) REFERENCES `atooerp_establishment` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=1040 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_residence_certificate`
--

DROP TABLE IF EXISTS `booking_residence_certificate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_residence_certificate` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `room` int(10) unsigned DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `period_type` int(10) unsigned DEFAULT NULL,
  `reservation` int(10) unsigned DEFAULT NULL,
  `reservation_detail` varchar(3000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_residence_certificate_2` (`room`),
  KEY `FK_booking_residence_certificate_3` (`period_type`),
  KEY `FK_booking_residence_certificate_4` (`reservation`),
  CONSTRAINT `FK_booking_residence_certificate_1` FOREIGN KEY (`Id`) REFERENCES `atooerp_communication` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_residence_certificate_2` FOREIGN KEY (`room`) REFERENCES `booking_room` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_residence_certificate_3` FOREIGN KEY (`period_type`) REFERENCES `booking_reservation_period_type` (`Id`) ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_residence_certificate_4` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=19620 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_resident_card`
--

DROP TABLE IF EXISTS `booking_resident_card`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_resident_card` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `reservation` int(10) unsigned DEFAULT NULL,
  `first_name` varchar(255) DEFAULT NULL,
  `last_name` varchar(255) DEFAULT NULL,
  `birthdate` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `email` varchar(255) DEFAULT NULL,
  `function` varchar(255) DEFAULT NULL,
  `delivered_date` datetime DEFAULT NULL,
  `resident_card_config` int(10) unsigned DEFAULT NULL,
  `roommate` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `picture` longblob,
  `validated` tinyint(1) DEFAULT NULL,
  `printed` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_booking_resident_card_booking_reservation` (`reservation`),
  CONSTRAINT `FK_booking_resident_card_booking_reservation` FOREIGN KEY (`reservation`) REFERENCES `booking_reservation` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2414 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_resident_card_config`
--

DROP TABLE IF EXISTS `booking_resident_card_config`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_resident_card_config` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `printer` varchar(2000) DEFAULT NULL,
  `default` tinyint(1) NOT NULL DEFAULT '0',
  `background` longblob,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_room`
--

DROP TABLE IF EXISTS `booking_room`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_room` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `enabled` tinyint(1) DEFAULT NULL,
  `available` tinyint(1) DEFAULT NULL,
  `category` int(10) unsigned DEFAULT NULL,
  `department` int(10) unsigned DEFAULT NULL,
  `area` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_room_1` (`category`),
  KEY `FK_booking_room_2` (`department`),
  CONSTRAINT `FK_booking_room_1` FOREIGN KEY (`category`) REFERENCES `booking_category` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_room_2` FOREIGN KEY (`department`) REFERENCES `booking_department` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=427 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_room_characteristic`
--

DROP TABLE IF EXISTS `booking_room_characteristic`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_room_characteristic` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `checked` tinyint(1) DEFAULT NULL,
  `characteristic` int(10) unsigned DEFAULT NULL,
  `room` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_room_characteristic_2` (`room`),
  KEY `FK_booking_room_characteristic_1` (`characteristic`),
  CONSTRAINT `FK_booking_room_characteristic_1` FOREIGN KEY (`characteristic`) REFERENCES `booking_characteristic` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_room_characteristic_2` FOREIGN KEY (`room`) REFERENCES `booking_room` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=5798 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_room_state`
--

DROP TABLE IF EXISTS `booking_room_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_room_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_room_state_category`
--

DROP TABLE IF EXISTS `booking_room_state_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_room_state_category` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `room_state` int(10) unsigned DEFAULT NULL,
  `category` int(10) unsigned DEFAULT NULL,
  `checked` tinyint(1) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_room_state_category_1` (`room_state`),
  KEY `FK_booking_room_state_category_2` (`category`),
  CONSTRAINT `FK_booking_room_state_category_1` FOREIGN KEY (`room_state`) REFERENCES `booking_room_state` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_room_state_category_2` FOREIGN KEY (`category`) REFERENCES `booking_category` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_room_state_check_out`
--

DROP TABLE IF EXISTS `booking_room_state_check_out`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_room_state_check_out` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `room_state` int(10) unsigned DEFAULT NULL,
  `check_out` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_room_state_check_out_1` (`room_state`),
  KEY `FK_booking_room_state_check_out_2` (`check_out`),
  CONSTRAINT `FK_booking_room_state_check_out_1` FOREIGN KEY (`room_state`) REFERENCES `booking_room_state` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION,
  CONSTRAINT `FK_booking_room_state_check_out_2` FOREIGN KEY (`check_out`) REFERENCES `booking_check_out` (`Id`) ON DELETE CASCADE ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_roommate_type`
--

DROP TABLE IF EXISTS `booking_roommate_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_roommate_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) CHARACTER SET latin1 NOT NULL,
  `extra` int(10) unsigned DEFAULT NULL,
  `min_day` int(10) unsigned NOT NULL DEFAULT '0',
  `default` tinyint(1) NOT NULL DEFAULT '0',
  `reservation_period` tinyint(1) NOT NULL DEFAULT '0',
  `extra_key` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_roommate_type_1` (`extra`),
  KEY `FK_booking_roommate_type_2` (`extra_key`),
  CONSTRAINT `FK_booking_roommate_type_1` FOREIGN KEY (`extra`) REFERENCES `booking_extra` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_booking_roommate_type_2` FOREIGN KEY (`extra_key`) REFERENCES `booking_extra` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_sam_comm_temp`
--

DROP TABLE IF EXISTS `booking_sam_comm_temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_sam_comm_temp` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `Nombre` int(11) NOT NULL,
  `DÃ©posÃ©e_le` varchar(25) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `Profil_LinkedIn` varchar(255) DEFAULT NULL,
  `PrÃ©nom` varchar(25) DEFAULT NULL,
  `Nom` varchar(25) DEFAULT NULL,
  `Genre` varchar(12) DEFAULT NULL,
  `Pays` varchar(12) DEFAULT NULL,
  `Segment` varchar(45) DEFAULT NULL,
  `ArrivÃ©e` varchar(45) DEFAULT NULL,
  `DÃ©part` varchar(45) DEFAULT NULL,
  `Etat` varchar(12) DEFAULT NULL,
  `Acteur` varchar(25) DEFAULT NULL,
  `Type_de_logement` varchar(255) DEFAULT NULL,
  `Institution_partenaire` varchar(255) DEFAULT NULL,
  `Partenariat` varchar(5) DEFAULT NULL,
  `Ancien_rÃ©sident` varchar(5) DEFAULT NULL,
  `Tags` varchar(255) DEFAULT NULL,
  `Recevoir_des_emails_de_la_CitÃ©` varchar(5) DEFAULT NULL,
  `ACC&SS` varchar(5) DEFAULT NULL,
  `Institution_Ã _Paris` varchar(255) DEFAULT NULL,
  `Nom_du_laboratoire` varchar(255) DEFAULT NULL,
  `Domaine_dâ€™Ã©tudes` varchar(255) DEFAULT NULL,
  `DiplÃ´me_prÃ©parÃ©` varchar(45) DEFAULT NULL,
  `Budget_logement` varchar(12) DEFAULT NULL,
  `RÃ©admission_-_Maison` varchar(45) DEFAULT NULL,
  `RÃ©admission_-_Institution_partenaire` varchar(255) DEFAULT NULL,
  `RÃ©admission_-_ArrivÃ©e` varchar(25) DEFAULT NULL,
  `RÃ©admission_-_DÃ©part` varchar(25) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=382 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_season`
--

DROP TABLE IF EXISTS `booking_season`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_season` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `season_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_booking_season_1` (`season_type`),
  CONSTRAINT `FK_booking_season_1` FOREIGN KEY (`season_type`) REFERENCES `booking_season_type` (`Id`) ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=26 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_season_type`
--

DROP TABLE IF EXISTS `booking_season_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_season_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_test`
--

DROP TABLE IF EXISTS `booking_test`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_test` (
  `booking_test_id` int(11) NOT NULL AUTO_INCREMENT,
  `Nom` varchar(25) DEFAULT NULL,
  `Prenom` varchar(25) DEFAULT NULL,
  `Email` varchar(45) DEFAULT NULL,
  `Tel1` varchar(25) DEFAULT NULL,
  `Tel2` varchar(12) DEFAULT NULL,
  `Tel3` varchar(25) DEFAULT NULL,
  `Etudes` varchar(45) DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`booking_test_id`),
  KEY `Tel3_index` (`Tel3`)
) ENGINE=InnoDB AUTO_INCREMENT=42 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_test2`
--

DROP TABLE IF EXISTS `booking_test2`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_test2` (
  `booking_test2_id` int(11) NOT NULL AUTO_INCREMENT,
  `nom` varchar(25) DEFAULT NULL,
  `prenom` varchar(25) DEFAULT NULL,
  `Tel1` varchar(25) DEFAULT NULL,
  `Tel2` varchar(25) DEFAULT NULL,
  `Tel3` varchar(12) DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`booking_test2_id`)
) ENGINE=InnoDB AUTO_INCREMENT=249 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_test_admission2020`
--

DROP TABLE IF EXISTS `booking_test_admission2020`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_test_admission2020` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `email` varchar(45) DEFAULT NULL,
  `name` varchar(25) DEFAULT NULL,
  `fist_name` varchar(25) DEFAULT NULL,
  `memo` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=233 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_test_sam2`
--

DROP TABLE IF EXISTS `booking_test_sam2`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_test_sam2` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ProfileCreateDate` datetime DEFAULT NULL,
  `Nom` varchar(45) DEFAULT NULL,
  `Date_de_Naissance` datetime DEFAULT NULL,
  `NationalitÃ©` varchar(5) DEFAULT NULL,
  `ArrivÃ©e` datetime DEFAULT NULL,
  `TÃ©l` varchar(25) DEFAULT NULL,
  `Email` varchar(45) DEFAULT NULL,
  `EmailAccept` varchar(5) DEFAULT NULL,
  `ApplicationId` varchar(12) DEFAULT NULL,
  `ProfileId` varchar(12) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=924 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_test_sam22`
--

DROP TABLE IF EXISTS `booking_test_sam22`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_test_sam22` (
  `id` int(11) NOT NULL AUTO_INCREMENT,
  `ApplicationCreateDate` datetime DEFAULT NULL,
  `ProfileCreateDate` datetime DEFAULT NULL,
  `Nom` varchar(45) DEFAULT NULL,
  `Date_de_Naissance` datetime DEFAULT NULL,
  `Nationalité` varchar(5) DEFAULT NULL,
  `Arrivée` datetime DEFAULT NULL,
  `Départ` datetime DEFAULT NULL,
  `Tél` varchar(255) DEFAULT NULL,
  `Email` varchar(45) DEFAULT NULL,
  `ApplicationId` varchar(12) DEFAULT NULL,
  `ProfileId` varchar(12) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=414 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_test_sam_21`
--

DROP TABLE IF EXISTS `booking_test_sam_21`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_test_sam_21` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `ApplicationCreateDate` datetime DEFAULT NULL,
  `ProfileCreateDate` datetime DEFAULT NULL,
  `Nom` varchar(255) DEFAULT NULL,
  `Date_de_Naissance` datetime DEFAULT NULL,
  `Nationalité` varchar(45) DEFAULT NULL,
  `Arrivée` datetime DEFAULT NULL,
  `Départ` datetime DEFAULT NULL,
  `Tél` varchar(45) DEFAULT NULL,
  `Email` varchar(255) DEFAULT NULL,
  `ApplicationId` varchar(45) DEFAULT NULL,
  `ProfileId` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=606 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `booking_xml_location`
--

DROP TABLE IF EXISTS `booking_xml_location`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `booking_xml_location` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `folder_in` varchar(1000) DEFAULT NULL,
  `folder_out` varchar(1000) DEFAULT NULL,
  `folder_all` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `category_tree`
--

DROP TABLE IF EXISTS `category_tree`;
/*!50001 DROP VIEW IF EXISTS `category_tree`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `category_tree` (
  `Id` int(11) unsigned,
  `Parent` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `commercial_batch`
--

DROP TABLE IF EXISTS `commercial_batch`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `reference` varchar(255) NOT NULL,
  `code` varchar(255) NOT NULL,
  `create_date` datetime NOT NULL,
  `expiration_date` datetime DEFAULT NULL,
  `expiration_delay` decimal(15,2) DEFAULT NULL,
  `manufacturing_date` datetime DEFAULT NULL,
  `memo` text,
  `active` tinyint(1) NOT NULL DEFAULT '1',
  `cump` decimal(15,2) NOT NULL DEFAULT '0.00',
  `purchase_shipping` int(10) unsigned DEFAULT NULL,
  `stock_entry` int(10) unsigned DEFAULT NULL,
  `stock_mouvement` int(10) unsigned DEFAULT NULL,
  `stock_out` int(10) unsigned DEFAULT NULL,
  `sale_shipping_return` int(10) unsigned DEFAULT NULL,
  `fabrication` int(10) unsigned DEFAULT NULL,
  `batch_type` int(10) unsigned NOT NULL,
  `barcode` varchar(255) DEFAULT NULL,
  `qr_code` varchar(255) DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `destination` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned NOT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `manufacturer` int(10) unsigned DEFAULT NULL,
  `cost_method` int(10) unsigned NOT NULL DEFAULT '1',
  `standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `first_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `guarantee_date` datetime DEFAULT NULL,
  `production_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`Id`),
  KEY `purchase_shipping` (`purchase_shipping`),
  KEY `stock_entry` (`stock_entry`),
  KEY `stock_mouvement` (`stock_mouvement`),
  KEY `stock_out` (`stock_out`),
  KEY `sale_shipping_return` (`sale_shipping_return`),
  KEY `fabrication` (`fabrication`),
  KEY `batch_type` (`batch_type`),
  KEY `parent` (`parent`),
  KEY `FK_commercial_batch_9` (`destination`),
  KEY `FK_commercial_batch_product` (`product`),
  KEY `FK_commercial_batch_manufacturer` (`manufacturer`),
  KEY `FK_commercial_batch_cost_method` (`cost_method`),
  CONSTRAINT `commercial_batch_ibfk_1` FOREIGN KEY (`purchase_shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_ibfk_2` FOREIGN KEY (`stock_entry`) REFERENCES `commercial_stock_entry` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_ibfk_3` FOREIGN KEY (`stock_mouvement`) REFERENCES `commercial_stock_mouvement` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_ibfk_4` FOREIGN KEY (`stock_out`) REFERENCES `commercial_stock_out` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_ibfk_5` FOREIGN KEY (`sale_shipping_return`) REFERENCES `sale_shipping_return` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_ibfk_6` FOREIGN KEY (`fabrication`) REFERENCES `production_fabrication` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_ibfk_7` FOREIGN KEY (`batch_type`) REFERENCES `commercial_batch_type` (`Id`),
  CONSTRAINT `commercial_batch_ibfk_8` FOREIGN KEY (`parent`) REFERENCES `commercial_batch` (`Id`),
  CONSTRAINT `FK_commercial_batch_9` FOREIGN KEY (`destination`) REFERENCES `commercial_batch` (`Id`),
  CONSTRAINT `FK_commercial_batch_manufacturer` FOREIGN KEY (`manufacturer`) REFERENCES `commercial_partner` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_commercial_batch_product` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_batch_attribute`
--

DROP TABLE IF EXISTS `commercial_batch_attribute`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_attribute` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `type_editor` int(10) unsigned NOT NULL,
  `batch_type` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `type_editor` (`type_editor`),
  KEY `batch_type` (`batch_type`),
  CONSTRAINT `commercial_batch_attribute_ibfk_1` FOREIGN KEY (`type_editor`) REFERENCES `atooerp_type_input_editors` (`Id`),
  CONSTRAINT `commercial_batch_attribute_ibfk_2` FOREIGN KEY (`batch_type`) REFERENCES `commercial_batch_type` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_batch_attribute_value`
--

DROP TABLE IF EXISTS `commercial_batch_attribute_value`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_attribute_value` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `batch` int(10) unsigned NOT NULL,
  `value` text NOT NULL,
  `attribute` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `batch` (`batch`),
  KEY `attribute` (`attribute`),
  CONSTRAINT `commercial_batch_attribute_value_ibfk_1` FOREIGN KEY (`batch`) REFERENCES `commercial_batch` (`Id`),
  CONSTRAINT `commercial_batch_attribute_value_ibfk_2` FOREIGN KEY (`attribute`) REFERENCES `commercial_batch_attribute` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_batch_dialing`
--

DROP TABLE IF EXISTS `commercial_batch_dialing`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_dialing` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `prefix` varchar(45) DEFAULT NULL,
  `separator1` varchar(45) DEFAULT NULL,
  `coding` int(11) DEFAULT '3',
  `separator2` varchar(45) DEFAULT NULL,
  `year` tinyint(10) DEFAULT '1',
  `separator3` varchar(45) DEFAULT NULL,
  `suffixe` varchar(45) DEFAULT NULL,
  `temporary_number` int(11) DEFAULT '1',
  `final_number` int(11) DEFAULT '1',
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `use_id` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_batch_piece`
--

DROP TABLE IF EXISTS `commercial_batch_piece`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_piece` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `batch` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) NOT NULL,
  `create_date` datetime NOT NULL,
  `purchase_shipping` int(10) unsigned DEFAULT NULL,
  `purchase_shipping_line` int(10) unsigned DEFAULT NULL,
  `sale_shipping_return` int(10) unsigned DEFAULT NULL,
  `sale_shipping_return_line` int(10) unsigned DEFAULT NULL,
  `stock_entry` int(10) unsigned DEFAULT NULL,
  `stock_entry_line` int(10) unsigned DEFAULT NULL,
  `stock_out` int(10) unsigned DEFAULT NULL,
  `stock_out_line` int(10) unsigned DEFAULT NULL,
  `stock_mouvement` int(10) unsigned DEFAULT NULL,
  `stock_mouvement_line` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned NOT NULL,
  `purchase_shipping_return` int(10) unsigned DEFAULT NULL,
  `purchase_shipping_return_line` int(10) unsigned DEFAULT NULL,
  `sale_shipping` int(10) unsigned DEFAULT NULL,
  `sale_shipping_line` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_batch_piece_batch` (`batch`),
  KEY `FK_commerci
al_batch_piece_purchase_shipping` (`purchase_shipping`),
  KEY `FK_commercial_batch_piece_sale_shipping_return` (`sale_shipping_return`),
  KEY `FK_commercial_batch_piece_stock_entry` (`stock_entry`),
  KEY `FK_commercial_batch_piece_stock_out` (`stock_out`),
  KEY `FK_commercial_batch_piece_stock_mouvement` (`stock_mouvement`),
  KEY `FK_commercial_batch_piece_product` (`product`),
  KEY `FK_commercial_batch_piece_purchase_shipping_return` (`purchase_shipping_return`),
  KEY `FK_commercial_batch_piece_sale_shipping` (`sale_shipping`),
  CONSTRAINT `FK_commercial_batch_piece_batch` FOREIGN KEY (`batch`) REFERENCES `commercial_batch` (`Id`) ON DELETE CASCADE ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_batch_piece_purchase_shipping_return` FOREIGN KEY (`purchase_shipping_return`) REFERENCES `purchase_shipping_return` (`Id`) ON DELETE CASCADE ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_batch_piece_sale_shipping` FOREIGN KEY (`sale_shipping`) REFERENCES `sale_shipping` (`Id`) ON DELETE CASCADE ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_batch_piece_sale_shipping_return` FOREIGN KEY (`sale_shipping_return`) REFERENCES `sale_shipping_return` (`Id`) ON DELETE CASCADE ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_batch_piece_stock_entry` FOREIGN KEY (`stock_entry`) REFERENCES `commercial_stock_entry` (`Id`) ON DELETE CASCADE ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_batch_piece_stock_mouvement` FOREIGN KEY (`stock_mouvement`) REFERENCES `commercial_stock_mouvement` (`Id`) ON DELETE CASCADE ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_batch_piece_stock_out` FOREIGN KEY (`stock_out`) REFERENCES `commercial_stock_out` (`Id`) ON DELETE CASCADE ON UPDATE SET NULL,
  CONSTRAINT `FK_commerci
al_batch_piece_purchase_shipping` FOREIGN KEY (`purchase_shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_batch_piece_product` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_batch_retrieval_method`
--

DROP TABLE IF EXISTS `commercial_batch_retrieval_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_retrieval_method` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_batch_stock_log`
--

DROP TABLE IF EXISTS `commercial_batch_stock_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_stock_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date` datetime NOT NULL,
  `cump` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `batch` int(10) unsigned NOT NULL,
  `warehouse` int(10) unsigned NOT NULL,
  `product` int(10) unsigned NOT NULL,
  `piece_type` varchar(255) NOT NULL,
  `piece_line` int(10) unsigned NOT NULL,
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `stock` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `piece_id` int(10) unsigned NOT NULL,
  `action` varchar(45) NOT NULL,
  `standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `first_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `production_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`Id`),
  KEY `batch` (`batch`),
  KEY `warehouse` (`warehouse`),
  KEY `product` (`product`),
  CONSTRAINT `commercial_batch_stock_log_ibfk_1` FOREIGN KEY (`batch`) REFERENCES `commercial_batch` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_stock_log_ibfk_2` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`),
  CONSTRAINT `commercial_batch_stock_log_ibfk_3` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_commercial_batch_stock_logBeforeInsert
BEFORE INSERT ON commercial_batch_stock_log
FOR EACH ROW
BEGIN
    DECLARE v_cost_method INT;
    DECLARE v_standard_cost DECIMAL(15,5) DEFAULT 0;
    
    CASE NEW.piece_type
        WHEN 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
            IF (NEW.`action` = 'insert') THEN
                SET NEW.average_cost = commercial_batch_getCUMP(NEW.batch,NEW.piece_id, NEW.piece_line, 1);
                SET NEW.last_price_cost = commercial_batch_getLastPriceCost(NEW.batch,NEW.piece_id, NEW.piece_line, 1);
            ELSE IF (NEW.`action` = 'delete' OR NEW.`action` = 'correction') THEN
                SET NEW.average_cost = commercial_batch_getCUMP(NEW.batch,NEW.piece_id, NEW.piece_line, -1);
                SET NEW.last_price_cost = commercial_batch_getLastPriceCost(NEW.batch,NEW.piece_id, NEW.piece_line, -1);
            END IF;
            END IF;
            
        WHEN 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
            IF (NEW.`action` = 'insert') THEN
                SET NEW.average_cost = commercial_batch_getCUMPBySale_shipping_return_line(NEW.batch,NEW.piece_id, NEW.piece_line, 1);
                SET NEW.last_price_cost = commercial_batch_getLastPriceCostBySale_shipping_return_line(NEW.batch,NEW.piece_id, NEW.piece_line, 1);
            ELSE
                IF (NEW.`action` = 'delete' OR NEW.`action` = 'correction') THEN
                    SET NEW.average_cost = commercial_batch_getCUMPBySale_shipping_return_line(NEW.batch,NEW.piece_id, NEW.piece_line, -1);
                    SET NEW.last_price_cost = commercial_batch_getLastPriceCostBySale_shipping_return_line(NEW.batch,NEW.piece_id, NEW.piece_line, -1);
                END IF;
            END IF;
            
        WHEN 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
            IF (NEW.`action` = 'insert') THEN
                SET NEW.average_cost = commercial_batch_getCUMPByStock_entry_line(NEW.batch,NEW.piece_id, NEW.piece_line, 1);
                SET NEW.last_price_cost = commercial_batch_getLastPriceCostByStock_entry_line(NEW.batch,NEW.piece_id, NEW.piece_line, 1);
            ELSE IF (NEW.`action` = 'delete' OR NEW.`action` = 'correction') THEN
                SET NEW.average_cost = commercial_batch_getCUMPByStock_entry_line(NEW.batch,NEW.piece_id, NEW.piece_line, -1);
                SET NEW.last_price_cost = commercial_batch_getLastPriceCostByStock_entry_line(NEW.batch,NEW.piece_id, NEW.piece_line, -1);
            END IF;
            END IF;
        ELSE
            BEGIN
            END ;
    END CASE;
    
    SELECT cost_method INTO v_cost_method
    FROM commercial_batch
    WHERE Id = NEW.batch;
    IF(v_cost_method = 0) THEN
        SELECT commercial_batch_type.cost_method INTO v_cost_method
        FROM commercial_batch_type LEFT OUTER JOIN
        commercial_batch ON commercial_batch.batch_type = commercial_batch_type.Id
        WHERE commercial_batch.Id = NEW.batch;

        UPDATE commercial_batch SET cost_method = v_cost_method
        WHERE Id = NEW.batch;
    END IF;
    
    SELECT standard_cost INTO v_standard_cost 
    FROM commercial_batch
    WHERE Id = NEW.batch;
    
    IF (v_standard_cost = 0) THEN
        SELECT commercial_product.standard_cost INTO v_standard_cost 
        FROM commercial_product LEFT OUTER JOIN
        commercial_batch ON commercial_batch.product = commercial_product.Id
        WHERE commercial_batch.Id = NEW.batch;
    END IF;
    
    SET NEW.standard_cost = v_standard_cost;

    CASE v_cost_method
        WHEN 1 THEN
            SET NEW.cump = NEW.average_cost;
        WHEN 2 THEN
            SET NEW.cump = NEW.last_price_cost;
        WHEN 3 THEN
            SET NEW.cump = NEW.standard_cost;
        WHEN 5 THEN
            SET NEW.cump = NEW.first_price_cost;
        WHEN 6 THEN
            SET NEW.cump = NEW.production_cost;
    END CASE;

    
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_commercial_batch_stock_logOnInsert
AFTER INSERT ON commercial_batch_stock_log
FOR EACH ROW
BEGIN
    UPDATE commercial_batch_warehouse 
    SET quantity = NEW.stock, 
        cump = NEW.cump, 
        last_price_cost = NEW.last_price_cost, 
        average_cost = NEW.average_cost,
        standard_cost = NEW.standard_cost,
        production_cost = NEW.production_cost
    WHERE batch = NEW.batch 
    AND warehouse = NEW.warehouse;
    
    -- If no record exists, insert a new one
    IF ROW_COUNT() = 0 THEN
        INSERT INTO commercial_batch_warehouse 
        (batch, warehouse, product, quantity, cump, last_price_cost, average_cost, first_price_cost,standard_cost, production_cost)
        VALUES 
        (NEW.batch, NEW.warehouse, NEW.product, NEW.stock, NEW.cump, NEW.last_price_cost, NEW.average_cost,NEW.cump, NEW.standard_cost, NEW.production_cost );
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_batch_type`
--

DROP TABLE IF EXISTS `commercial_batch_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `create_date` datetime NOT NULL,
  `expiration_date` tinyint(1) NOT NULL DEFAULT '0',
  `expiration_delay` tinyint(1) NOT NULL DEFAULT '0',
  `manufacturing_date` tinyint(1) NOT NULL DEFAULT '0',
  `barcode` tinyint(1) NOT NULL DEFAULT '0',
  `qr_code` tinyint(1) NOT NULL DEFAULT '0',
  `retrieval_method` int(10) unsigned DEFAULT NULL,
  `manufacturer` tinyint(1) NOT NULL DEFAULT '0',
  `dialing` int(10) unsigned DEFAULT NULL,
  `cost_method` int(10) unsigned NOT NULL DEFAULT '1',
  `guarantee_date` tinyint(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_batch_type_1` (`retrieval_method`),
  KEY `FK_commercial_batch_type_cost_method` (`cost_method`),
  CONSTRAINT `FK_commercial_batch_type_1` FOREIGN KEY (`retrieval_method`) REFERENCES `commercial_batch_retrieval_method` (`Id`),
  CONSTRAINT `FK_commercial_batch_type_cost_method` FOREIGN KEY (`cost_method`) REFERENCES `commercial_product_cost_method` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_batch_warehouse`
--

DROP TABLE IF EXISTS `commercial_batch_warehouse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_batch_warehouse` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `batch` int(10) unsigned NOT NULL,
  `warehouse` int(10) unsigned NOT NULL,
  `product` int(10) unsigned NOT NULL,
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `cump` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `first_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `production_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`Id`),
  KEY `batch` (`batch`),
  KEY `warehouse` (`warehouse`),
  KEY `product` (`product`),
  CONSTRAINT `commercial_batch_warehouse_ibfk_1` FOREIGN KEY (`batch`) REFERENCES `commercial_batch` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `commercial_batch_warehouse_ibfk_2` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`),
  CONSTRAINT `commercial_batch_warehouse_ibfk_3` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_commercial_batch_warehouseAfterInsert
AFTER INSERT ON commercial_batch_warehouse
FOR EACH ROW
BEGIN
    DECLARE p_newByBatchCost DECIMAL(15,5) DEFAULT 0;
    DECLARE total_quantity DECIMAL(15,5) DEFAULT 0;
    DECLARE total_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE total_average_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE general_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE general_average_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE total_cost_over_batches DECIMAL(15,5) DEFAULT 0;
    DECLARE total_quantity_over_batches DECIMAL(15,5) DEFAULT 0;
    
    -- Calculate sum of quantities and sum of (quantity * cost)
    SELECT 
        SUM(cbw.quantity),
        SUM(cbw.quantity * cbw.cump),
        SUM(cbw.quantity * cbw.average_cost)
    INTO 
        total_quantity,
        total_cost_value,
        total_average_cost_value
    FROM 
        commercial_batch_warehouse cbw
    WHERE 
        cbw.warehouse = NEW.warehouse AND 
        cbw.batch = NEW.batch;



    SELECT
        SUM(cbw.quantity * cbw.cump),
        SUM(cbw.quantity)
    INTO 
        total_cost_over_batches,
        total_quantity_over_batches
    FROM 
        commercial_batch_warehouse cbw
    WHERE 
        cbw.warehouse = NEW.warehouse AND 
        cbw.product = NEW.product;



    IF (total_quantity <> 0) THEN 
        SET general_cost_value = total_cost_value / total_quantity;
        SET general_average_cost_value = total_average_cost_value / total_quantity;
        
    ELSE
        SET general_cost_value = NEW.cump;
        SET general_average_cost_value = NEW.average_cost;
    END IF;
    
    -- Return non-negative CUMP
    IF (general_cost_value < 0) THEN
        SET general_cost_value = 0;
    END IF;
    
    IF (general_average_cost_value < 0) THEN
        SET general_average_cost_value = 0;
    END IF;


    -- Always update the quantity column with the current total
    UPDATE commercial_batch
    SET quantity = total_quantity,
        cump = general_cost_value,
        average_cost = general_average_cost_value,
        first_price_cost = NEW.first_price_cost,
        last_price_cost = NEW.last_price_cost
    WHERE Id = NEW.batch;
    
    -- Calculate the new batch cost, handling potential zero division and negative values
    IF total_quantity_over_batches > 0 AND total_cost_over_batches >= 0 THEN
        SET p_newByBatchCost = total_cost_over_batches / total_quantity_over_batches;
    ELSE
        -- Handle case where total quantity is zero or negative
        SET p_newByBatchCost = 0;
    END IF;

    
    -- Update the product stock warehouse record with the new average batch cost
    UPDATE 
        commercial_product_stock_warehouse cpsw 
    SET 
        cpsw.by_batch_cost = p_newByBatchCost
    WHERE 
        cpsw.warehouse = NEW.warehouse AND 
        cpsw.product = NEW.product;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_commercial_batch_warehouseAfterUpdate
AFTER UPDATE ON commercial_batch_warehouse
FOR EACH ROW
BEGIN
    DECLARE p_newByBatchCost DECIMAL(15,5) DEFAULT 0;
    DECLARE total_quantity DECIMAL(15,5) DEFAULT 0;
    DECLARE total_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE total_average_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE general_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE general_average_cost_value DECIMAL(15,5) DEFAULT 0;
    DECLARE total_cost_over_batches DECIMAL(15,5) DEFAULT 0;
    DECLARE total_quantity_over_batches DECIMAL(15,5) DEFAULT 0;
    
    DECLARE batch_active BOOLEAN;
    -- Calculate sum of quantities and sum of (quantity * cost)
    SELECT 
        SUM(cbw.quantity),
        SUM(cbw.quantity * cbw.cump),
        SUM(cbw.quantity * cbw.average_cost)
    INTO 
        total_quantity,
        total_cost_value,
        total_average_cost_value
    FROM 
        commercial_batch_warehouse cbw
    WHERE 
        cbw.warehouse = NEW.warehouse AND 
        cbw.batch = NEW.batch;

    SELECT
        SUM(cbw.quantity * cbw.cump),
        SUM(cbw.quantity)
    INTO 
        total_cost_over_batches,
        total_quantity_over_batches
    FROM 
        commercial_batch_warehouse cbw
    WHERE 
        cbw.warehouse = NEW.warehouse AND 
        cbw.product = NEW.product;
    

    IF (total_quantity <> 0) THEN 
        SET general_cost_value = total_cost_value / total_quantity;
        SET general_average_cost_value = total_average_cost_value / total_quantity;
        
    ELSE
        SET general_cost_value = NEW.cump;
        SET general_average_cost_value = NEW.average_cost;
    END IF;
    
    -- Return non-negative CUMP
    IF (general_cost_value < 0) THEN
        SET general_cost_value = 0;
    END IF;
    
    IF (general_average_cost_value < 0) THEN
        SET general_average_cost_value = 0;
    END IF;


    -- Always update the quantity column with the current total
    UPDATE commercial_batch
    SET quantity = total_quantity,
        cump = general_cost_value,
        average_cost = general_average_cost_value,
        first_price_cost = NEW.first_price_cost,
        last_price_cost = NEW.last_price_cost
    WHERE Id = NEW.batch;
    
    -- If the sum is less than or equal to 0, update the active column in commercial_batch
    SELECT active INTO batch_active FROM commercial_batch
    WHERE Id = NEW.batch;

    IF total_quantity = 0 AND batch_active THEN
        UPDATE commercial_batch
        SET active = 0
        WHERE Id = NEW.batch;
    ELSE IF total_quantity <> 0 AND NOT batch_active THEN
            UPDATE commercial_batch
            SET active = 1
            WHERE Id = NEW.batch;
        END IF;
    END IF;
    
    -- Calculate the new batch cost, handling potential zero division and negative values
    IF total_quantity_over_batches > 0 AND total_cost_over_batches >= 0 THEN
        SET p_newByBatchCost = total_cost_over_batches / total_quantity_over_batches;
    ELSE
        -- Handle case where total quantity is zero or negative
        SET p_newByBatchCost = 0;
    END IF;
    
    -- Update the product stock warehouse record with the new average batch cost
    UPDATE 
        commercial_product_stock_warehouse cpsw 
    SET 
        cpsw.by_batch_cost = p_newByBatchCost
    WHERE 
        cpsw.warehouse = NEW.warehouse AND 
        cpsw.product = NEW.product;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_category`
--

DROP TABLE IF EXISTS `commercial_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_category` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `marge` decimal(15,5) DEFAULT '0.00000',
  `sale_price_round` decimal(15,5) DEFAULT '0.00000',
  `type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_category_type` (`type`),
  KEY `FK_commercial_category_parent` (`parent`),
  CONSTRAINT `FK_commercial_category_parent` FOREIGN KEY (`parent`) REFERENCES `commercial_category` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_category_type` FOREIGN KEY (`type`) REFERENCES `commercial_category_type` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_category_group`
--

DROP TABLE IF EXISTS `commercial_category_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_category_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category` int(10) unsigned NOT NULL,
  `begin_date` datetime NOT NULL,
  `end_date` datetime NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  `type` int(10) unsigned NOT NULL,
  `group` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_category_group_category` (`category`),
  KEY `FK_commercial_category_group_type` (`type`),
  KEY `FK_commercial_category_group_group` (`group`),
  CONSTRAINT `FK_commercial_category_group_category` FOREIGN KEY (`category`) REFERENCES `commercial_category` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_category_group_group` FOREIGN KEY (`group`) REFERENCES `atooerp_group` (`Id`),
  CONSTRAINT `FK_commercial_category_group_type` FOREIGN KEY (`type`) REFERENCES `commercial_category_group_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=39 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_category_group_type`
--

DROP TABLE IF EXISTS `commercial_category_group_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_category_group_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `memo` varchar(250) DEFAULT NULL,
  `create_date` datetime NOT NULL,
  `sale_shipping` tinyint(1) NOT NULL,
  `purchase_shipping` tinyint(1) NOT NULL,
  `sale_credit_invoice` tinyint(1) NOT NULL,
  `purchase_credit_invoice` tinyint(1) NOT NULL,
  `stock_entry` tinyint(1) NOT NULL,
  `stock_out` tinyint(1) NOT NULL,
  `stock_mouvement` tinyint(1) NOT NULL,
  `inventory` tinyint(1) NOT NULL,
  `sale_quotation` tinyint(4) NOT NULL,
  `purchase_quotation` tinyint(4) NOT NULL,
  `sale_order` tinyint(4) NOT NULL,
  `purchase_order` tinyint(4) NOT NULL,
  `crm_opportunity` tinyint(4) NOT NULL,
  `sale_invoice` tinyint(1) NOT NULL,
  `purchase_invoice` tinyint(1) NOT NULL,
  `need_expression` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_category_point_sale`
--

DROP TABLE IF EXISTS `commercial_category_point_sale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_category_point_sale` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT '0',
  `picture` longblob,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `commercial_category_tree`
--

DROP TABLE IF EXISTS `commercial_category_tree`;
/*!50001 DROP VIEW IF EXISTS `commercial_category_tree`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `commercial_category_tree` (
  `Id` int(11) unsigned,
  `Parent` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `commercial_category_type`
--

DROP TABLE IF EXISTS `commercial_category_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_category_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_commercial_operation`
--

DROP TABLE IF EXISTS `commercial_commercial_operation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_commercial_operation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_configuration`
--

DROP TABLE IF EXISTS `commercial_configuration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_configuration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_currency`
--

DROP TABLE IF EXISTS `commercial_currency`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_currency` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `symbol` varchar(45) DEFAULT NULL,
  `unitie_name` varchar(45) DEFAULT NULL,
  `big_unitie` varchar(45) DEFAULT NULL,
  `small_unitie` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_days_interval_fill`
--

DROP TABLE IF EXISTS `commercial_days_interval_fill`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_days_interval_fill` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` int(10) unsigned DEFAULT NULL,
  `is_default` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_dialing`
--

DROP TABLE IF EXISTS `commercial_dialing`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_dialing` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `piece_type` varchar(300) DEFAULT NULL,
  `prefix` varchar(45) DEFAULT NULL,
  `separator1` varchar(45) DEFAULT NULL,
  `coding` int(11) DEFAULT '3',
  `separator2` varchar(45) DEFAULT NULL,
  `year` tinyint(10) DEFAULT '1',
  `separator3` varchar(45) DEFAULT NULL,
  `suffixe` varchar(45) DEFAULT NULL,
  `temporary_number` int(11) DEFAULT '1',
  `final_number` int(11) DEFAULT '1',
  `name` varchar(45) DEFAULT NULL,
  `vat_chec` tinyint(1) DEFAULT '1',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `withholding_tax_chec` tinyint(1) DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT '0',
  `general_condition` varchar(2000) DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `tax1` tinyint(1) NOT NULL DEFAULT '0',
  `tax2` tinyint(1) NOT NULL DEFAULT '0',
  `tax3` tinyint(1) NOT NULL DEFAULT '0',
  `tax4` tinyint(1) NOT NULL DEFAULT '0',
  `tax5` tinyint(1) NOT NULL DEFAULT '0',
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_dialing_1` (`warehouse`),
  KEY `FK_commercial_dialing_2` (`socity`),
  CONSTRAINT `FK_commercial_dialing_2` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_dialing_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=75 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_fodec`
--

DROP TABLE IF EXISTS `commercial_fodec`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_fodec` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` decimal(10,3) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_inventory`
--

DROP TABLE IF EXISTS `commercial_inventory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_inventory` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(245) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `note` varchar(255) DEFAULT NULL,
  `inventory_sorting` int(10) unsigned DEFAULT '0',
  `valid` tinyint(1) DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT '0',
  `agent` int(10) unsigned DEFAULT '0',
  `stock_value` decimal(15,5) DEFAULT NULL,
  `gap_value` decimal(15,5) DEFAULT NULL,
  `validated_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_inventory_1` (`warehouse`),
  CONSTRAINT `FK_commercial_inventory_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_inventory_line`
--

DROP TABLE IF EXISTS `commercial_inventory_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_inventory_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `real_stock` decimal(15,5) DEFAULT '0.00000',
  `theorical_real_stock` decimal(15,5) DEFAULT '0.00000',
  `range` int(10) unsigned DEFAULT '0',
  `inventory` int(10) unsigned DEFAULT '0',
  `product` int(10) unsigned DEFAULT '0',
  `price` decimal(15,5) DEFAULT '0.00000',
  `batch` int(10) unsigned DEFAULT NULL,
  `average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `by_batch_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `batch_average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `batch_last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `batch_standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `batch_first_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_inventory_sorting`
--

DROP TABLE IF EXISTS `commercial_inventory_sorting`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_inventory_sorting` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_job_position`
--

DROP TABLE IF EXISTS `commercial_job_position`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_job_position` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `customer_agent` tinyint(1) DEFAULT NULL,
  `supplier_agent` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_logistics_cost`
--

DROP TABLE IF EXISTS `commercial_logistics_cost`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_logistics_cost` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `total_cost` decimal(15,5) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_logistics_cost_fabrication`
--

DROP TABLE IF EXISTS `commercial_logistics_cost_fabrication`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_logistics_cost_fabrication` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `logistics_cost` int(10) unsigned DEFAULT NULL,
  `production_fabrication` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `cost` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_cost_fabrication_1` (`logistics_cost`),
  KEY `FK_commercial_cost_fabrication_2` (`production_fabrication`),
  CONSTRAINT `FK_commercial_cost_fabrication_1` FOREIGN KEY (`logistics_cost`) REFERENCES `commercial_logistics_cost` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_cost_fabrication_2` FOREIGN KEY (`production_fabrication`) REFERENCES `production_fabrication` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_logistics_cost_line`
--

DROP TABLE IF EXISTS `commercial_logistics_cost_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_logistics_cost_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product` int(10) unsigned DEFAULT NULL,
  `logistics_cost` int(10) unsigned DEFAULT NULL,
  `cost_amount` decimal(15,5) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `shipping` int(10) unsigned DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `production_fabrication` int(10) unsigned DEFAULT NULL,
  `shipping_service` int(10) unsigned DEFAULT NULL,
  `origin_value` decimal(15,5) DEFAULT NULL,
  `new_value` decimal(15,5) DEFAULT NULL,
  `product_service` int(10) unsigned DEFAULT NULL,
  `logistics_cost_service` int(10) unsigned DEFAULT NULL,
  `logistics_cost_shipping` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_logistics_cost_line_1` (`product`),
  KEY `FK_commercial_logistics_cost_line_2` (`logistics_cost`),
  KEY `FK_commercial_logistics_cost_line_3` (`shipping`),
  KEY `FK_commercial_logistics_cost_line_5` (`production_fabrication`) USING BTREE,
  KEY `FK_commercial_logistics_cost_line_6` (`product_service`),
  KEY `FK_commercial_logistics_cost_line_8` (`logistics_cost_shipping`),
  KEY `FK_commercial_logistics_cost_line_7` (`logistics_cost_service`),
  CONSTRAINT `FK_commercial_logistics_cost_line_1` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_line_2` FOREIGN KEY (`logistics_cost`) REFERENCES `commercial_logistics_cost` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_line_3` FOREIGN KEY (`shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_line_5` FOREIGN KEY (`production_fabrication`) REFERENCES `production_fabrication` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_logistics_cost_line_6` FOREIGN KEY (`product_service`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_line_7` FOREIGN KEY (`logistics_cost_service`) REFERENCES `commercial_logistics_cost_service` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_line_8` FOREIGN KEY (`logistics_cost_shipping`) REFERENCES `commercial_logistics_cost_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_logistics_cost_service`
--

DROP TABLE IF EXISTS `commercial_logistics_cost_service`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_logistics_cost_service` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `logistics_cost` int(10) unsigned DEFAULT NULL,
  `shipping` int(10) unsigned DEFAULT NULL,
  `repartition_method` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `cost` decimal(15,5) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_logistics_cost_service_1` (`logistics_cost`),
  KEY `FK_commercial_logistics_cost_service_2` (`shipping`),
  KEY `FK_commercial_logistics_cost_service_3` (`repartition_method`),
  KEY `FK_commercial_logistics_cost_service_4` (`product`),
  CONSTRAINT `FK_commercial_logistics_cost_service_1` FOREIGN KEY (`logistics_cost`) REFERENCES `commercial_logistics_cost` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_service_2` FOREIGN KEY (`shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_service_3` FOREIGN KEY (`repartition_method`) REFERENCES `commercial_repartition_method` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_service_4` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_logistics_cost_shipping`
--

DROP TABLE IF EXISTS `commercial_logistics_cost_shipping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_logistics_cost_shipping` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `logistics_cost` int(10) unsigned DEFAULT NULL,
  `shipping` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `cost` decimal(15,10) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_shipping_logistics_1` (`logistics_cost`),
  KEY `FK_commercial_shipping_logistics_2` (`shipping`),
  CONSTRAINT `FK_commercial_logistics_cost_shipping_1` FOREIGN KEY (`logistics_cost`) REFERENCES `commercial_logistics_cost` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_logistics_cost_shipping_2` FOREIGN KEY (`shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression`
--

DROP TABLE IF EXISTS `commercial_need_expression`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(200) DEFAULT NULL,
  `validated` tinyint(1) NOT NULL DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT NULL,
  `deadline_date` datetime DEFAULT NULL,
  `received_date` datetime DEFAULT NULL,
  `validate_date` datetime DEFAULT NULL,
  `employee` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned NOT NULL,
  `original` int(10) unsigned DEFAULT NULL,
  `action` int(10) unsigned DEFAULT NULL,
  `production_order` int(10) unsigned DEFAULT NULL,
  `sale_order` int(10) unsigned DEFAULT NULL,
  `need_expression` int(10) unsigned DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_need_expression_warehouse` (`warehouse`),
  KEY `FK_commercial_need_expression_employee` (`employee`),
  KEY `FK_commercial_need_expression_state` (`state`),
  KEY `FK_commercial_need_expression_4` (`original`),
  KEY `FK_commercial_need_expression_production_order` (`production_order`),
  KEY `FK_commercial_need_expression_sale_order` (`sale_order`),
  KEY `FK_commercial_need_expression_need_expression` (`need_expression`),
  KEY `FK_commercial_need_expression_8` (`socity`),
  CONSTRAINT `FK_commercial_need_expression_8` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_commercial_need_expression_4` FOREIGN KEY (`original`) REFERENCES `commercial_need_expression` (`Id`),
  CONSTRAINT `FK_commercial_need_expression_employee` FOREIGN KEY (`employee`) REFERENCES `hr_employe` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_need_expression_need_expression` FOREIGN KEY (`need_expression`) REFERENCES `commercial_need_expression` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_need_expression_production_order` FOREIGN KEY (`production_order`) REFERENCES `production_order` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_need_expression_sale_order` FOREIGN KEY (`sale_order`) REFERENCES `sale_order` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_need_expression_state` FOREIGN KEY (`state`) REFERENCES `commercial_need_expression_state` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_need_expression_warehouse` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_action`
--

DROP TABLE IF EXISTS `commercial_need_expression_action`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_action` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_action_user`
--

DROP TABLE IF EXISTS `commercial_need_expression_action_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_action_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `need_expression` int(10) unsigned NOT NULL,
  `action` int(10) unsigned NOT NULL,
  `user` int(10) unsigned NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_line`
--

DROP TABLE IF EXISTS `commercial_need_expression_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(200) DEFAULT NULL,
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `cump` decimal(15,5) DEFAULT '0.00000',
  `action` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_line_dispatcher`
--

DROP TABLE IF EXISTS `commercial_need_expression_line_dispatcher`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_line_dispatcher` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line` int(10) unsigned NOT NULL,
  `quantity` decimal(15,5) NOT NULL,
  `action` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_need_expression_line_dispatcher_line` (`line`),
  CONSTRAINT `FK_commercial_need_expression_line_dispatcher_line` FOREIGN KEY (`line`) REFERENCES `commercial_need_expression_line` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_purchase_order`
--

DROP TABLE IF EXISTS `commercial_need_expression_purchase_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_purchase_order` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line` int(10) unsigned DEFAULT NULL,
  `purchase_order` int(10) unsigned DEFAULT NULL,
  `dispatcher` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_need_expression_purchase_order_line` (`line`),
  KEY `FK_commercial_need_expression_purchase_order_purchase_order_line` (`purchase_order`),
  KEY `FK_commercial_need_expression_purchase_order_dispatcher` (`dispatcher`),
  CONSTRAINT `FK_commercial_need_expression_purchase_order_dispatcher` FOREIGN KEY (`dispatcher`) REFERENCES `commercial_need_expression_line_dispatcher` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_need_expression_purchase_order_purchase_order_line` FOREIGN KEY (`purchase_order`) REFERENCES `purchase_order` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_quotation_request`
--

DROP TABLE IF EXISTS `commercial_need_expression_quotation_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_quotation_request` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line` int(10) unsigned DEFAULT NULL,
  `quotation_request` int(10) unsigned DEFAULT NULL,
  `dispatcher` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_need_expression_quotation_request_line` (`line`),
  KEY `FK_commercial_need_expression_quotation_request_qr_line` (`quotation_request`),
  KEY `FK_commercial_need_expression_quotation_request_dispatcher` (`dispatcher`),
  CONSTRAINT `FK_commercial_need_expression_quotation_request_dispatcher` FOREIGN KEY (`dispatcher`) REFERENCES `commercial_need_expression_line_dispatcher` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_need_expression_quotation_request_qr_line` FOREIGN KEY (`quotation_request`) REFERENCES `purchase_quotation_request` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_state`
--

DROP TABLE IF EXISTS `commercial_need_expression_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_state_user`
--

DROP TABLE IF EXISTS `commercial_need_expression_state_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_state_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `need_expression` int(10) unsigned NOT NULL,
  `state` int(10) unsigned NOT NULL,
  `user` int(10) unsigned NOT NULL,
  `date` datetime NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_stock_movement`
--

DROP TABLE IF EXISTS `commercial_need_expression_stock_movement`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_stock_movement` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line` int(10) unsigned DEFAULT NULL,
  `stock_movement` int(10) unsigned DEFAULT NULL,
  `dispatcher` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_need_expression_stock_movement_line` (`line`),
  KEY `FK_commercial_need_expression_stock_movement_stock_movement_line` (`stock_movement`),
  KEY `FK_commercial_need_expression_stock_movement_dispatcher` (`dispatcher`),
  CONSTRAINT `FK_commercial_need_expression_stock_movement_dispatcher` FOREIGN KEY (`dispatcher`) REFERENCES `commercial_need_expression_line_dispatcher` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_need_expression_stock_movement_stock_movement` FOREIGN KEY (`stock_movement`) REFERENCES `commercial_stock_mouvement` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_need_expression_vendor`
--

DROP TABLE IF EXISTS `commercial_need_expression_vendor`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_need_expression_vendor` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `line` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_need_expression_vendor_line` (`line`),
  KEY `FK_commercial_need_expression_vendor_partner` (`partner`),
  CONSTRAINT `FK_commercial_need_expression_vendor_line` FOREIGN KEY (`line`) REFERENCES `commercial_need_expression_line` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_need_expression_vendor_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner`
--

DROP TABLE IF EXISTS `commercial_partner`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `chec_socity` tinyint(1) DEFAULT '1',
  `website` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `note` varchar(45) DEFAULT NULL,
  `customer` tinyint(1) DEFAULT '1',
  `supplier` tinyint(1) DEFAULT '1',
  `payment_method_supplier` int(10) unsigned DEFAULT '0',
  `payment_condition_supplier` int(10) unsigned DEFAULT '0',
  `payment_condition_customer` int(10) unsigned DEFAULT '0',
  `socity` int(10) unsigned DEFAULT '0',
  `number` varchar(45) DEFAULT NULL COMMENT 'adress',
  `street` varchar(45) DEFAULT NULL COMMENT 'adress',
  `city` varchar(45) DEFAULT NULL COMMENT 'adress',
  `state` varchar(45) DEFAULT NULL COMMENT 'adress',
  `country` varchar(45) DEFAULT NULL COMMENT 'adress',
  `postal_code` varchar(45) DEFAULT NULL COMMENT 'adress',
  `delivery_number` varchar(45) DEFAULT NULL,
  `delivery_street` varchar(45) DEFAULT NULL,
  `delivery_city` varchar(45) DEFAULT NULL,
  `delivery_state` varchar(45) DEFAULT NULL,
  `delivery_country` varchar(45) DEFAULT NULL,
  `delivery_postal_code` varchar(45) DEFAULT NULL,
  `credit_limit` decimal(15,5) DEFAULT '0.00000',
  `currency` int(10) unsigned DEFAULT '0',
  `job_position` varchar(45) DEFAULT NULL,
  `customs_code` varchar(45) DEFAULT NULL,
  `vat_code` varchar(45) DEFAULT NULL,
  `trade_register` varchar(45) DEFAULT NULL,
  `picture` longblob,
  `payment_method_customer` int(10) unsigned DEFAULT '0',
  `rest_amount` decimal(15,5) DEFAULT '0.00000',
  `due_date` datetime DEFAULT NULL,
  `actif` tinyint(1) DEFAULT '1',
  `customer_discount` decimal(15,5) DEFAULT NULL,
  `supplier_discount` decimal(15,5) DEFAULT NULL,
  `vat_exemption` tinyint(1) DEFAULT '0',
  `custumer_withholding_tax` int(10) unsigned DEFAULT NULL,
  `supplier_withholding_tax` int(10) unsigned DEFAULT NULL,
  `activity` varchar(255) DEFAULT NULL,
  `category` int(10) unsigned DEFAULT '0',
  `sale_agent` int(10) unsigned DEFAULT NULL,
  `purchase_agent` int(10) unsigned DEFAULT NULL,
  `exoneration_purchase_tax1` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_purchase_tax2` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_purchase_tax3` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_purchase_tax4` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_purchase_tax5` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_sale_tax1` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_sale_tax2` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_sale_tax3` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_sale_tax4` tinyint(1) NOT NULL DEFAULT '0',
  `exoneration_sale_tax5` tinyint(1) NOT NULL DEFAULT '0',
  `piece_note` varchar(1000) DEFAULT NULL,
  `profile_instance` int(10) unsigned DEFAULT NULL,
  `purchase_payment_withholding_tax` int(10) unsigned DEFAULT NULL,
  `sale_payment_withholding_tax` int(10) unsigned DEFAULT NULL,
  `source` int(10) unsigned DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `gps` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_1` (`sale_agent`),
  KEY `FK_commercial_partner_2` (`purchase_agent`),
  KEY `Index_4` (`category`),
  KEY `FK_commercial_partner_3` (`purchase_payment_withholding_tax`),
  KEY `FK_commercial_partner_4` (`sale_payment_withholding_tax`),
  KEY `FK_commercial_partner_5` (`source`),
  KEY `FK_commercial_partner_6` (`type`) USING BTREE,
  KEY `FK_commercial_partner_7` (`currency`),
  CONSTRAINT `FK_commercial_partner_1` FOREIGN KEY (`sale_agent`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_commercial_partner_2` FOREIGN KEY (`purchase_agent`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_commercial_partner_3` FOREIGN KEY (`purchase_payment_withholding_tax`) REFERENCES `commercial_withholding_tax` (`Id`),
  CONSTRAINT `FK_commercial_partner_4` FOREIGN KEY (`sale_payment_withholding_tax`) REFERENCES `commercial_withholding_tax` (`Id`),
  CONSTRAINT `FK_commercial_partner_5` FOREIGN KEY (`source`) REFERENCES `commercial_partner_source` (`Id`),
  CONSTRAINT `FK_commercial_partner_6` FOREIGN KEY (`type`) REFERENCES `commercial_payment_type` (`Id`),
  CONSTRAINT `FK_commercial_partner_7` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=4885 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_category`
--

DROP TABLE IF EXISTS `commercial_partner_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_category` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_category_1` (`type`),
  KEY `FK_commercial_partner_category_2` (`parent`),
  CONSTRAINT `FK_commercial_partner_category_1` FOREIGN KEY (`type`) REFERENCES `commercial_partner_category_type` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_partner_category_2` FOREIGN KEY (`parent`) REFERENCES `commercial_partner_category` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_category_group`
--

DROP TABLE IF EXISTS `commercial_partner_category_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_category_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `begin_date` datetime NOT NULL,
  `end_date` datetime NOT NULL,
  `type` int(10) unsigned NOT NULL,
  `group` int(10) unsigned NOT NULL,
  `category` int(10) unsigned NOT NULL,
  `enabled` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_category_group_group` (`group`),
  KEY `FK_commercial_partner_category_group_category` (`category`),
  KEY `FK_commercial_partner_category_group_type` (`type`),
  CONSTRAINT `FK_commercial_partner_category_group_category` FOREIGN KEY (`category`) REFERENCES `commercial_partner_category` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_partner_category_group_group` FOREIGN KEY (`group`) REFERENCES `atooerp_group` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_partner_category_group_type` FOREIGN KEY (`type`) REFERENCES `commercial_partner_category_group_type` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=267 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_category_group_type`
--

DROP TABLE IF EXISTS `commercial_partner_category_group_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_category_group_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `create_date` datetime NOT NULL,
  `memo` varchar(225) DEFAULT NULL,
  `sale_shipping_consult` tinyint(1) NOT NULL,
  `sale_shipping_save` tinyint(1) NOT NULL,
  `sale_shipping_validate` tinyint(1) NOT NULL,
  `purchase_shipping_consult` tinyint(1) NOT NULL,
  `purchase_shipping_save` tinyint(1) NOT NULL,
  `purchase_shipping_validate` tinyint(1) NOT NULL,
  `sale_credit_invoice_consult` tinyint(1) NOT NULL,
  `sale_credit_invoice_save` tinyint(1) NOT NULL,
  `sale_credit_invoice_validate` tinyint(1) NOT NULL,
  `purchase_credit_invoice_consult` tinyint(1) NOT NULL,
  `purchase_credit_invoice_save` tinyint(1) NOT NULL,
  `purchase_credit_invoice_validate` tinyint(1) NOT NULL,
  `purchase_quotation_consult` tinyint(3) unsigned NOT NULL,
  `purchase_quotation_save` tinyint(3) unsigned NOT NULL,
  `purchase_quotation_validate` tinyint(3) unsigned NOT NULL,
  `sale_quotation_consult` tinyint(3) unsigned NOT NULL,
  `sale_quotation_save` tinyint(3) unsigned NOT NULL,
  `sale_quotation_validate` tinyint(3) unsigned NOT NULL,
  `sale_order_consult` tinyint(3) unsigned NOT NULL,
  `sale_order_save` tinyint(3) unsigned NOT NULL,
  `sale_order_validate` tinyint(3) unsigned NOT NULL,
  `purchase_order_consult` tinyint(3) unsigned NOT NULL,
  `purchase_order_save` tinyint(3) unsigned NOT NULL,
  `purchase_order_validate` tinyint(3) unsigned NOT NULL,
  `crm_opportunity_consult` tinyint(3) unsigned NOT NULL,
  `crm_opportunity_save` tinyint(3) unsigned NOT NULL,
  `crm_opportunity_validate` tinyint(3) unsigned NOT NULL,
  `sale_invoice_consult` tinyint(1) NOT NULL,
  `sale_invoice_save` tinyint(1) NOT NULL,
  `sale_invoice_validate` tinyint(1) NOT NULL,
  `purchase_invoice_consult` tinyint(1) NOT NULL,
  `purchase_invoice_save` tinyint(1) NOT NULL,
  `purchase_invoice_validate` tinyint(1) NOT NULL,
  `need_expression_consult` tinyint(1) NOT NULL,
  `need_expression_save` tinyint(1) NOT NULL,
  `need_expression_validate` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_category_type`
--

DROP TABLE IF EXISTS `commercial_partner_category_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_category_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_contact`
--

DROP TABLE IF EXISTS `commercial_partner_contact`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_contact` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `partner` int(10) unsigned NOT NULL,
  `person` int(10) unsigned NOT NULL,
  `job_position` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `superior` int(10) unsigned DEFAULT NULL,
  `actif` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_contact_1` (`partner`),
  KEY `FK_commercial_partner_contact_2` (`person`),
  KEY `FK_commercial_partner_contact_3` (`job_position`) USING BTREE,
  KEY `FK_commercial_partner_contact_4` (`superior`),
  CONSTRAINT `FK_commercial_partner_contact_1` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_partner_contact_2` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_commercial_partner_contact_3` FOREIGN KEY (`job_position`) REFERENCES `commercial_job_position` (`Id`),
  CONSTRAINT `FK_commercial_partner_contact_4` FOREIGN KEY (`superior`) REFERENCES `commercial_partner_contact` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_convention`
--

DROP TABLE IF EXISTS `commercial_partner_convention`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_convention` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `activated` tinyint(1) DEFAULT '0',
  `validated` tinyint(1) DEFAULT NULL,
  `purchase_sale` tinyint(1) DEFAULT '0' COMMENT '0 purchase 1 sale',
  `description` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_convention_1` (`partner`),
  CONSTRAINT `FK_commercial_partner_convention_1` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_convention_line`
--

DROP TABLE IF EXISTS `commercial_partner_convention_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_convention_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product` int(10) unsigned DEFAULT '0',
  `commercial_partner_convention` int(10) unsigned DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `discount` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_convention_line_1` (`product`),
  KEY `FK_commercial_partner_convention_line_2` (`commercial_partner_convention`),
  CONSTRAINT `FK_commercial_partner_convention_line_1` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_partner_convention_line_2` FOREIGN KEY (`commercial_partner_convention`) REFERENCES `commercial_partner_convention` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_source`
--

DROP TABLE IF EXISTS `commercial_partner_source`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_source` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `note` varchar(100) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_source_1` (`partner`),
  KEY `FK_commercial_partner_source_2` (`employe`) USING BTREE,
  CONSTRAINT `FK_commercial_partner_source_1` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`),
  CONSTRAINT `FK_commercial_partner_source_2` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_temp`
--

DROP TABLE IF EXISTS `commercial_partner_temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_temp` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_temp_1` (`user`),
  KEY `FK_commercial_partner_temp_2` (`employe`),
  KEY `FK_commercial_partner_temp_3` (`partner`),
  KEY `FK_commercial_partner_temp_4` (`state`),
  CONSTRAINT `FK_commercial_partner_temp_1` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_partner_temp_2` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_partner_temp_3` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_partner_temp_4` FOREIGN KEY (`state`) REFERENCES `marketing_profile_state` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_type`
--

DROP TABLE IF EXISTS `commercial_partner_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_partner_user_exception`
--

DROP TABLE IF EXISTS `commercial_partner_user_exception`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_partner_user_exception` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `partner` int(10) unsigned NOT NULL,
  `user` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_partner_user_exception_1` (`user`),
  KEY `FK_commercial_partner_user_exception_2` (`partner`),
  CONSTRAINT `FK_commercial_partner_user_exception_1` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_partner_user_exception_2` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_payment`
--

DROP TABLE IF EXISTS `commercial_payment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT '0.00000',
  `memo` varchar(3000) DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT '0',
  `partner` int(10) unsigned DEFAULT '0',
  `piece_type` varchar(300) DEFAULT NULL,
  `due_date` datetime DEFAULT NULL,
  `payment_type` int(10) unsigned DEFAULT NULL,
  `ended` tinyint(1) DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `bank_account` int(10) unsigned DEFAULT '0',
  `sale_bank` int(10) unsigned DEFAULT '0',
  `sign` tinyint(4) DEFAULT '-1',
  `pos_session` int(10) unsigned DEFAULT '0',
  `agent` int(10) unsigned DEFAULT NULL,
  `cash_desk` int(10) unsigned DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `value_date` datetime DEFAULT NULL COMMENT 'ended date',
  `unpaid` tinyint(1) DEFAULT NULL,
  `unpaid_date` datetime DEFAULT NULL,
  `unpaid_bank_account` int(10) unsigned DEFAULT NULL,
  `unpaid_payment` int(10) unsigned DEFAULT NULL,
  `unpaid_paid_amount` decimal(15,5) DEFAULT NULL,
  `unpaid_check_date` datetime DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `withholding_tax_payment` int(10) unsigned DEFAULT NULL,
  `tax_amount` decimal(15,5) DEFAULT NULL,
  `gross_amount` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`pos_session`),
  KEY `FK_commercial_payment_1` (`agent`),
  KEY `FK_commercial_payment_2` (`unpaid_bank_account`),
  KEY `FK_commercial_payment_3` (`unpaid_payment`),
  KEY `FK_commercial_payment_4` (`currency`),
  KEY `FK_commercial_payment_6` (`withholding_tax_payment`),
  KEY `FK_commercial_payment_7` (`socity`),
  CONSTRAINT `FK_commercial_payment_7` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_payment_1` FOREIGN KEY (`agent`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_commercial_payment_2` FOREIGN KEY (`unpaid_bank_account`) REFERENCES `accounting_bank_account` (`Id`),
  CONSTRAINT `FK_commercial_payment_3` FOREIGN KEY (`unpaid_payment`) REFERENCES `commercial_payment` (`Id`),
  CONSTRAINT `FK_commercial_payment_4` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`),
  CONSTRAINT `FK_commercial_payment_6` FOREIGN KEY (`withholding_tax_payment`) REFERENCES `commercial_withholding_tax` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=39373 DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_commercial_paymentOnInsert` AFTER INSERT ON `commercial_payment` FOR EACH ROW BEGIN
if(new.validated = 1) then
call SetPaymentToPieces(new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_commercial_paymentOnUpdate` AFTER UPDATE ON `commercial_payment` FOR EACH ROW
BEGIN
if(new.validated = 1) then
  call SetPaymentToPieces(new.Id);
 
  IF(OLD.validated = 0) then
    IF(new.cash_desk is not null) then
      call accountingCash_registerADDByPayment(new.Id);
    end if;
  end if;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_payment_condition`
--

DROP TABLE IF EXISTS `commercial_payment_condition`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment_condition` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_payment_method`
--

DROP TABLE IF EXISTS `commercial_payment_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment_method` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `bank` tinyint(1) DEFAULT '0',
  `picture` blob,
  `active` tinyint(1) DEFAULT NULL,
  `payment_method_type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_payment_method_1` (`payment_method_type`),
  CONSTRAINT `FK_commercial_payment_method_1` FOREIGN KEY (`payment_method_type`) REFERENCES `commercial_payment_method_type` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_payment_method_type`
--

DROP TABLE IF EXISTS `commercial_payment_method_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment_method_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_payment_piece`
--

DROP TABLE IF EXISTS `commercial_payment_piece`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment_piece` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `memo` varchar(45) DEFAULT NULL,
  `payment` int(10) unsigned DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `piece_type` varchar(300) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`piece`)
) ENGINE=InnoDB AUTO_INCREMENT=78432 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_commercial_payment_pieceOnInsert` AFTER INSERT ON `commercial_payment_piece` FOR EACH ROW BEGIN
declare c_validated int;
select validated into c_validated from commercial_payment where Id= new.payment;
if(c_validated = 1) then
call SetPaymentToPieceByPiece(new.piece_type, new.piece);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_commercial_payment_pieceAfterDelete` AFTER DELETE ON `commercial_payment_piece` FOR EACH ROW BEGIN
declare c_validated int;
select validated into c_validated from commercial_payment where Id = old.payment;
if(c_validated = 1) then
call SetPaymentToPieceByPiece(old.piece_type, old.piece);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_payment_ticket`
--

DROP TABLE IF EXISTS `commercial_payment_ticket`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment_ticket` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `barcode` varchar(45) DEFAULT NULL,
  `ticket_amount` decimal(15,5) DEFAULT NULL,
  `reduction` decimal(15,5) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `ticket_type` int(10) unsigned DEFAULT NULL,
  `payment` int(10) unsigned DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_payment_ticket_1` (`ticket_type`),
  KEY `FK_commercial_payment_ticket_2` (`payment`),
  CONSTRAINT `FK_commercial_payment_ticket_1` FOREIGN KEY (`ticket_type`) REFERENCES `commercial_payment_ticket_type` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_payment_ticket_2` FOREIGN KEY (`payment`) REFERENCES `commercial_payment` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_payment_ticket_type`
--

DROP TABLE IF EXISTS `commercial_payment_ticket_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment_ticket_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `picture` blob,
  `reduction` decimal(15,5) DEFAULT NULL COMMENT 'REDUCTION EN %',
  `prefix` varchar(45) DEFAULT NULL,
  `prefix_begin` int(11) DEFAULT NULL,
  `prefix_length` int(11) DEFAULT NULL,
  `value_begin` int(11) DEFAULT NULL,
  `value_length` int(11) DEFAULT NULL,
  `date_begin` int(11) DEFAULT NULL,
  `date_length` int(11) DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_payment_type`
--

DROP TABLE IF EXISTS `commercial_payment_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_payment_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_permission_level`
--

DROP TABLE IF EXISTS `commercial_permission_level`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_permission_level` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_piece`
--

DROP TABLE IF EXISTS `commercial_piece`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_piece` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT NULL,
  `fodec_chec` tinyint(1) DEFAULT NULL,
  `commercial_operation` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  `payment_condition` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_piece_group_user_permission_validation`
--

DROP TABLE IF EXISTS `commercial_piece_group_user_permission_validation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_piece_group_user_permission_validation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `group_user` int(10) unsigned DEFAULT '0',
  `activity` int(10) unsigned DEFAULT '0',
  `level` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=19 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_piece_line`
--

DROP TABLE IF EXISTS `commercial_piece_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_piece_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `price` decimal(10,3) DEFAULT NULL,
  `discount` decimal(10,3) DEFAULT NULL,
  `piece` decimal(10,3) DEFAULT NULL,
  `product` decimal(10,3) DEFAULT NULL,
  `taxe` decimal(10,3) DEFAULT NULL,
  `fodec` decimal(10,3) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_piece_report_configuration`
--

DROP TABLE IF EXISTS `commercial_piece_report_configuration`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_piece_report_configuration` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `dialing` int(10) unsigned NOT NULL,
  `name` varchar(100) NOT NULL,
  `widthF` float NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_point_sale`
--

DROP TABLE IF EXISTS `commercial_point_sale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_point_sale` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `commercial_operation` int(10) unsigned DEFAULT '0',
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_prices_calculating_method`
--

DROP TABLE IF EXISTS `commercial_prices_calculating_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_prices_calculating_method` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_product`
--

DROP TABLE IF EXISTS `commercial_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `barcode` varchar(255) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `category` int(10) unsigned DEFAULT '0',
  `actif` tinyint(1) DEFAULT '0',
  `type` int(10) unsigned DEFAULT '0',
  `characteristic` varchar(245) DEFAULT NULL,
  `price_purchase` decimal(15,5) DEFAULT '0.00000',
  `price_sale` decimal(15,5) DEFAULT '0.00000',
  `supplier_description` varchar(200) DEFAULT NULL,
  `time_production` int(10) unsigned DEFAULT '0',
  `stock` decimal(10,3) DEFAULT NULL,
  `line` varchar(45) DEFAULT NULL,
  `row` varchar(45) DEFAULT NULL,
  `square` varchar(45) DEFAULT NULL,
  `customer_description` varchar(200) DEFAULT NULL,
  `time_delivery` int(10) unsigned DEFAULT '0',
  `guarantee` int(10) unsigned DEFAULT '0',
  `to_weigh` tinyint(1) DEFAULT '0',
  `providing_method` int(10) unsigned DEFAULT '0',
  `supply_method` int(10) unsigned DEFAULT '0',
  `unite` int(10) unsigned DEFAULT '0',
  `taxe_purchase` int(10) unsigned DEFAULT '0',
  `taxe_sale` int(10) unsigned DEFAULT '0',
  `category_point_sale` int(10) unsigned DEFAULT '0',
  `batch_units` int(10) unsigned DEFAULT '0' COMMENT 'nombre d''unite par lot',
  `ngp` varchar(45) DEFAULT NULL,
  `max_stock` decimal(15,5) DEFAULT '0.00000',
  `min_stock` decimal(15,5) DEFAULT '0.00000',
  `prices_calculating_method` int(10) unsigned DEFAULT '0',
  `picture` longblob,
  `is_composite` tinyint(1) DEFAULT '0',
  `public_price` decimal(15,5) DEFAULT '0.00000',
  `actual_stock` decimal(15,5) DEFAULT '0.00000',
  `theoretical_stock` decimal(15,5) DEFAULT '0.00000',
  `purchase` tinyint(1) DEFAULT '0',
  `sale` tinyint(1) DEFAULT '0',
  `pos_synchronous` tinyint(1) DEFAULT '0',
  `margin` decimal(15,5) DEFAULT '0.00000',
  `purchase_tax1` int(10) unsigned DEFAULT NULL,
  `purchase_tax2` int(10) unsigned DEFAULT NULL,
  `purchase_tax3` int(10) unsigned DEFAULT NULL,
  `purchase_tax4` int(10) unsigned DEFAULT NULL,
  `purchase_tax5` int(10) unsigned DEFAULT NULL,
  `sale_tax1` int(10) unsigned DEFAULT NULL,
  `sale_tax2` int(10) unsigned DEFAULT NULL,
  `sale_tax3` int(10) unsigned DEFAULT NULL,
  `sale_tax4` int(10) unsigned DEFAULT NULL,
  `sale_tax5` int(10) unsigned DEFAULT NULL,
  `purchase_price_tax_included` decimal(15,5) DEFAULT NULL,
  `sale_price_tax_included` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `cost_method` int(10) unsigned DEFAULT '1',
  `cost` decimal(15,5) DEFAULT NULL,
  `profile_instance` int(10) unsigned DEFAULT NULL,
  `batch_type` int(10) unsigned DEFAULT NULL,
  `use_serial_number` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `repartition_method` int(10) unsigned DEFAULT NULL,
  `weight` decimal(15,5) DEFAULT NULL,
  `volume` decimal(15,5) DEFAULT NULL,
  `standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `by_batch_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `production_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_product_1` (`tare`),
  KEY `FK_commercial_product_2` (`cost_method`),
  KEY `FK_commercial_product_4` (`batch_type`),
  KEY `FK_commercial_product_5` (`repartition_method`),
  CONSTRAINT `FK_commercial_product_1` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_commercial_product_2` FOREIGN KEY (`cost_method`) REFERENCES `commercial_product_cost_method` (`Id`),
  CONSTRAINT `FK_commercial_product_4` FOREIGN KEY (`batch_type`) REFERENCES `commercial_batch_type` (`Id`),
  CONSTRAINT `FK_commercial_product_5` FOREIGN KEY (`repartition_method`) REFERENCES `commercial_repartition_method` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2274 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_commercial_productOnInsert` AFTER INSERT ON `commercial_product` FOR EACH ROW BEGIN

call insert_warehouse_on_insert_product(new.Id);

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_product_cost_method`
--

DROP TABLE IF EXISTS `commercial_product_cost_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_product_cost_method` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `default` tinyint(1) unsigned NOT NULL DEFAULT '0',
  `product` tinyint(1) unsigned NOT NULL DEFAULT '1',
  `batch` tinyint(1) unsigned NOT NULL DEFAULT '1',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_product_partner_price`
--

DROP TABLE IF EXISTS `commercial_product_partner_price`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_product_partner_price` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product` int(10) unsigned DEFAULT '0',
  `partner` int(10) unsigned DEFAULT '0',
  `price` decimal(15,5) DEFAULT '0.00000',
  `taxe` int(10) unsigned DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `purchase_sale` tinyint(1) DEFAULT '0' COMMENT '0 purchase 1 sale',
  `discount` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_product_stock`
--

DROP TABLE IF EXISTS `commercial_product_stock`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_product_stock` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `piece_line` int(10) unsigned DEFAULT '0',
  `piece_type` varchar(255) DEFAULT NULL,
  `quantity` decimal(15,5) DEFAULT NULL,
  `actual_stock` decimal(15,5) DEFAULT '0.00000',
  `theoretical_stock` decimal(15,5) DEFAULT '0.00000',
  `total_actual_stock` decimal(15,5) DEFAULT NULL,
  `total_theoretical_stock` decimal(15,5) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT '0',
  `date` datetime DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT '0',
  `action` varchar(45) DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT '0',
  `cump` decimal(15,5) DEFAULT NULL,
  `average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `by_batch_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `production_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`Id`),
  KEY `Index_3` (`date`),
  KEY `Index_2` (`piece_line`,`piece_type`) USING BTREE,
  KEY `FK_commercial_product_stock_1` (`warehouse`),
  KEY `Index_5` (`product`),
  CONSTRAINT `FK_commercial_product_stock_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=444 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_commercial_product_stockBeforeInsert
BEFORE INSERT ON commercial_product_stock
FOR EACH ROW
BEGIN
    DECLARE v_cost_method INT;
    DECLARE v_standard_cost DECIMAL(15,5) DEFAULT 0;
    CASE NEW.piece_type
        WHEN 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
            IF (NEW.`action` = 'insert') THEN
                SET NEW.average_cost = commercial_getCUMP(NEW.piece_line, 1);
                SET NEW.last_price_cost = commercial_getLastPriceCost(NEW.piece_line, 1);
            ELSE IF (NEW.`action` = 'delete' OR NEW.`action` = 'correction') THEN
                SET NEW.average_cost = commercial_getCUMP(NEW.piece_line, -1);
                SET NEW.last_price_cost = commercial_getLastPriceCost(NEW.piece_line, -1);
            END IF;
            END IF;
            
        WHEN 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
            IF (NEW.`action` = 'insert') THEN
                SET NEW.average_cost = commercial_getCUMPBySale_shipping_return_line(NEW.piece_line, 1);
                SET NEW.last_price_cost = commercial_getLastPriceCostBySale_shipping_return_line(NEW.piece_line, 1);
            ELSE
                IF (NEW.`action` = 'delete' OR NEW.`action` = 'correction') THEN
                    SET NEW.average_cost = commercial_getCUMPBySale_shipping_return_line(NEW.piece_line, -1);
                    SET NEW.last_price_cost = commercial_getLastPriceCostBySale_shipping_return_line(NEW.piece_line, -1);
                END IF;
            END IF;
            
        WHEN 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
            IF (NEW.`action` = 'insert') THEN
                SET NEW.average_cost = commercial_getCUMPByStock_entry(NEW.piece_line, 1);
                SET NEW.last_price_cost = commercial_getLastPriceCostByStock_entry_line(NEW.piece_line, 1);
            ELSE IF (NEW.`action` = 'delete' OR NEW.`action` = 'correction') THEN
                SET NEW.average_cost = commercial_getCUMPByStock_entry(NEW.piece_line, -1);
                SET NEW.last_price_cost = commercial_getLastPriceCostByStock_entry_line(NEW.piece_line, -1);
            END IF;
            END IF;
        ELSE
            BEGIN
            END ;
    END CASE;
    
    SELECT cost_method INTO v_cost_method
    FROM commercial_product
    WHERE Id = NEW.product;
    
    SELECT standard_cost INTO v_standard_cost 
    FROM commercial_product
    WHERE Id = NEW.product;
    
    SET NEW.standard_cost = v_standard_cost;

    CASE v_cost_method
        WHEN 1 THEN
            SET NEW.cump = NEW.average_cost;
        WHEN 2 THEN
            SET NEW.cump = NEW.last_price_cost;
        WHEN 3 THEN
            SET NEW.cump = NEW.standard_cost;
        WHEN 4 THEN
            SET NEW.cump = NEW.by_batch_cost;
        WHEN 6 THEN
            SET NEW.cump = NEW.production_cost;
        ELSE 
            SET NEW.cump = 1.111;
    END CASE;

    
    
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_commercial_product_stockOnInsert
AFTER INSERT ON commercial_product_stock
FOR EACH ROW
BEGIN
DECLARE p_range INT;

CALL notification_insert_stock(new.actual_stock, new.product);

-- Only call insert_batch_product_stock if action='insert' and piece_type is one of the supported types
IF NEW.action = 'insert' AND (
   NEW.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' OR
   NEW.piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' OR
   NEW.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' OR
   NEW.piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' OR
   NEW.piece_type = 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' OR
   NEW.piece_type = 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' OR
   NEW.piece_type = 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' OR NEW.piece_type = 'Production.Fabrication, Fabrication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
) THEN
  -- Get range based on piece_type
  SELECT 
    CASE 
      -- Purchase shipping
      WHEN NEW.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN 
        (SELECT `range` FROM purchase_shipping_line WHERE piece = NEW.piece AND Id = NEW.piece_line LIMIT 1)
      
      -- Purchase shipping return
      WHEN NEW.piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN 
        (SELECT `range` FROM purchase_shipping_return_line WHERE piece = NEW.piece AND Id = NEW.piece_line LIMIT 1)
      
      -- Sale shipping
      WHEN NEW.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
        (SELECT `range` FROM sale_shipping_line WHERE piece = NEW.piece AND Id = NEW.piece_line LIMIT 1)
      
      -- Sale shipping return
      WHEN NEW.piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN 
        (SELECT `range` FROM sale_shipping_return_line WHERE piece = NEW.piece AND Id = NEW.piece_line LIMIT 1)
      
      -- Stock entry
      WHEN NEW.piece_type = 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN 
        (SELECT `range` FROM commercial_stock_entry_line WHERE piece = NEW.piece AND Id = NEW.piece_line LIMIT 1)
      
      -- Stock out
      WHEN NEW.piece_type = 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN 
        (SELECT `range` FROM commercial_stock_out_line WHERE piece = NEW.piece AND Id = NEW.piece_line LIMIT 1)
      
      -- Stock mouvement
      WHEN NEW.piece_type = 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN 
        (SELECT `range` FROM commercial_stock_mouvement_line WHERE piece = NEW.piece AND Id = NEW.piece_line LIMIT 1)

      WHEN NEW.piece_type = 'Production.Fabrication, Fabrication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN 
        (SELECT   NEW.piece )
      
      
      ELSE NULL
    END INTO p_range;

   CALL insert_batch_product_stock(
                                  p_range,
                                  NEW.piece_type,
                                  NEW.product,
                                  - NEW.quantity,
                                  NEW.piece,
                                  NEW.warehouse,
                                  NEW.action
                              );
END IF;

UPDATE commercial_product_stock_warehouse 
SET actual_stock = new.actual_stock, 
    theoretical_stock = new.theoretical_stock,
    product_stock = new.Id, 
    commercial_product_stock_warehouse.cump = new.cump, 
    commercial_product_stock_warehouse.last_price_cost = NEW.last_price_cost, 
    commercial_product_stock_warehouse.average_cost = NEW.average_cost, 
    commercial_product_stock_warehouse.standard_cost = NEW.standard_cost,
    commercial_product_stock_warehouse.production_cost = NEW.production_cost
WHERE product = new.product AND warehouse = new.warehouse;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_product_stock_warehouse`
--

DROP TABLE IF EXISTS `commercial_product_stock_warehouse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_product_stock_warehouse` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `actual_stock` decimal(15,5) DEFAULT '0.00000',
  `theoretical_stock` decimal(15,5) DEFAULT '0.00000',
  `product` int(10) unsigned DEFAULT '0',
  `product_stock` int(10) unsigned DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT '0',
  `cump` decimal(15,5) DEFAULT NULL,
  `available` tinyint(1) DEFAULT '1',
  `line` varchar(45) DEFAULT NULL,
  `row` varchar(45) DEFAULT NULL,
  `square` varchar(45) DEFAULT NULL,
  `max_stock` decimal(15,5) DEFAULT NULL,
  `min_stock` decimal(15,5) DEFAULT NULL,
  `auto_deep_composition` tinyint(1) unsigned DEFAULT '1',
  `average_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `standard_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `last_price_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `by_batch_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `production_cost` decimal(15,5) NOT NULL DEFAULT '0.00000',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`product`,`warehouse`),
  KEY `FK_commercial_product_stock_warehouse_1` (`warehouse`),
  CONSTRAINT `FK_commercial_product_stock_warehouse_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_commercial_product_stock_warehouseBeforeUpdate` BEFORE UPDATE ON `commercial_product_stock_warehouse` FOR EACH ROW BEGIN


IF(new.actual_stock <> 0) then
set new.available = 1;
end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_commercial_product_stock_warehouseOnUpdate
AFTER UPDATE ON commercial_product_stock_warehouse
FOR EACH ROW
BEGIN
    DECLARE v_general_average_cost, v_general_by_batch_cost, v_general_cost, v_total_quantity DECIMAL(15,5) DEFAULT 0;
    DECLARE v_cost_method INT;
    SELECT SUM(actual_stock) INTO v_total_quantity 
    FROM commercial_product_stock_warehouse 
    WHERE product = NEW.product;

    IF (v_total_quantity <> 0) THEN
        SELECT 
            SUM(actual_stock * average_cost) / SUM(actual_stock),
            SUM(actual_stock * by_batch_cost) / SUM(actual_stock) 
        INTO 
            v_general_average_cost, v_general_by_batch_cost 
        FROM commercial_product_stock_warehouse 
        WHERE product = NEW.product;
    ELSE
        SET v_general_average_cost = NEW.average_cost;
        SET v_general_by_batch_cost = NEW.by_batch_cost;
    END IF;
    
    -- Return non-negative CUMP
    IF (v_general_average_cost < 0) THEN
        SET v_general_average_cost = 0;
    END IF;
    
    IF (v_general_by_batch_cost < 0) THEN
        SET v_general_by_batch_cost = 0;
    END IF;
    

    SELECT cost_method INTO v_cost_method
    FROM commercial_product
    WHERE Id = NEW.product;
    
    CASE v_cost_method
        WHEN 1 THEN
            SET v_general_cost = v_general_average_cost;
        WHEN 2 THEN
            SET v_general_cost = NEW.last_price_cost;
        WHEN 3 THEN
            SET v_general_cost = NEW.standard_cost;
        WHEN 4 THEN
            SET v_general_cost = v_general_by_batch_cost;
        ELSE
            SET v_general_cost = 1.111;
    END CASE;

    UPDATE commercial_product 
    SET 
        cost = v_general_cost,
        last_price_cost = NEW.last_price_cost,
        average_cost = v_general_average_cost,
        by_batch_cost = v_general_by_batch_cost,
        stock = v_total_quantity
    WHERE Id = NEW.product;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_product_tare`
--

DROP TABLE IF EXISTS `commercial_product_tare`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_product_tare` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `weight` decimal(10,5) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_providing_method`
--

DROP TABLE IF EXISTS `commercial_providing_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_providing_method` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_quotation_request_line`
--

DROP TABLE IF EXISTS `commercial_quotation_request_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_quotation_request_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_repartition_method`
--

DROP TABLE IF EXISTS `commercial_repartition_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_repartition_method` (
  `Id` int(10) unsigned NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  `description` varchar(255) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(255) DEFAULT NULL,
  `distribution_value` decimal(10,5) NOT NULL,
  `date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_revenue_stamp`
--

DROP TABLE IF EXISTS `commercial_revenue_stamp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_revenue_stamp` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` decimal(10,3) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_soldes`
--

DROP TABLE IF EXISTS `commercial_soldes`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_soldes` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `begining_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `active` tinyint(1) DEFAULT NULL,
  `discount` decimal(6,5) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`begining_date`),
  KEY `Index_3` (`end_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_soldes_product`
--

DROP TABLE IF EXISTS `commercial_soldes_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_soldes_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `soldes` int(10) unsigned NOT NULL,
  `product` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_soldes_product_1` (`soldes`),
  KEY `FK_commercial_soldes_product_2` (`product`),
  CONSTRAINT `FK_commercial_soldes_product_1` FOREIGN KEY (`soldes`) REFERENCES `commercial_soldes` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_soldes_product_2` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `commercial_soldes_product_current`
--

DROP TABLE IF EXISTS `commercial_soldes_product_current`;
/*!50001 DROP VIEW IF EXISTS `commercial_soldes_product_current`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `commercial_soldes_product_current` (
  `Id` int(10) unsigned,
  `discount` decimal(6,5),
  `product` int(10) unsigned,
  `begining_date` datetime,
  `end_date` datetime
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `commercial_soldes_product_discount_current`
--

DROP TABLE IF EXISTS `commercial_soldes_product_discount_current`;
/*!50001 DROP VIEW IF EXISTS `commercial_soldes_product_discount_current`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `commercial_soldes_product_discount_current` (
  `Id` int(10) unsigned,
  `discount` decimal(6,5),
  `product` int(10) unsigned,
  `begining_date` datetime,
  `end_date` datetime
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `commercial_stock`
--

DROP TABLE IF EXISTS `commercial_stock`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `piece_line` int(10) unsigned NOT NULL,
  `piece_type` varchar(45) NOT NULL,
  `theoretical_stock` decimal(10,3) NOT NULL,
  `actual_stock` decimal(10,3) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_entry`
--

DROP TABLE IF EXISTS `commercial_stock_entry`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_entry` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(200) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT '0',
  `agent` int(10) unsigned DEFAULT '0',
  `transport` int(10) unsigned DEFAULT '0',
  `driver` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_stock_entry_1` (`warehouse`),
  CONSTRAINT `FK_commercial_stock_entry_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_entry_line`
--

DROP TABLE IF EXISTS `commercial_stock_entry_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_entry_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(200) DEFAULT NULL,
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `cump` decimal(15,5) DEFAULT '0.00000',
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_stock_entry_line_6` (`tare`),
  CONSTRAINT `FK_commercial_stock_entry_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_mouvement`
--

DROP TABLE IF EXISTS `commercial_stock_mouvement`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_mouvement` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(200) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `warehouse_out` int(10) unsigned DEFAULT '0',
  `warehouse_in` int(10) unsigned DEFAULT '0',
  `stock_in` int(10) unsigned DEFAULT '0',
  `stock_out` int(10) unsigned DEFAULT '0',
  `agent` int(10) unsigned DEFAULT '0',
  `transport` int(10) unsigned DEFAULT '0',
  `driver` int(10) unsigned DEFAULT '0',
  `sale_order` int(10) unsigned DEFAULT NULL,
  `need_expression` int(10) unsigned DEFAULT NULL,
  `stock_mouvement` int(10) unsigned DEFAULT NULL,
  `production_order` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_stock_mouvement_1` (`warehouse_in`),
  KEY `FK_commercial_stock_mouvement_2` (`warehouse_out`),
  KEY `FK_commercial_stock_mouvement_3` (`sale_order`),
  KEY `FK_commercial_stock_mouvement_need_expression` (`need_expression`),
  KEY `FK_commercial_stock_mouvement_stock_mouvement` (`stock_mouvement`),
  KEY `FK_commercial_stock_mouvement_6` (`production_order`),
  CONSTRAINT `FK_commercial_stock_mouvement_6` FOREIGN KEY (`production_order`) REFERENCES `production_order` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_commercial_stock_mouvement_1` FOREIGN KEY (`warehouse_in`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_stock_mouvement_2` FOREIGN KEY (`warehouse_out`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_stock_mouvement_3` FOREIGN KEY (`sale_order`) REFERENCES `sale_order` (`Id`),
  CONSTRAINT `FK_commercial_stock_mouvement_need_expression` FOREIGN KEY (`need_expression`) REFERENCES `commercial_need_expression` (`Id`),
  CONSTRAINT `FK_commercial_stock_mouvement_stock_mouvement` FOREIGN KEY (`stock_mouvement`) REFERENCES `commercial_stock_mouvement` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_mouvement_line`
--

DROP TABLE IF EXISTS `commercial_stock_mouvement_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_mouvement_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(200) DEFAULT NULL,
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `cump` decimal(15,5) DEFAULT '0.00000',
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  `production_order` int(10) unsigned DEFAULT NULL,
  `production_fabrication` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_stock_mouvement_line_6` (`tare`),
  KEY `Index_3` (`product`),
  KEY `Index_4` (`piece`),
  KEY `FK_commercial_stock_mouvement_line_production_order` (`production_order`),
  KEY `FK_commercial_stock_mouvement_line_production_fabrication` (`production_fabrication`),
  CONSTRAINT `FK_commercial_stock_mouvement_line_production_order` FOREIGN KEY (`production_order`) REFERENCES `production_order` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_commercial_stock_mouvement_line_production_fabrication` FOREIGN KEY (`production_fabrication`) REFERENCES `production_fabrication` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_commercial_stock_mouvement_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_mouvement_state`
--

DROP TABLE IF EXISTS `commercial_stock_mouvement_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_mouvement_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(450) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_mouvement_state_log`
--

DROP TABLE IF EXISTS `commercial_stock_mouvement_state_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_mouvement_state_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `stock_mouvement` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_stock_mouvement_state_log_1` (`stock_mouvement`),
  KEY `FK_commercial_stock_mouvement_state_log_2` (`state`),
  KEY `FK_commercial_stock_mouvement_state_log_3` (`user`),
  CONSTRAINT `FK_commercial_stock_mouvement_state_log_1` FOREIGN KEY (`stock_mouvement`) REFERENCES `commercial_stock_mouvement` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_commercial_stock_mouvement_state_log_2` FOREIGN KEY (`state`) REFERENCES `commercial_stock_mouvement_state` (`Id`),
  CONSTRAINT `FK_commercial_stock_mouvement_state_log_3` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_out`
--

DROP TABLE IF EXISTS `commercial_stock_out`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_out` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(200) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT '0',
  `agent` int(10) unsigned DEFAULT '0',
  `transport` int(10) unsigned DEFAULT '0',
  `driver` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_stock_out_1` (`warehouse`),
  CONSTRAINT `FK_commercial_stock_out_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_stock_out_line`
--

DROP TABLE IF EXISTS `commercial_stock_out_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_stock_out_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(200) DEFAULT NULL,
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `cump` decimal(15,5) DEFAULT '0.00000',
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_stock_out_line_6` (`tare`),
  CONSTRAINT `FK_commercial_stock_out_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7760 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_supply_method`
--

DROP TABLE IF EXISTS `commercial_supply_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_supply_method` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_tax`
--

DROP TABLE IF EXISTS `commercial_tax`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_tax` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` decimal(10,5) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `percent` tinyint(1) DEFAULT NULL,
  `quantity_max` decimal(10,5) DEFAULT NULL,
  `tax_type` int(10) unsigned DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_tax_1` (`tax_type`),
  CONSTRAINT `FK_commercial_tax_1` FOREIGN KEY (`tax_type`) REFERENCES `commercial_tax_type` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_tax_type`
--

DROP TABLE IF EXISTS `commercial_tax_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_tax_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `level` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  `full_name` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_type`
--

DROP TABLE IF EXISTS `commercial_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_unite`
--

DROP TABLE IF EXISTS `commercial_unite`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_unite` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_vat`
--

DROP TABLE IF EXISTS `commercial_vat`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_vat` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` decimal(10,3) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_warehouse`
--

DROP TABLE IF EXISTS `commercial_warehouse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_warehouse` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `printer` varchar(255) DEFAULT NULL,
  `param_print_group_by_category` tinyint(1) DEFAULT '0',
  `number` varchar(45) DEFAULT NULL,
  `street` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `state` varchar(45) DEFAULT NULL,
  `country` varchar(45) DEFAULT NULL,
  `postal_code` varchar(45) DEFAULT NULL,
  `full_adress` varchar(1000) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_commercial_warehouse_partner` (`partner`),
  CONSTRAINT `FK_commercial_warehouse_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_commercial_warehouseOnInsert` AFTER INSERT ON `commercial_warehouse` FOR EACH ROW BEGIN
call insert_product_on_insert_warehouse(new.Id);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `commercial_warehouse_group`
--

DROP TABLE IF EXISTS `commercial_warehouse_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_warehouse_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` date DEFAULT NULL,
  `name` varchar(60) CHARACTER SET latin1 DEFAULT NULL,
  `memo` varchar(1000) CHARACTER SET latin1 DEFAULT NULL,
  `inventory_consult` tinyint(1) DEFAULT NULL,
  `inventory_save` tinyint(1) DEFAULT NULL,
  `inventory_validate` tinyint(1) DEFAULT NULL,
  `sale_shipping_consult` tinyint(1) DEFAULT NULL,
  `sale_shipping_save` tinyint(1) DEFAULT NULL,
  `sale_shipping_validate` tinyint(1) DEFAULT NULL,
  `purchase_shipping_consult` tinyint(1) DEFAULT NULL,
  `purchase_shipping_save` tinyint(1) DEFAULT NULL,
  `purchase_shipping_validate` tinyint(1) DEFAULT NULL,
  `stock_entry_consult` tinyint(1) DEFAULT NULL,
  `stock_entry_save` tinyint(1) DEFAULT NULL,
  `stock_entry_validate` tinyint(1) DEFAULT NULL,
  `stock_out_consult` tinyint(1) DEFAULT NULL,
  `stock_out_save` tinyint(1) DEFAULT NULL,
  `stock_out_validate` tinyint(1) DEFAULT NULL,
  `stock_movement_consult` tinyint(1) DEFAULT NULL,
  `stock_movement_save` tinyint(1) DEFAULT NULL,
  `stock_movement_validate` tinyint(1) DEFAULT NULL,
  `sale_credit_invoice_consult` tinyint(1) DEFAULT NULL,
  `sale_credit_invoice_save` tinyint(1) DEFAULT NULL,
  `sale_credit_invoice_validate` tinyint(1) DEFAULT NULL,
  `purchase_credit_invoice_consult` tinyint(1) DEFAULT NULL,
  `purchase_credit_invoice_save` tinyint(1) DEFAULT NULL,
  `purchase_credit_invoice_validate` tinyint(1) DEFAULT NULL,
  `need_expression_consult` tinyint(4) DEFAULT NULL,
  `need_expression_save` tinyint(4) DEFAULT NULL,
  `need_expression_validate` tinyint(4) DEFAULT NULL,
  `need_expression_decision` tinyint(1) DEFAULT NULL,
  `need_expression_employee` tinyint(1) DEFAULT NULL,
  `negative_stock_authorisation` tinyint(1) DEFAULT '1',
  `sale_shipping_return_consult` tinyint(4) DEFAULT NULL,
  `sale_shipping_return_save` tinyint(4) DEFAULT NULL,
  `sale_shipping_return_validate` tinyint(4) DEFAULT NULL,
  `purchase_shipping_return_consult` tinyint(4) DEFAULT NULL,
  `purchase_shipping_return_save` tinyint(4) DEFAULT NULL,
  `purchase_shipping_return_validate` tinyint(4) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_warehouse_user`
--

DROP TABLE IF EXISTS `commercial_warehouse_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_warehouse_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `enabled` tinyint(1) DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  `group` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `userIdFK` (`user`),
  KEY `warehouseIdFK` (`warehouse`),
  KEY `warehouse_group_IdFK` (`group`),
  CONSTRAINT `userIdFK` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `warehouseIdFK` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `warehouse_group_IdFK` FOREIGN KEY (`group`) REFERENCES `commercial_warehouse_group` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=22 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_withholding_tax`
--

DROP TABLE IF EXISTS `commercial_withholding_tax`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_withholding_tax` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `value` decimal(10,3) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `min_total_amount` decimal(10,3) DEFAULT NULL,
  `activated` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `commercial_withholding_tax_line`
--

DROP TABLE IF EXISTS `commercial_withholding_tax_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `commercial_withholding_tax_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `withholding_tax` int(10) unsigned NOT NULL,
  `piece_type` varchar(100) NOT NULL,
  `piece` int(10) unsigned NOT NULL,
  `amount` decimal(15,3) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `crm_opportunity`
--

DROP TABLE IF EXISTS `crm_opportunity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `crm_opportunity` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` mediumtext,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `delivred` tinyint(1) DEFAULT '0',
  `due_date` datetime DEFAULT NULL,
  `delivred_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `closing_date` datetime DEFAULT NULL,
  `purchase_probability` decimal(15,5) DEFAULT '0.00000',
  `to_invoice` tinyint(1) DEFAULT '0',
  `sales_team` int(10) unsigned DEFAULT '0',
  `state` int(10) unsigned DEFAULT '0',
  `quotation` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT NULL,
  `project_holder` int(10) unsigned DEFAULT '0',
  `dealer` int(10) unsigned DEFAULT '0',
  `parent` int(10) unsigned DEFAULT '0',
  `contact` int(10) unsigned DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `gps` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_crm_opportunity_1` (`contact`),
  KEY `FK_crm_opportunity_2` (`currency`),
  KEY `FK_crm_opportunity_3` (`order`),
  KEY `FK_crm_opportunity_4` (`socity`),
  CONSTRAINT `FK_crm_opportunity_4` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_crm_opportunity_1` FOREIGN KEY (`contact`) REFERENCES `commercial_partner_contact` (`Id`),
  CONSTRAINT `FK_crm_opportunity_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_crm_opportunity_3` FOREIGN KEY (`order`) REFERENCES `sale_order` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `crm_opportunity_line`
--

DROP TABLE IF EXISTS `crm_opportunity_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `crm_opportunity_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(200) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_tax1` (`tax1`),
  KEY `FK_tax2` (`tax2`),
  KEY `FK_tax3` (`tax3`),
  KEY `FK_tax4` (`tax4`),
  KEY `FK_tax5` (`tax5`),
  CONSTRAINT `FK_tax1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_tax2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_tax3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_tax4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_tax5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `crm_opportunity_state`
--

DROP TABLE IF EXISTS `crm_opportunity_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `crm_opportunity_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(450) CHARACTER SET latin1 DEFAULT NULL,
  `opportunity` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `crm_state`
--

DROP TABLE IF EXISTS `crm_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `crm_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(450) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_accident`
--

DROP TABLE IF EXISTS `fleet_accident`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_accident` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `type_acc` int(10) unsigned DEFAULT NULL,
  `employe_cont` int(10) unsigned DEFAULT NULL,
  `location` varchar(2000) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_accident_contrat` (`employe_cont`),
  KEY `FK_fleet_accident_type` (`type_acc`),
  KEY `FK_fleet_accident_employe` (`employe`),
  CONSTRAINT `FK_fleet_accident_contrat` FOREIGN KEY (`employe_cont`) REFERENCES `fleet_employee_contract` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_accident_employe` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_accident_type` FOREIGN KEY (`type_acc`) REFERENCES `fleet_accident_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_accident_type`
--

DROP TABLE IF EXISTS `fleet_accident_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_accident_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_administrative_document`
--

DROP TABLE IF EXISTS `fleet_administrative_document`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_administrative_document` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `coast_doc` decimal(10,0) DEFAULT NULL,
  `car` int(10) unsigned DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `purchase_shipping` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_administrative_document_1` (`car`),
  KEY `FK_fleet_administrative_type` (`type`),
  KEY `FK_fleet_administrative_document_product` (`product`),
  KEY `FK_fleet_administrative_document_partner` (`partner`),
  KEY `FK_fleet_administrative_document_sale_shipping` (`purchase_shipping`) USING BTREE,
  CONSTRAINT `FK_fleet_administrative_document_1` FOREIGN KEY (`car`) REFERENCES `fleet_car` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_administrative_document_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_administrative_document_product` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_administrative_document_purchase_shipping` FOREIGN KEY (`purchase_shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_administrative_type` FOREIGN KEY (`type`) REFERENCES `fleet_document_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_breakdown_type`
--

DROP TABLE IF EXISTS `fleet_breakdown_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_breakdown_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car`
--

DROP TABLE IF EXISTS `fleet_car`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `registration_plate` varchar(200) DEFAULT NULL,
  `chassis_number` varchar(200) DEFAULT NULL,
  `color` varchar(200) DEFAULT NULL,
  `mileage` float DEFAULT NULL,
  `model` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car_1` (`model`) USING BTREE,
  CONSTRAINT `FK_fleet_car_model` FOREIGN KEY (`model`) REFERENCES `fleet_car_model` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_breakdown`
--

DROP TABLE IF EXISTS `fleet_car_breakdown`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_breakdown` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `type_bd` int(10) unsigned DEFAULT NULL,
  `accident` int(10) unsigned DEFAULT NULL,
  `Car` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car_breakdown_accident` (`accident`),
  KEY `FK_fleet_car_breakdown_type` (`type_bd`),
  KEY `FK_fleet_car_breakdown_car` (`Car`),
  CONSTRAINT `FK_fleet_car_breakdown_accident` FOREIGN KEY (`accident`) REFERENCES `fleet_accident` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_breakdown_car` FOREIGN KEY (`Car`) REFERENCES `fleet_car` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_breakdown_type` FOREIGN KEY (`type_bd`) REFERENCES `fleet_breakdown_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_contract`
--

DROP TABLE IF EXISTS `fleet_car_contract`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_contract` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `type_cart` int(10) unsigned DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `purchase_shipping` int(10) unsigned DEFAULT NULL,
  `car` int(10) unsigned DEFAULT NULL,
  `total_amount` decimal(10,0) DEFAULT NULL,
  `disabled` tinyint(1) DEFAULT NULL,
  `disabled_date` datetime DEFAULT NULL,
  `sale_shipping` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_cartract_type` (`type_cart`) USING BTREE,
  KEY `FK_fleet_cartract_sale_shipping` (`purchase_shipping`) USING BTREE,
  KEY `FK_fleet_cartract_car` (`car`),
  KEY `FK_fleet_cartract_employe` (`employe`),
  KEY `FK_fleet_cartract_partner` (`partner`),
  KEY `FK_fleet_car_contract_sale` (`sale_shipping`),
  CONSTRAINT `FK_fleet_cartract_car` FOREIGN KEY (`car`) REFERENCES `fleet_car` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_cartract_employe` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_cartract_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_cartract_type` FOREIGN KEY (`type_cart`) REFERENCES `fleet_contract_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_contract_purchase` FOREIGN KEY (`purchase_shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_contract_sale` FOREIGN KEY (`sale_shipping`) REFERENCES `sale_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_fine`
--

DROP TABLE IF EXISTS `fleet_car_fine`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_fine` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `coast` decimal(10,0) DEFAULT NULL,
  `type_fine` int(10) unsigned DEFAULT NULL,
  `contrat` int(10) unsigned DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `purchase_shipping` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car_fine_contrat` (`contrat`),
  KEY `FK_fleet_car_fine_type` (`type_fine`) USING BTREE,
  KEY `FK_fleet_car_fine_employe` (`employe`),
  KEY `FK_fleet_car_fine_partner` (`partner`),
  KEY `FK_fleet_car_fine_product` (`product`),
  KEY `FK_fleet_car_fine_sale_shipping` (`purchase_shipping`) USING BTREE,
  CONSTRAINT `FK_fleet_car_fine_contrat` FOREIGN KEY (`contrat`) REFERENCES `fleet_employee_contract` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_fine_employe` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_fine_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_fine_product` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`),
  CONSTRAINT `FK_fleet_car_fine_sale_shipping` FOREIGN KEY (`purchase_shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_fine_type` FOREIGN KEY (`type_fine`) REFERENCES `fleet_fine_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_fuel_type`
--

DROP TABLE IF EXISTS `fleet_car_fuel_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_fuel_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car_fuel_type_partner` (`partner`),
  KEY `FK_fleet_car_fuel_type_productt` (`product`),
  CONSTRAINT `FK_fleet_car_fuel_type_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_fuel_type_productt` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_maintenance`
--

DROP TABLE IF EXISTS `fleet_car_maintenance`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_maintenance` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `coast` float DEFAULT NULL,
  `type_main` int(10) unsigned DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `car` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car_maintenance_type` (`type_main`),
  KEY `FK_fleet_car_maintenance_emmploye` (`employe`),
  KEY `FK_fleet_car_maintenance_car` (`car`),
  KEY `FK_fleet_car_maintenance_partner` (`partner`),
  CONSTRAINT `FK_fleet_car_maintenance_car` FOREIGN KEY (`car`) REFERENCES `fleet_car` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_maintenance_emmploye` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_maintenance_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_car_maintenance_type` FOREIGN KEY (`type_main`) REFERENCES `fleet_maintenance_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_mark`
--

DROP TABLE IF EXISTS `fleet_car_mark`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_mark` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=133 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_mileage`
--

DROP TABLE IF EXISTS `fleet_car_mileage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_mileage` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `kilometrage` int(10) unsigned DEFAULT NULL,
  `car` int(10) unsigned NOT NULL,
  `consomption` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car_mileage_car` (`car`),
  KEY `FK_fleet_car_mileage_consomption` (`consomption`),
  CONSTRAINT `FK_fleet_car_mileage_car` FOREIGN KEY (`car`) REFERENCES `fleet_car` (`Id`),
  CONSTRAINT `FK_fleet_car_mileage_consomption` FOREIGN KEY (`consomption`) REFERENCES `fleet_fuel_consomption` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_model`
--

DROP TABLE IF EXISTS `fleet_car_model`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_model` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `doors_number` int(10) unsigned DEFAULT NULL,
  `places_number` int(10) unsigned DEFAULT NULL,
  `transmission` varchar(200) DEFAULT NULL,
  `horse_power` int(10) unsigned DEFAULT NULL,
  `year` int(4) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `fuel` int(10) unsigned DEFAULT NULL,
  `mark` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car_model_1` (`fuel`),
  KEY `FK_fleet_car_marque` (`mark`) USING BTREE,
  CONSTRAINT `FK_fleet_car_model_mark` FOREIGN KEY (`mark`) REFERENCES `fleet_car_mark` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2682 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_car_sell_contract`
--

DROP TABLE IF EXISTS `fleet_car_sell_contract`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_car_sell_contract` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `sell_price` decimal(10,0) DEFAULT NULL,
  `car` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_car` (`car`),
  CONSTRAINT `FK_fleet_car` FOREIGN KEY (`car`) REFERENCES `fleet_car` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_contract_type`
--

DROP TABLE IF EXISTS `fleet_contract_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_contract_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `begin_date` tinyint(1) DEFAULT NULL,
  `end_date` tinyint(1) DEFAULT NULL,
  `employe` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_document_type`
--

DROP TABLE IF EXISTS `fleet_document_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_document_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_document_type_product` (`product`),
  KEY `FK_fleet_document_type_partner` (`partner`),
  CONSTRAINT `FK_fleet_document_type_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_document_type_product` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB AUTO_INCREMENT=10 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_employee_contract`
--

DROP TABLE IF EXISTS `fleet_employee_contract`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_employee_contract` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `car` int(10) unsigned DEFAULT NULL,
  `employee` int(10) unsigned DEFAULT NULL,
  `validation` tinyint(1) DEFAULT NULL,
  `disabled` tinyint(1) DEFAULT NULL,
  `disabled_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_employee_contract_car` (`car`),
  KEY `FK_fleet_employee_contract_employee` (`employee`),
  CONSTRAINT `FK_fleet_employee_contract_car` FOREIGN KEY (`car`) REFERENCES `fleet_car` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_employee_contract_employee` FOREIGN KEY (`employee`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_fine_type`
--

DROP TABLE IF EXISTS `fleet_fine_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_fine_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `price` decimal(10,0) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_fine_type_product` (`product`),
  KEY `FK_fleet_fine_type_partner` (`partner`),
  CONSTRAINT `FK_fleet_fine_type_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fine_type_product` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_fuel_card`
--

DROP TABLE IF EXISTS `fleet_fuel_card`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_fuel_card` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `ammount` decimal(10,0) DEFAULT NULL,
  `contract` int(10) unsigned DEFAULT NULL,
  `reference` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_fuel_card_contract` (`contract`),
  CONSTRAINT `FK_fleet_fuel_card_contract` FOREIGN KEY (`contract`) REFERENCES `fleet_employee_contract` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_fuel_consomption`
--

DROP TABLE IF EXISTS `fleet_fuel_consomption`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_fuel_consomption` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `coast` decimal(10,0) DEFAULT NULL,
  `card` int(10) unsigned DEFAULT NULL,
  `fuel_type` int(10) unsigned DEFAULT NULL,
  `purchase_shipping` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(10,0) DEFAULT NULL,
  `contract` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_fuel_consomption_card` (`card`),
  KEY `FK_fleet_fuel_consomption_fuel_type` (`fuel_type`),
  KEY `FK_fleet_fuel_consomption_contrat` (`contract`),
  KEY `FK_fleet_fuel_consomption_partner` (`partner`),
  KEY `FK_fleet_fuel_consomption_product` (`product`),
  KEY `FK_fleet_fuel_consomption_employe` (`employe`),
  KEY `FK_fleet_fuel_consomption_payment` (`payment_method`),
  KEY `FK_fleet_fuel_consomption_sale_chipping` (`purchase_shipping`) USING BTREE,
  CONSTRAINT `FK_fleet_fuel_consomption_card` FOREIGN KEY (`card`) REFERENCES `fleet_fuel_card` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_consomption_contrat` FOREIGN KEY (`contract`) REFERENCES `fleet_employee_contract` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_consomption_employe` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_consomption_fuel_type` FOREIGN KEY (`fuel_type`) REFERENCES `fleet_car_fuel_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_consomption_partner` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_consomption_payment` FOREIGN KEY (`payment_method`) REFERENCES `commercial_payment_method` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_consomption_product` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_consomption_purchase_chipping` FOREIGN KEY (`purchase_shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_fuel_log`
--

DROP TABLE IF EXISTS `fleet_fuel_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_fuel_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `consomption` int(10) unsigned DEFAULT NULL,
  `input` int(10) unsigned DEFAULT NULL,
  `card` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_fuel_log_card` (`consomption`) USING BTREE,
  KEY `FK_fleet_fuel_log_input` (`input`),
  KEY `FK_fleet_fuelcard` (`card`),
  CONSTRAINT `FK_fleet_fuelcard` FOREIGN KEY (`card`) REFERENCES `fleet_fuel_card` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_log_consomption` FOREIGN KEY (`consomption`) REFERENCES `fleet_fuel_consomption` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_fleet_fuel_log_input` FOREIGN KEY (`input`) REFERENCES `fleet_log_input` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_log_input`
--

DROP TABLE IF EXISTS `fleet_log_input`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_log_input` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `sum` decimal(10,0) DEFAULT NULL,
  `card` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_fleet_log_input_card` (`card`),
  CONSTRAINT `FK_fleet_log_input_card` FOREIGN KEY (`card`) REFERENCES `fleet_fine_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `fleet_maintenance_type`
--

DROP TABLE IF EXISTS `fleet_maintenance_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fleet_maintenance_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `grh_employee`
--

DROP TABLE IF EXISTS `grh_employee`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `grh_employee` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `first_name` varchar(45) DEFAULT NULL,
  `last_name` varchar(45) DEFAULT NULL,
  `birth_date` datetime DEFAULT NULL,
  `birth_city` varchar(45) DEFAULT NULL,
  `birth_country` varchar(45) DEFAULT NULL,
  `gender` varchar(45) DEFAULT NULL,
  `country` varchar(45) DEFAULT NULL,
  `state` varchar(45) DEFAULT NULL,
  `city` varchar(45) DEFAULT NULL,
  `street` varchar(45) DEFAULT NULL,
  `number` int(10) unsigned DEFAULT NULL,
  `postal_code` int(10) unsigned DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `picture` blob,
  `note` varchar(45) DEFAULT NULL,
  `death_date` datetime DEFAULT NULL,
  `is_student` tinyint(1) DEFAULT NULL,
  `is_handicaped` tinyint(1) DEFAULT NULL,
  `security_coverage` int(10) unsigned DEFAULT NULL,
  `is_responsible` tinyint(3) unsigned DEFAULT NULL,
  `distance_home_work` decimal(10,0) DEFAULT NULL,
  `IdContrat` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_note`
--

DROP TABLE IF EXISTS `helpdesk_note`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_note` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `title` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `ticket` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_helpdesk_note_ticket` (`ticket`),
  KEY `FK_helpdesk_note_user` (`user`),
  CONSTRAINT `FK_helpdesk_note_ticket` FOREIGN KEY (`ticket`) REFERENCES `helpdesk_ticket` (`Id`),
  CONSTRAINT `FK_helpdesk_note_user` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_service`
--

DROP TABLE IF EXISTS `helpdesk_service`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_service` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `head` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_helpdesk_service_1` (`head`),
  CONSTRAINT `FK_helpdesk_service_1` FOREIGN KEY (`head`) REFERENCES `hr_employe` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_service_employe`
--

DROP TABLE IF EXISTS `helpdesk_service_employe`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_service_employe` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `service` int(10) unsigned NOT NULL,
  `employe` int(10) unsigned NOT NULL,
  `begin_date` datetime NOT NULL,
  `end_date` datetime DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_helpdesk_service_employe_1` (`employe`),
  KEY `FK_helpdesk_service_employe_2` (`service`),
  CONSTRAINT `FK_helpdesk_service_employe_1` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_helpdesk_service_employe_2` FOREIGN KEY (`service`) REFERENCES `helpdesk_service` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_state`
--

DROP TABLE IF EXISTS `helpdesk_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `color` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_ticket`
--

DROP TABLE IF EXISTS `helpdesk_ticket`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_ticket` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `description` varchar(2000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `ticket_type` int(10) unsigned DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `creator` int(10) unsigned DEFAULT NULL,
  `service` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `product_reference` varchar(100) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `partner_contact` int(10) unsigned DEFAULT NULL,
  `time` varchar(200) DEFAULT NULL,
  `priority` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `estimated_closing_date` datetime DEFAULT NULL,
  `open_date` datetime DEFAULT NULL,
  `close_date` datetime DEFAULT NULL,
  `name` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_helpdesk_ticket_2` (`ticket_type`),
  KEY `creator_foreignKey` (`creator`),
  KEY `FK_helpdesk_ticket_3` (`priority`),
  KEY `FK_helpdesk_ticket_4` (`service`),
  KEY `FK_helpdesk_ticket_5` (`partner`),
  KEY `FK_helpdesk_ticket_6` (`product`),
  KEY `FK_helpdesk_ticket_8` (`partner_contact`),
  KEY `FK_helpdesk_ticket_state` (`state`),
  KEY `FK_helpdesk_ticket_9` (`employe`),
  CONSTRAINT `creator_foreignKey` FOREIGN KEY (`creator`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_helpdesk_ticket_1` FOREIGN KEY (`ticket_type`) REFERENCES `helpdesk_ticket_type` (`Id`),
  CONSTRAINT `FK_helpdesk_ticket_3` FOREIGN KEY (`priority`) REFERENCES `helpdesk_ticket_priority` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_helpdesk_ticket_4` FOREIGN KEY (`service`) REFERENCES `helpdesk_service` (`Id`),
  CONSTRAINT `FK_helpdesk_ticket_5` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`),
  CONSTRAINT `FK_helpdesk_ticket_6` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`),
  CONSTRAINT `FK_helpdesk_ticket_7` FOREIGN KEY (`partner_contact`) REFERENCES `commercial_partner_contact` (`Id`),
  CONSTRAINT `FK_helpdesk_ticket_9` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_helpdesk_ticket_state` FOREIGN KEY (`state`) REFERENCES `helpdesk_state` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_ticket_employe`
--

DROP TABLE IF EXISTS `helpdesk_ticket_employe`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_ticket_employe` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `employe` int(10) unsigned DEFAULT NULL,
  `ticket` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime NOT NULL,
  `end_date` datetime DEFAULT NULL,
  `time` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(100) DEFAULT NULL,
  `note` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_helpdesk_ticket_employe_1` (`ticket`),
  KEY `FK_helpdesk_ticket_employe_2` (`employe`),
  CONSTRAINT `FK_helpdesk_ticket_employe_1` FOREIGN KEY (`ticket`) REFERENCES `helpdesk_ticket` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_helpdesk_ticket_employe_2` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_ticket_priority`
--

DROP TABLE IF EXISTS `helpdesk_ticket_priority`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_ticket_priority` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `label` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `color` int(11) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_ticket_service`
--

DROP TABLE IF EXISTS `helpdesk_ticket_service`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_ticket_service` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `service` int(10) unsigned DEFAULT NULL,
  `ticket` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime NOT NULL,
  `end_date` datetime DEFAULT NULL,
  `time` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_ticket_state`
--

DROP TABLE IF EXISTS `helpdesk_ticket_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_ticket_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ticket` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `begin_date` datetime NOT NULL,
  `end_date` datetime DEFAULT NULL,
  `time` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_helpdesk_ticket_state_1` (`ticket`),
  KEY `FK_helpdesk_ticket_state_2` (`state`),
  CONSTRAINT `FK_helpdesk_ticket_state_1` FOREIGN KEY (`ticket`) REFERENCES `helpdesk_ticket` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_helpdesk_ticket_state_2` FOREIGN KEY (`state`) REFERENCES `helpdesk_state` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `helpdesk_ticket_type`
--

DROP TABLE IF EXISTS `helpdesk_ticket_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `helpdesk_ticket_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_bonus`
--

DROP TABLE IF EXISTS `hr_bonus`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_bonus` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `contract` int(10) unsigned NOT NULL DEFAULT '0',
  `date` datetime NOT NULL,
  `type` int(10) unsigned NOT NULL DEFAULT '0',
  `amount` decimal(15,5) NOT NULL,
  `description` varchar(2000) DEFAULT NULL,
  `validated` int(10) unsigned NOT NULL DEFAULT '0',
  `period` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`contract`),
  KEY `Index_3` (`type`),
  KEY `Index_4` (`period`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_bonus_type`
--

DROP TABLE IF EXISTS `hr_bonus_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_bonus_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_contract`
--

DROP TABLE IF EXISTS `hr_contract`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_contract` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `employe` int(10) unsigned DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `beginning_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `net_salary` decimal(15,5) DEFAULT NULL,
  `day_off_number` decimal(15,5) DEFAULT '0.00000',
  `payment_method` int(10) unsigned DEFAULT NULL,
  `week_hour` decimal(15,5) DEFAULT NULL,
  `additional_hour` tinyint(1) DEFAULT NULL,
  `additional_hour_coef` decimal(15,5) DEFAULT '1.00000',
  `less_hour` tinyint(1) DEFAULT NULL,
  `disabled` tinyint(1) DEFAULT '0',
  `disabled_date` datetime DEFAULT NULL,
  `salary_calcule_type` int(10) unsigned DEFAULT NULL COMMENT 'calcule par heur ou par jour',
  `validated` tinyint(1) DEFAULT '0',
  `description` varchar(2000) DEFAULT NULL,
  `day_hour` decimal(15,5) DEFAULT '8.00000',
  `unity_number_calcule_type` int(10) unsigned DEFAULT '1' COMMENT '1 absence 2 presence',
  `annual_bonus_coef` decimal(15,5) DEFAULT '1.00000',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`beginning_date`),
  KEY `Index_3` (`end_date`),
  KEY `Index_4` (`employe`),
  KEY `Index_5` (`type`),
  KEY `Index_6` (`salary_calcule_type`),
  KEY `Index_7` (`unity_number_calcule_type`),
  CONSTRAINT `FK_hr_contract_1` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_contract_salary_calcul_type`
--

DROP TABLE IF EXISTS `hr_contract_salary_calcul_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_contract_salary_calcul_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_contract_type`
--

DROP TABLE IF EXISTS `hr_contract_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_contract_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `end_date` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_day`
--

DROP TABLE IF EXISTS `hr_day`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_day` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_day_of_exercice`
--

DROP TABLE IF EXISTS `hr_day_of_exercice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_day_of_exercice` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `exercice` int(10) unsigned NOT NULL,
  `contract` int(10) unsigned NOT NULL,
  `day_off_number` decimal(15,1) NOT NULL DEFAULT '0.0',
  `day_off_use` decimal(15,1) NOT NULL DEFAULT '0.0',
  `exercice_day_number` decimal(15,1) NOT NULL DEFAULT '0.0',
  `pay_slip_exercice_day_number` decimal(15,1) NOT NULL DEFAULT '0.0',
  `pay_slip_day_off_number` decimal(15,1) NOT NULL DEFAULT '0.0',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`exercice`),
  KEY `Index_3` (`contract`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_day_off`
--

DROP TABLE IF EXISTS `hr_day_off`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_day_off` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `date` datetime NOT NULL,
  `start_date` datetime NOT NULL,
  `end_date` datetime NOT NULL,
  `number` decimal(15,1) NOT NULL DEFAULT '0.0',
  `contract` int(10) unsigned NOT NULL DEFAULT '0',
  `exercice` int(10) unsigned NOT NULL DEFAULT '0',
  `description` varchar(1000) DEFAULT NULL,
  `day_off_request` int(10) unsigned DEFAULT NULL,
  `day_off_report` int(10) unsigned NOT NULL DEFAULT '0',
  `day_off_type` int(10) unsigned NOT NULL DEFAULT '0',
  `validated` tinyint(1) NOT NULL DEFAULT '0',
  `period` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`start_date`),
  KEY `Index_3` (`end_date`),
  KEY `Index_4` (`contract`),
  KEY `Index_5` (`exercice`),
  KEY `Index_6` (`day_off_request`),
  KEY `Index_7` (`day_off_report`),
  KEY `Index_8` (`day_off_type`),
  KEY `Index_9` (`period`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_day_off_request`
--

DROP TABLE IF EXISTS `hr_day_off_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_day_off_request` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `date` datetime NOT NULL,
  `contract` int(10) unsigned NOT NULL,
  `start_date` datetime NOT NULL,
  `end_date` datetime NOT NULL,
  `number` decimal(15,1) NOT NULL DEFAULT '0.0',
  `description` varchar(1000) DEFAULT NULL,
  `day_off_type` int(10) unsigned NOT NULL,
  `state` int(10) unsigned NOT NULL DEFAULT '0',
  `decision_date` datetime DEFAULT NULL,
  `validated` tinyint(1) NOT NULL DEFAULT '0',
  `description_decision` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`contract`),
  KEY `Index_3` (`start_date`),
  KEY `Index_4` (`end_date`),
  KEY `Index_5` (`day_off_type`),
  KEY `Index_6` (`state`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_day_off_state`
--

DROP TABLE IF EXISTS `hr_day_off_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_day_off_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_day_off_type`
--

DROP TABLE IF EXISTS `hr_day_off_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_day_off_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  `minus` tinyint(1) NOT NULL DEFAULT '1' COMMENT 'supprimer les jours depuis total conge',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_department`
--

DROP TABLE IF EXISTS `hr_department`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_department` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `name` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `description` varchar(2000) CHARACTER SET latin1 DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_department_employe`
--

DROP TABLE IF EXISTS `hr_department_employe`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_department_employe` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `department` int(10) unsigned DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `assignment_date` datetime DEFAULT NULL,
  `memo` varchar(2000) CHARACTER SET latin1 DEFAULT NULL,
  `activate` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`department`),
  KEY `Index_3` (`employe`),
  KEY `Index_4` (`assignment_date`),
  CONSTRAINT `FK_hr_department_employe_1` FOREIGN KEY (`department`) REFERENCES `hr_department` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_hr_department_employe_2` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_department_public_holiday`
--

DROP TABLE IF EXISTS `hr_department_public_holiday`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_department_public_holiday` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `department` int(10) unsigned NOT NULL,
  `public_holiday` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`department`),
  KEY `Index_3` (`public_holiday`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_deposit`
--

DROP TABLE IF EXISTS `hr_deposit`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_deposit` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT '0.00000',
  `description` varchar(2000) DEFAULT NULL,
  `deposit_request` int(10) unsigned DEFAULT NULL,
  `contract` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned NOT NULL DEFAULT '0',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `validated` tinyint(1) DEFAULT NULL,
  `deposit_type` int(10) unsigned DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`deposit_request`),
  KEY `Index_3` (`contract`),
  KEY `Index_4` (`deposit_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_deposit_line`
--

DROP TABLE IF EXISTS `hr_deposit_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_deposit_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `deposit` int(10) unsigned NOT NULL,
  `period` int(10) unsigned NOT NULL,
  `amount` decimal(15,5) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`deposit`),
  KEY `Index_3` (`period`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_deposit_request`
--

DROP TABLE IF EXISTS `hr_deposit_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_deposit_request` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `descrption` varchar(2000) DEFAULT NULL,
  `contract` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `state_description` varchar(2000) DEFAULT NULL,
  `decision_date` datetime DEFAULT NULL,
  `deposit_type` int(10) unsigned DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`contract`),
  KEY `Index_3` (`state`),
  KEY `Index_4` (`deposit_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_deposit_request_line`
--

DROP TABLE IF EXISTS `hr_deposit_request_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_deposit_request_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `deposit_request` int(10) unsigned NOT NULL,
  `period` int(10) unsigned NOT NULL,
  `amount` decimal(15,5) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`deposit_request`),
  KEY `Index_3` (`period`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_deposit_state`
--

DROP TABLE IF EXISTS `hr_deposit_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_deposit_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_deposit_type`
--

DROP TABLE IF EXISTS `hr_deposit_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_deposit_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_employe`
--

DROP TABLE IF EXISTS `hr_employe`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_employe` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `job_position` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `actif` tinyint(1) DEFAULT NULL,
  `point_tolerance` decimal(15,5) DEFAULT '15.00000',
  PRIMARY KEY (`Id`),
  KEY `FK_hr_employe_position` (`job_position`),
  KEY `FK_hr_employe_user` (`user`),
  CONSTRAINT `FK_hr_employe_1` FOREIGN KEY (`Id`) REFERENCES `atooerp_person` (`Id`),
  CONSTRAINT `FK_hr_employe_position` FOREIGN KEY (`job_position`) REFERENCES `hr_job_position` (`Id`),
  CONSTRAINT `FK_hr_employe_user` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3205 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_employe_planning`
--

DROP TABLE IF EXISTS `hr_employe_planning`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_employe_planning` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `employe` int(10) unsigned NOT NULL,
  `planning` int(10) unsigned NOT NULL,
  `start_date` datetime NOT NULL,
  `description` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`employe`),
  KEY `Index_3` (`planning`),
  KEY `Index_4` (`start_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_employe_point`
--

DROP TABLE IF EXISTS `hr_employe_point`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_employe_point` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `enroll_number` varchar(45) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `finger_print` int(10) unsigned DEFAULT NULL,
  `assignment_date` datetime DEFAULT NULL,
  `memo` varchar(450) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_hr_employe_point_employe` (`employe`),
  KEY `FK_hr_employe_point_FP` (`finger_print`),
  CONSTRAINT `FK_hr_employe_point_FP` FOREIGN KEY (`finger_print`) REFERENCES `hr_finger_print` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_exercice`
--

DROP TABLE IF EXISTS `hr_exercice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_exercice` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `beginning_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  UNIQUE KEY `Index_2` (`beginning_date`),
  UNIQUE KEY `Index_3` (`end_date`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_exercice_score`
--

DROP TABLE IF EXISTS `hr_exercice_score`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_exercice_score` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `exercice` int(10) unsigned NOT NULL,
  `contract` int(10) unsigned NOT NULL,
  `score` decimal(15,5) NOT NULL,
  `note` varchar(2000) DEFAULT NULL,
  `pay_slip` int(11) NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`exercice`),
  KEY `Index_3` (`contract`),
  KEY `Index_4` (`pay_slip`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_finger_print`
--

DROP TABLE IF EXISTS `hr_finger_print`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_finger_print` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `FPtype` int(10) unsigned DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `iFPAlg` int(10) unsigned DEFAULT NULL,
  `iFaceAlg` int(10) unsigned DEFAULT NULL,
  `sSN` varchar(450) DEFAULT NULL,
  `key` varchar(45) DEFAULT NULL,
  `ip` varchar(45) DEFAULT NULL,
  `port` varchar(45) DEFAULT NULL,
  `sDeviceName` varchar(45) DEFAULT NULL,
  `enabled` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_hr_finger_print_type` (`FPtype`) USING BTREE,
  CONSTRAINT `FK_hr_finger_print_type` FOREIGN KEY (`FPtype`) REFERENCES `hr_finger_print_type` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_finger_print_type`
--

DROP TABLE IF EXISTS `hr_finger_print_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_finger_print_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_job_position`
--

DROP TABLE IF EXISTS `hr_job_position`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_job_position` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(200) DEFAULT NULL,
  `customer_agent` tinyint(1) DEFAULT NULL,
  `supplier_agent` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=12 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_pay_slip`
--

DROP TABLE IF EXISTS `hr_pay_slip`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_pay_slip` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `contract` int(10) unsigned DEFAULT NULL,
  `period` int(10) unsigned DEFAULT NULL,
  `unite_number` decimal(15,3) DEFAULT NULL,
  `additional_hour` decimal(15,3) DEFAULT NULL,
  `less_hour` decimal(15,3) DEFAULT NULL,
  `bonus` decimal(15,3) DEFAULT NULL,
  `day_off` decimal(15,3) DEFAULT NULL,
  `net_salary` decimal(15,3) DEFAULT NULL,
  `deposit` decimal(15,3) DEFAULT NULL,
  `net_pay` decimal(15,3) DEFAULT NULL,
  `note` varchar(2000) DEFAULT NULL,
  `paied_amount` decimal(15,3) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `net_unity_number` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`contract`),
  KEY `Index_3` (`period`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_period`
--

DROP TABLE IF EXISTS `hr_period`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_period` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `beginning_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `exercice` int(10) unsigned DEFAULT NULL,
  `day_number` decimal(10,3) DEFAULT '26.000',
  `period_type` int(10) unsigned DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`beginning_date`),
  KEY `Index_3` (`end_date`),
  KEY `Index_4` (`exercice`),
  KEY `Index_5` (`period_type`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_period_type`
--

DROP TABLE IF EXISTS `hr_period_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_period_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) CHARACTER SET latin1 NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_planning`
--

DROP TABLE IF EXISTS `hr_planning`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_planning` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_planning_line`
--

DROP TABLE IF EXISTS `hr_planning_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_planning_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `entry` datetime NOT NULL,
  `start_entry` datetime NOT NULL,
  `end_entry` datetime NOT NULL,
  `out` datetime NOT NULL,
  `start_out` datetime NOT NULL,
  `end_out` datetime NOT NULL,
  `planning` int(10) unsigned NOT NULL,
  `day` int(10) unsigned NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  `day_hour` decimal(15,5) NOT NULL DEFAULT '8.00000',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`entry`),
  KEY `Index_3` (`start_entry`),
  KEY `Index_4` (`end_entry`),
  KEY `Index_5` (`out`),
  KEY `Index_6` (`start_out`),
  KEY `Index_7` (`end_out`),
  KEY `Index_8` (`planning`),
  KEY `Index_9` (`day`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_point`
--

DROP TABLE IF EXISTS `hr_point`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_point` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `InOutMode` int(10) unsigned DEFAULT NULL,
  `finger_print` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `enroll` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`date`),
  KEY `Index_3` (`employe`),
  KEY `FK_hr_point_fp` (`finger_print`),
  KEY `FK_hr_point_state` (`state`),
  CONSTRAINT `FK_hr_point_emp` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_hr_point_fp` FOREIGN KEY (`finger_print`) REFERENCES `hr_finger_print` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_hr_point_state` FOREIGN KEY (`state`) REFERENCES `hr_point_state` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_point_state`
--

DROP TABLE IF EXISTS `hr_point_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_point_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(405) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_presence`
--

DROP TABLE IF EXISTS `hr_presence`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_presence` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `planning_line` int(10) unsigned DEFAULT '0',
  `employe` int(10) unsigned DEFAULT NULL,
  `beginning_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `check` tinyint(1) DEFAULT NULL,
  `duration` decimal(15,5) DEFAULT '0.00000',
  `description` varchar(2000) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `period` int(10) unsigned DEFAULT '0',
  `contract` int(10) unsigned DEFAULT '0',
  `point_in` int(10) unsigned DEFAULT NULL,
  `point_out` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`employe`),
  KEY `Index_3` (`beginning_date`),
  KEY `Index_4` (`end_date`),
  KEY `Index_5` (`period`),
  KEY `Index_6` (`contract`),
  KEY `Index_7` (`planning_line`),
  KEY `FK_hr_presence_1` (`point_in`),
  KEY `FK_hr_presence_2` (`point_out`),
  CONSTRAINT `FK_hr_presence_1` FOREIGN KEY (`point_in`) REFERENCES `hr_point` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_hr_presence_2` FOREIGN KEY (`point_out`) REFERENCES `hr_point` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `hr_public_holiday`
--

DROP TABLE IF EXISTS `hr_public_holiday`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `hr_public_holiday` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `name` varchar(45) NOT NULL,
  `date` datetime NOT NULL,
  `exercice` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`exercice`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_profile`
--

DROP TABLE IF EXISTS `marketing_profile`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `enabled` tinyint(1) DEFAULT '1',
  `type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE,
  UNIQUE KEY `Index_3` (`name`),
  KEY `FK_marketing_profile_1` (`parent`),
  KEY `FK_marketing_profile_2` (`type`),
  CONSTRAINT `FK_marketing_profile_1` FOREIGN KEY (`parent`) REFERENCES `marketing_profile` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_marketing_profile_2` FOREIGN KEY (`type`) REFERENCES `marketing_profile_type` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_profile_attribut`
--

DROP TABLE IF EXISTS `marketing_profile_attribut`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile_attribut` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `label` varchar(45) DEFAULT NULL,
  `editor` int(10) unsigned DEFAULT NULL,
  `attribut_type` int(10) unsigned DEFAULT NULL,
  `profile` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `attribut_rank` int(10) unsigned DEFAULT NULL,
  `is_null` tinyint(1) DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_profile_attribut_1` (`attribut_type`),
  KEY `FK_marketing_profile_attribut_3` (`editor`) USING BTREE,
  KEY `FK_marketing_profile_attribut_2` (`profile`),
  CONSTRAINT `FK_marketing_profile_attribut_1` FOREIGN KEY (`attribut_type`) REFERENCES `atooerp_type` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_2` FOREIGN KEY (`profile`) REFERENCES `marketing_profile` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_3` FOREIGN KEY (`editor`) REFERENCES `atooerp_input_editors` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_profile_attribut_value`
--

DROP TABLE IF EXISTS `marketing_profile_attribut_value`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile_attribut_value` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `attribut` int(10) unsigned DEFAULT NULL,
  `profile_instance` int(10) unsigned DEFAULT NULL,
  `string_value` varchar(1000) DEFAULT NULL,
  `int_value` int(10) unsigned DEFAULT NULL,
  `date_value` datetime DEFAULT NULL,
  `decimal_value` decimal(10,3) DEFAULT NULL,
  `blob_value` blob,
  `boolean_value` tinyint(1) DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_profile_attribut_value_1` (`profile_instance`),
  KEY `FK_marketing_profile_attribut_value_2` (`attribut`),
  KEY `FK_marketing_profile_attribut_value_3` (`type`),
  CONSTRAINT `FK_marketing_profile_attribut_value_1` FOREIGN KEY (`profile_instance`) REFERENCES `marketing_profile_instances` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_2` FOREIGN KEY (`attribut`) REFERENCES `marketing_profile_attribut` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_3` FOREIGN KEY (`type`) REFERENCES `atooerp_type_element` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_profile_attribut_value_temp`
--

DROP TABLE IF EXISTS `marketing_profile_attribut_value_temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile_attribut_value_temp` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `string_value` varchar(1000) DEFAULT NULL,
  `attribut_value` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `int_value` int(10) unsigned DEFAULT NULL,
  `boolean_value` tinyint(1) DEFAULT NULL,
  `date_value` datetime DEFAULT NULL,
  `blob_value` blob,
  `decimal_value` decimal(10,3) DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `attribut_name` varchar(45) DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `profile_instance_temp` int(10) unsigned DEFAULT NULL,
  `profile_attribute` int(10) unsigned DEFAULT NULL,
  `partner_temp` int(10) unsigned DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE,
  KEY `FK_marketing_profile_attribut_value_temp_2` (`attribut_value`),
  KEY `FK_marketing_profile_attribut_value_temp_1` (`user`) USING BTREE,
  KEY `FK_marketing_profile_attribut_value_temp_3` (`type`),
  KEY `FK_marketing_profile_attribut_value_temp_4` (`state`),
  KEY `FK_marketing_profile_attribut_value_temp_5` (`partner`),
  KEY `FK_marketing_profile_attribut_value_temp_6` (`employe`),
  KEY `FK_marketing_profile_attribut_value_temp_7` (`profile_instance_temp`) USING BTREE,
  KEY `FK_marketing_profile_attribut_value_temp_8` (`profile_attribute`),
  KEY `FK_marketing_profile_attribut_value_temp_9` (`partner_temp`),
  KEY `FK_marketing_profile_attribut_value_temp_10` (`person`),
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_1` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_10` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_11` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_3` FOREIGN KEY (`type`) REFERENCES `atooerp_type_element` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_4` FOREIGN KEY (`state`) REFERENCES `marketing_profile_state` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_6` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_7` FOREIGN KEY (`profile_instance_temp`) REFERENCES `marketing_profile_instance_temp` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_8` FOREIGN KEY (`profile_attribute`) REFERENCES `marketing_profile_attribut` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_attribut_value_temp_9` FOREIGN KEY (`partner_temp`) REFERENCES `commercial_partner_temp` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_profile_instance_temp`
--

DROP TABLE IF EXISTS `marketing_profile_instance_temp`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile_instance_temp` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `profile` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `employe` int(10) unsigned DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `partner_temp` int(10) unsigned DEFAULT NULL,
  `instance` int(10) unsigned DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(200) DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE,
  KEY `FK_marketing_instance_profile_temp_1` (`profile`),
  KEY `FK_marketing_instance_profile_temp_2` (`partner`),
  KEY `FK_marketing_instance_profile_temp_3` (`person`),
  KEY `FK_marketing_instance_profile_temp_4` (`user`),
  KEY `FK_marketing_instance_profile_temp_5` (`employe`),
  KEY `FK_marketing_instance_profile_temp_6` (`state`),
  KEY `FK_marketing_instance_profile_temp_7` (`instance`),
  KEY `FK_marketing_profile_instance_temp_7` (`partner_temp`),
  CONSTRAINT `FK_marketing_instance_profile_temp_2` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_instance_profile_temp_3` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_instance_profile_temp_4` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_instance_profile_temp_5` FOREIGN KEY (`employe`) REFERENCES `hr_employe` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_instance_profile_temp_6` FOREIGN KEY (`state`) REFERENCES `marketing_profile_state` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_instance_profile_temp_7` FOREIGN KEY (`instance`) REFERENCES `marketing_profile_instances` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_instance_temp_7` FOREIGN KEY (`partner_temp`) REFERENCES `commercial_partner_temp` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_profile_instances`
--

DROP TABLE IF EXISTS `marketing_profile_instances`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile_instances` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `profil` int(10) unsigned DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `default` tinyint(1) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `person` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_profile_instances_1` (`profil`),
  KEY `FK_marketing_profile_instances_3` (`partner`) USING BTREE,
  KEY `FK_marketing_profile_instances_4` (`person`),
  KEY `FK_marketing_profile_instances_5` (`product`),
  CONSTRAINT `FK_marketing_profile_instances_1` FOREIGN KEY (`profil`) REFERENCES `marketing_profile` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_instances_3` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_instances_4` FOREIGN KEY (`person`) REFERENCES `atooerp_person` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_profile_instances_5` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_marketing_profile_instancesAfterInsert` AFTER INSERT ON `marketing_profile_instances` FOR EACH ROW BEGIN
    CALL marketing_profile_instances_UpdateDefault(NEW.Id, NEW.partner, NEW.person, NEW.product);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `marketing_profile_state`
--

DROP TABLE IF EXISTS `marketing_profile_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_profile_type`
--

DROP TABLE IF EXISTS `marketing_profile_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_profile_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_cycle`
--

DROP TABLE IF EXISTS `marketing_quiz_cycle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_cycle` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_form`
--

DROP TABLE IF EXISTS `marketing_quiz_form`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_form` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `enable` tinyint(1) DEFAULT '1',
  `is_gps_enable` tinyint(1) DEFAULT '1',
  `form_type_id` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_form_1` (`form_type_id`),
  CONSTRAINT `FK_marketing_quiz_form_1` FOREIGN KEY (`form_type_id`) REFERENCES `marketing_quiz_form_type` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_form_partner_category`
--

DROP TABLE IF EXISTS `marketing_quiz_form_partner_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_form_partner_category` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` int(10) unsigned NOT NULL,
  `partner_category_id` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_form_partner_category_1` (`form_id`),
  KEY `FK_marketing_quiz_form_partner_category_2` (`partner_category_id`),
  CONSTRAINT `FK_marketing_quiz_form_partner_category_1` FOREIGN KEY (`form_id`) REFERENCES `marketing_quiz_form` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_quiz_form_partner_category_2` FOREIGN KEY (`partner_category_id`) REFERENCES `commercial_partner_category` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_form_question`
--

DROP TABLE IF EXISTS `marketing_quiz_form_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_form_question` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `form_id` int(10) unsigned NOT NULL,
  `question_id` int(10) unsigned NOT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `question_rank` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_form_question_2` (`question_id`),
  KEY `FK_marketing_quiz_form_question_1` (`form_id`),
  CONSTRAINT `FK_marketing_quiz_form_question_1` FOREIGN KEY (`form_id`) REFERENCES `marketing_quiz_form` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_quiz_form_question_2` FOREIGN KEY (`question_id`) REFERENCES `marketing_quiz_question` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_form_type`
--

DROP TABLE IF EXISTS `marketing_quiz_form_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_form_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_partner_form`
--

DROP TABLE IF EXISTS `marketing_quiz_partner_form`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_partner_form` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `is_gps_enable` tinyint(1) DEFAULT '1',
  `begin_date` datetime NOT NULL,
  `end_date` datetime NOT NULL,
  `open_date` datetime DEFAULT NULL,
  `close_date` datetime DEFAULT NULL,
  `estimated_date` datetime DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '1',
  `mac_address` varchar(200) DEFAULT NULL,
  `ip` varchar(30) DEFAULT NULL,
  `gps` varchar(2000) DEFAULT NULL,
  `cycle_id` int(10) unsigned DEFAULT NULL,
  `form_id` int(10) unsigned DEFAULT NULL,
  `partner_id` int(10) unsigned DEFAULT NULL,
  `employe_id` int(10) unsigned DEFAULT NULL,
  `user_id` int(10) unsigned DEFAULT NULL,
  `contact` int(10) unsigned DEFAULT NULL,
  `crm_opportunity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_partner_form_1` (`cycle_id`),
  KEY `FK_marketing_quiz_partner_form_2` (`form_id`),
  KEY `FK_marketing_quiz_partner_form_3` (`partner_id`),
  KEY `FK_marketing_quiz_partner_form_4` (`employe_id`),
  KEY `FK_marketing_quiz_partner_form_5` (`user_id`),
  KEY `FK_marketing_quiz_partner_form_6` (`contact`),
  KEY `FK_marketing_quiz_partner_form_7` (`crm_opportunity`),
  CONSTRAINT `FK_marketing_quiz_partner_form_1` FOREIGN KEY (`cycle_id`) REFERENCES `marketing_quiz_cycle` (`Id`),
  CONSTRAINT `FK_marketing_quiz_partner_form_2` FOREIGN KEY (`form_id`) REFERENCES `marketing_quiz_form` (`Id`),
  CONSTRAINT `FK_marketing_quiz_partner_form_3` FOREIGN KEY (`partner_id`) REFERENCES `commercial_partner` (`Id`),
  CONSTRAINT `FK_marketing_quiz_partner_form_4` FOREIGN KEY (`employe_id`) REFERENCES `atooerp_person` (`Id`),
  CONSTRAINT `FK_marketing_quiz_partner_form_5` FOREIGN KEY (`user_id`) REFERENCES `atooerp_user` (`Id`),
  CONSTRAINT `FK_marketing_quiz_partner_form_6` FOREIGN KEY (`contact`) REFERENCES `commercial_partner_contact` (`Id`),
  CONSTRAINT `FK_marketing_quiz_partner_form_7` FOREIGN KEY (`crm_opportunity`) REFERENCES `crm_opportunity` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_partner_type`
--

DROP TABLE IF EXISTS `marketing_quiz_partner_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_partner_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `form_type_id` int(10) unsigned NOT NULL DEFAULT '0',
  `partner_attribute` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_partner_type_1` (`form_type_id`),
  CONSTRAINT `FK_marketing_quiz_partner_type_1` FOREIGN KEY (`form_type_id`) REFERENCES `marketing_quiz_form_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_profile_type`
--

DROP TABLE IF EXISTS `marketing_quiz_profile_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_profile_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `form_type_id` int(10) unsigned NOT NULL DEFAULT '0',
  `partner_attribute` int(10) unsigned DEFAULT NULL,
  `profile_attribute` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_profile_type_1` (`form_type_id`),
  KEY `FK_marketing_quiz_profile_type_2` (`profile_attribute`),
  CONSTRAINT `FK_marketing_quiz_profile_type_1` FOREIGN KEY (`form_type_id`) REFERENCES `marketing_quiz_form_type` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_marketing_quiz_profile_type_2` FOREIGN KEY (`profile_attribute`) REFERENCES `marketing_profile_attribut` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_question`
--

DROP TABLE IF EXISTS `marketing_quiz_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_question` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `is_multi` tinyint(1) DEFAULT '0',
  `is_null` tinyint(1) DEFAULT '0',
  `enable` tinyint(1) DEFAULT '1',
  `question_text` varchar(400) DEFAULT NULL,
  `question_type_id` int(10) unsigned DEFAULT NULL,
  `system_type_id` int(10) unsigned NOT NULL DEFAULT '0',
  `input_editors_id` int(10) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_question_3` (`question_type_id`),
  KEY `FK_marketing_quiz_question_4` (`input_editors_id`),
  KEY `FK_marketing_quiz_question_2` (`system_type_id`),
  CONSTRAINT `FK_marketing_quiz_question_2` FOREIGN KEY (`system_type_id`) REFERENCES `atooerp_type` (`Id`),
  CONSTRAINT `FK_marketing_quiz_question_3` FOREIGN KEY (`question_type_id`) REFERENCES `marketing_quiz_question_type` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_question_type`
--

DROP TABLE IF EXISTS `marketing_quiz_question_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_question_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `marketing_quiz_response`
--

DROP TABLE IF EXISTS `marketing_quiz_response`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `marketing_quiz_response` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(200) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(2000) DEFAULT NULL,
  `response_value_string` varchar(2000) DEFAULT NULL,
  `question_id` int(10) unsigned NOT NULL DEFAULT '0',
  `partner_form_id` int(10) unsigned NOT NULL DEFAULT '0',
  `type_element_id` int(10) unsigned DEFAULT NULL,
  `response_value_int` int(10) DEFAULT NULL,
  `response_value_decimal` decimal(10,3) DEFAULT NULL,
  `response_value_blob` blob,
  `response_value_date` datetime DEFAULT NULL,
  `response_value_bool` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_marketing_quiz_response_1` (`question_id`),
  KEY `FK_marketing_quiz_response_2` (`partner_form_id`),
  KEY `FK_marketing_quiz_response_3` (`type_element_id`),
  CONSTRAINT `FK_marketing_quiz_response_1` FOREIGN KEY (`question_id`) REFERENCES `marketing_quiz_question` (`Id`),
  CONSTRAINT `FK_marketing_quiz_response_2` FOREIGN KEY (`partner_form_id`) REFERENCES `marketing_quiz_partner_form` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `pos_canceled_state`
--

DROP TABLE IF EXISTS `pos_canceled_state`;
/*!50001 DROP VIEW IF EXISTS `pos_canceled_state`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `pos_canceled_state` (
  `Type` varchar(8),
  `Id` int(11) unsigned,
  `product` int(11) unsigned,
  `description` varchar(200),
  `quantity` decimal(15,5),
  `PrixUnitaire` decimal(43,11),
  `PrixTotal` decimal(58,16),
  `date` datetime,
  `PartnerName` varchar(200),
  `partner` int(11) unsigned,
  `Motif` varchar(45),
  `POS` varchar(45),
  `User` varchar(45),
  `IdPOS` int(11) unsigned,
  `IdSession` int(11) unsigned,
  `reference` varchar(45),
  `productReference` varchar(45),
  `barcode` varchar(255),
  `uniteName` varchar(45),
  `display` bigint(20)
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `pos_cash_desk`
--

DROP TABLE IF EXISTS `pos_cash_desk`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_cash_desk` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `status` tinyint(1) DEFAULT '0',
  `pos` int(10) unsigned DEFAULT '0',
  `mac_adress` varchar(245) DEFAULT NULL,
  `printer` varchar(255) DEFAULT NULL,
  `printer_invoice` varchar(255) DEFAULT NULL,
  `display_customer` tinyint(1) DEFAULT '0',
  `display_customer_port` varchar(45) DEFAULT NULL,
  `display_customer_line_number` int(10) unsigned DEFAULT '0',
  `display_customer_cell` int(10) unsigned DEFAULT '0',
  `display_customer_welcom_message` varchar(45) DEFAULT NULL,
  `display_customer_end_message` varchar(45) DEFAULT NULL,
  `dallas_key_port_name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_cash_desk_report`
--

DROP TABLE IF EXISTS `pos_cash_desk_report`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_cash_desk_report` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `size` float DEFAULT NULL,
  `pos` int(10) unsigned DEFAULT NULL,
  `report` int(10) unsigned DEFAULT '0' COMMENT '0= cash desk ;1=warehouse order',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_cash_rest`
--

DROP TABLE IF EXISTS `pos_cash_rest`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_cash_rest` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `payment_piece` int(10) unsigned DEFAULT '0',
  `give` decimal(15,5) DEFAULT '0.00000',
  `rest` decimal(15,5) DEFAULT '0.00000',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_category`
--

DROP TABLE IF EXISTS `pos_category`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_category` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT '0',
  `picture` longblob,
  `point_of_sale` int(10) unsigned DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_category_1` (`warehouse`),
  KEY `FK_pos_category_2` (`point_of_sale`),
  CONSTRAINT `FK_pos_category_2` FOREIGN KEY (`point_of_sale`) REFERENCES `pos_point_of_sale` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_pos_category_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_category_product`
--

DROP TABLE IF EXISTS `pos_category_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_category_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `category` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `shortcut` tinyint(1) DEFAULT '0',
  `warehouse` int(10) unsigned DEFAULT '0',
  `note` tinyint(1) DEFAULT '0',
  `maual_note` tinyint(1) DEFAULT '0',
  `note_number` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`) USING BTREE,
  KEY `FK_pos_category_product_1` (`warehouse`),
  KEY `FK_pos_category_product_2` (`category`),
  KEY `FK_pos_category_product_3` (`product`),
  CONSTRAINT `FK_pos_category_product_2` FOREIGN KEY (`category`) REFERENCES `pos_category` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_pos_category_product_3` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_pos_category_product_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_credit_order`
--

DROP TABLE IF EXISTS `pos_credit_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_credit_order` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `withholding_tax_chec` tinyint(1) DEFAULT '0',
  `withholding_tax` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_credit_order_1` (`socity`),
  CONSTRAINT `FK_pos_credit_order_1` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_credit_order_line`
--

DROP TABLE IF EXISTS `pos_credit_order_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_credit_order_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(200) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `motif` int(10) unsigned DEFAULT '0',
  `cump` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_credit_order_line_1` (`tax1`),
  KEY `FK_pos_credit_order_line_2` (`tax2`),
  KEY `FK_pos_credit_order_line_3` (`tax3`),
  KEY `FK_pos_credit_order_line_4` (`tax4`),
  KEY `FK_pos_credit_order_line_5` (`tax5`),
  CONSTRAINT `FK_pos_credit_order_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_credit_order_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_credit_order_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_credit_order_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_credit_order_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_pos_credit_order_lineBeforeInsert` BEFORE INSERT ON `pos_credit_order_line` FOR EACH ROW BEGIN


declare p_warehouse int default 0;

set p_warehouse = (select warehouse from pos_credit_order where Id = new.piece);
call get_all_stock_by_warehouse(new.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
set new.cump = @p_cump;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_pos_credit_order_lineBeforeUpdate
BEFORE UPDATE ON pos_credit_order_line
FOR EACH ROW
BEGIN
    DECLARE p_warehouse INT DEFAULT 0;

    SET p_warehouse = (SELECT warehouse FROM pos_credit_order WHERE Id = NEW.piece);
    CALL get_all_stock_by_warehouse(NEW.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
    SET NEW.cump = @p_cump;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Temporary table structure for view `pos_credit_order_list`
--

DROP TABLE IF EXISTS `pos_credit_order_list`;
/*!50001 DROP VIEW IF EXISTS `pos_credit_order_list`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `pos_credit_order_list` (
  `Id` int(10) unsigned,
  `code` varchar(45),
  `reference` varchar(45),
  `date` datetime,
  `partner` int(10) unsigned,
  `validated` tinyint(1),
  `Partnaire` varchar(200),
  `session` int(10) unsigned,
  `MontantTotal` decimal(13,2),
  `motif` int(10) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `pos_encasement`
--

DROP TABLE IF EXISTS `pos_encasement`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_encasement` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date` datetime DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT '0.00000',
  `session` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `note` varchar(500) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT '1',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_group`
--

DROP TABLE IF EXISTS `pos_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_group` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `cancel` tinyint(1) NOT NULL,
  `close` tinyint(1) NOT NULL,
  `close_report` tinyint(1) NOT NULL,
  `price` tinyint(1) NOT NULL,
  `discount` tinyint(1) NOT NULL,
  `discount_max` decimal(15,10) NOT NULL,
  `delegate` tinyint(1) NOT NULL,
  `pending` tinyint(1) NOT NULL,
  `session` tinyint(1) NOT NULL,
  `report` tinyint(1) NOT NULL,
  `delegate_auto_close` tinyint(1) NOT NULL,
  `offre` tinyint(1) NOT NULL,
  `credit` tinyint(1) NOT NULL,
  `partner` tinyint(1) NOT NULL,
  `print` tinyint(1) NOT NULL,
  `solder` tinyint(1) NOT NULL,
  `cancel_temp` tinyint(1) NOT NULL,
  `credit_order` tinyint(1) NOT NULL,
  `invoice` tinyint(1) NOT NULL,
  `create_date` datetime NOT NULL,
  `name` varchar(45) DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `balance_order` tinyint(1) NOT NULL,
  `history_list` tinyint(1) NOT NULL,
  `booking_reservation` tinyint(3) unsigned NOT NULL DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_motif`
--

DROP TABLE IF EXISTS `pos_motif`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_motif` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_note`
--

DROP TABLE IF EXISTS `pos_note`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_note` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `note` varchar(200) DEFAULT NULL,
  `pos` int(10) unsigned DEFAULT NULL,
  `picture` longblob,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_note_1` (`pos`),
  CONSTRAINT `FK_pos_note_1` FOREIGN KEY (`pos`) REFERENCES `pos_point_of_sale` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_note_product`
--

DROP TABLE IF EXISTS `pos_note_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_note_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `pos` int(10) unsigned DEFAULT NULL,
  `note` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_note_product_1` (`pos`),
  KEY `FK_pos_note_product_2` (`note`),
  KEY `FK_pos_note_product_3` (`product`),
  CONSTRAINT `FK_pos_note_product_1` FOREIGN KEY (`pos`) REFERENCES `pos_point_of_sale` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_pos_note_product_2` FOREIGN KEY (`note`) REFERENCES `pos_note` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_pos_note_product_3` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_offer`
--

DROP TABLE IF EXISTS `pos_offer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_offer` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `memo` varchar(45) DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_pos_offerOnInsert` AFTER INSERT ON `pos_offer` FOR EACH ROW BEGIN
call SetPaymentToPieceByPiece('POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.piece);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `pos_order`
--

DROP TABLE IF EXISTS `pos_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_order` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `session` int(10) unsigned DEFAULT '0',
  `invoice` int(10) unsigned DEFAULT '0',
  `action` int(10) unsigned DEFAULT '0',
  `shipping` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `wating` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `due_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `booking_reservation` int(10) unsigned DEFAULT NULL,
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `Index_2` (`invoice`),
  KEY `FK_pos_order_1` (`booking_reservation`),
  CONSTRAINT `FK_pos_order_1` FOREIGN KEY (`booking_reservation`) REFERENCES `booking_reservation` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_pos_orderOnInsert` BEFORE INSERT ON `pos_order` FOR EACH ROW BEGIN
if(new.validated = 1) then
set new.paied_amount = GetPaymentAmountByPiece('POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
call update_sale_rest_amount(new.partner);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_pos_orderOnUpdate` BEFORE UPDATE ON `pos_order` FOR EACH ROW BEGIN
if(new.validated = 1 and old.validated = 0) then
set new.paied_amount = GetPaymentAmountByPiece('POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

call update_sale_rest_amount(new.partner);

end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `pos_order_line`
--

DROP TABLE IF EXISTS `pos_order_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_order_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT NULL,
  `description` varchar(200) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `discount` decimal(6,5) DEFAULT NULL,
  `piece` int(10) NOT NULL,
  `product` int(10) unsigned NOT NULL,
  `vat` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) NOT NULL,
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `cump` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_order_line_1` (`tax1`),
  KEY `FK_pos_order_line_2` (`tax2`),
  KEY `FK_pos_order_line_3` (`tax3`),
  KEY `FK_pos_order_line_4` (`tax4`),
  KEY `FK_pos_order_line_5` (`tax5`),
  KEY `FK_pos_order_line_6` (`tare`),
  CONSTRAINT `FK_pos_order_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_pos_order_lineBeforeInsert` BEFORE INSERT ON `pos_order_line` FOR EACH ROW BEGIN
declare p_warehouse int default 0;
set p_warehouse = (select pos_category_product.warehouse
                  from pos_order join
                       pos_session on pos_session.Id = pos_order.`session` join
                       pos_point_of_sale on pos_point_of_sale.Id = pos_session.pos join
                       pos_category on pos_category.point_of_sale = pos_point_of_sale.Id join
                       pos_category_product on pos_category_product.category = pos_category.Id
                  where pos_category_product.product = new.product and pos_order.Id = new.piece
                  group by pos_category_product.product);

call get_all_stock_by_warehouse(new.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
set new.cump = @p_cump;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_pos_order_lineBeforeUpdate
BEFORE UPDATE ON pos_order_line
FOR EACH ROW
BEGIN
    DECLARE p_warehouse INT DEFAULT 0;

    SET p_warehouse = (SELECT pos_category_product.warehouse
                      FROM pos_order JOIN
                           pos_session ON pos_session.Id = pos_order.`session` JOIN
                           pos_point_of_sale ON pos_point_of_sale.Id = pos_session.pos JOIN
                           pos_category ON pos_category.point_of_sale = pos_point_of_sale.Id JOIN
                           pos_category_product ON pos_category_product.category = pos_category.Id
                      WHERE pos_category_product.product = NEW.product AND pos_order.Id = NEW.piece
                      GROUP BY pos_category_product.product);

    CALL get_all_stock_by_warehouse(NEW.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
    SET NEW.cump = @p_cump;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `pos_order_line_canceled`
--

DROP TABLE IF EXISTS `pos_order_line_canceled`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_order_line_canceled` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(200) DEFAULT NULL,
  `price` decimal(10,3) DEFAULT '0.000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `motif` int(10) unsigned DEFAULT '0',
  `session` int(10) unsigned DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `display` tinyint(1) NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_order_line_canceled_1` (`tax1`),
  KEY `FK_pos_order_line_canceled_2` (`tax2`),
  KEY `FK_pos_order_line_canceled_3` (`tax3`),
  KEY `FK_pos_order_line_canceled_4` (`tax4`),
  KEY `FK_pos_order_line_canceled_5` (`tax5`),
  CONSTRAINT `FK_pos_order_line_canceled_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_canceled_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_canceled_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_canceled_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_pos_order_line_canceled_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `pos_order_list`
--

DROP TABLE IF EXISTS `pos_order_list`;
/*!50001 DROP VIEW IF EXISTS `pos_order_list`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `pos_order_list` (
  `Id` int(10) unsigned,
  `code` varchar(45),
  `reference` varchar(45),
  `date` datetime,
  `partner` int(10) unsigned,
  `validated` tinyint(1),
  `Partnaire` varchar(200),
  `session` int(10) unsigned,
  `MontantTotal` decimal(13,2),
  `Payment` decimal(13,2),
  `Rest` decimal(14,2),
  `Invoice` varchar(45),
  `DateEcheance` datetime
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `pos_point_of_sale`
--

DROP TABLE IF EXISTS `pos_point_of_sale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_point_of_sale` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `description` varchar(225) DEFAULT NULL,
  `website` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `email` varchar(45) DEFAULT NULL,
  `number` varchar(45) DEFAULT NULL COMMENT 'adress',
  `street` varchar(45) DEFAULT NULL COMMENT 'adress',
  `city` varchar(45) DEFAULT NULL COMMENT 'adress',
  `state` varchar(45) DEFAULT NULL COMMENT 'adress',
  `country` varchar(45) DEFAULT NULL COMMENT 'adress',
  `postal_code` varchar(45) DEFAULT NULL COMMENT 'adress',
  `logo` longblob,
  `welcome_message` varchar(225) DEFAULT NULL,
  `information_message` varchar(225) DEFAULT NULL,
  `param_customer` tinyint(1) DEFAULT '1',
  `param_agent` tinyint(1) DEFAULT '0',
  `param_reference` tinyint(1) DEFAULT '0',
  `param_reference_obligatory` tinyint(1) DEFAULT '0',
  `param_reference_search` tinyint(1) DEFAULT '0',
  `param_addition` tinyint(1) DEFAULT '0',
  `param_invoice` tinyint(1) DEFAULT '1',
  `param_invoice_restoration` tinyint(1) DEFAULT '0',
  `param_pax` tinyint(1) DEFAULT '0',
  `param_pax_obligatory` tinyint(1) DEFAULT '0',
  `param_invoice_description` varchar(222) DEFAULT 'Repa',
  `param_invoice_vat` int(10) unsigned DEFAULT '2',
  `param_invoice_revenue_stamp` int(10) unsigned DEFAULT '1',
  `param_payment_convert` tinyint(1) DEFAULT '0',
  `param_numerique_keypad` tinyint(1) DEFAULT '0',
  `param_keyboard` tinyint(1) DEFAULT '1',
  `param_product_bar_code` tinyint(1) DEFAULT '0',
  `param_product_stock` tinyint(1) DEFAULT '1',
  `param_product_stock_color` tinyint(1) DEFAULT '1',
  `param_product_reference` tinyint(1) DEFAULT '0',
  `param_product_vat` tinyint(1) DEFAULT '0',
  `param_product_public_price` tinyint(1) DEFAULT '0',
  `param_product_picture` tinyint(1) DEFAULT '1',
  `param_category` tinyint(1) DEFAULT '1',
  `param_product_card` tinyint(1) DEFAULT '1',
  `param_spliter_position` int(10) unsigned DEFAULT '530',
  `param_warehouse_order` tinyint(1) DEFAULT '0',
  `param_warehouse_order_dissociate` tinyint(1) DEFAULT '0',
  `param_cancled_choice` tinyint(1) DEFAULT '0',
  `param_reference_auto_max` int(10) unsigned DEFAULT '0',
  `param_is_multi_session` tinyint(1) DEFAULT '0',
  `param_multi_session_time` int(10) unsigned DEFAULT '0',
  `param_category_size` int(10) unsigned DEFAULT '130',
  `param_cancel` tinyint(1) DEFAULT '1',
  `param_close` tinyint(1) DEFAULT '1',
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_point_of_sale_1` (`socity`),
  CONSTRAINT `FK_pos_point_of_sale_1` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_point_of_sale_agent`
--

DROP TABLE IF EXISTS `pos_point_of_sale_agent`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_point_of_sale_agent` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `pos` int(10) unsigned DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_point_of_sale_barcode_label`
--

DROP TABLE IF EXISTS `pos_point_of_sale_barcode_label`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_point_of_sale_barcode_label` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `picture` blob,
  `memo` varchar(2000) DEFAULT NULL,
  `point_of_sale` int(10) unsigned DEFAULT NULL,
  `barcode_label_type` int(10) unsigned DEFAULT '1',
  PRIMARY KEY (`Id`),
  KEY `FK_pos_point_of_sale_barcode_label_1` (`point_of_sale`),
  CONSTRAINT `FK_pos_point_of_sale_barcode_label_1` FOREIGN KEY (`point_of_sale`) REFERENCES `pos_point_of_sale` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_point_of_sale_payment_method`
--

DROP TABLE IF EXISTS `pos_point_of_sale_payment_method`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_point_of_sale_payment_method` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `point_of_sale` int(10) unsigned NOT NULL,
  `payment_method` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_point_of_sale_payment_method_1` (`point_of_sale`),
  KEY `FK_pos_point_of_sale_payment_method_2` (`payment_method`),
  CONSTRAINT `FK_pos_point_of_sale_payment_method_1` FOREIGN KEY (`point_of_sale`) REFERENCES `pos_point_of_sale` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_pos_point_of_sale_payment_method_2` FOREIGN KEY (`payment_method`) REFERENCES `commercial_payment_method` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_point_of_sale_product`
--

DROP TABLE IF EXISTS `pos_point_of_sale_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_point_of_sale_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `point_of_sale` int(10) unsigned NOT NULL DEFAULT '0',
  `category` int(10) unsigned DEFAULT '0',
  `price` decimal(10,3) NOT NULL DEFAULT '0.000',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_point_of_sale_user`
--

DROP TABLE IF EXISTS `pos_point_of_sale_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_point_of_sale_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `point_of_sale` int(10) unsigned NOT NULL,
  `user` int(10) unsigned NOT NULL,
  `group` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_product_change_price`
--

DROP TABLE IF EXISTS `pos_product_change_price`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_product_change_price` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `note` varchar(2000) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `point_of_sale` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_product_change_price_line`
--

DROP TABLE IF EXISTS `pos_product_change_price_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_product_change_price_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product` int(10) unsigned DEFAULT NULL,
  `old_price` decimal(15,5) DEFAULT NULL,
  `new_price` decimal(15,5) DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `pos_sale_product`
--

DROP TABLE IF EXISTS `pos_sale_product`;
/*!50001 DROP VIEW IF EXISTS `pos_sale_product`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `pos_sale_product` (
  `Id` int(11) unsigned,
  `product` int(11) unsigned,
  `description` varchar(200),
  `quantity` decimal(16,5),
  `PrixUnitaire` decimal(44,11),
  `PrixTotal` decimal(59,16),
  `profit` decimal(60,16),
  `date` datetime,
  `PartnerName` varchar(200),
  `partner` int(11) unsigned,
  `categoryName` varchar(45),
  `IdCategory` int(11) unsigned,
  `session` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `pos_scale`
--

DROP TABLE IF EXISTS `pos_scale`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_scale` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `point_of_sale` int(10) unsigned NOT NULL,
  `file_path` varchar(2000) DEFAULT NULL,
  `ip_adress` varchar(45) DEFAULT NULL,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_scales_product`
--

DROP TABLE IF EXISTS `pos_scales_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_scales_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `scales` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `plu` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_session`
--

DROP TABLE IF EXISTS `pos_session`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_session` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `start_date` datetime DEFAULT NULL,
  `close_date` datetime DEFAULT NULL,
  `user` int(10) unsigned DEFAULT '0',
  `pos` int(10) unsigned DEFAULT '0',
  `status` tinyint(1) DEFAULT '0',
  `validated_inventory_date` datetime DEFAULT NULL,
  `mac_adress` varchar(45) DEFAULT NULL,
  `amount` decimal(15,5) DEFAULT NULL,
  `inventory_amount` decimal(15,5) DEFAULT NULL,
  `transfer_gap` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_session_1` (`socity`),
  CONSTRAINT `FK_pos_session_1` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_session_inventory`
--

DROP TABLE IF EXISTS `pos_session_inventory`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_session_inventory` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `payment_method` int(10) unsigned DEFAULT '0',
  `theorical_amount` decimal(15,5) DEFAULT '0.00000',
  `amount` decimal(15,5) DEFAULT '0.00000',
  `session` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_session_transfer`
--

DROP TABLE IF EXISTS `pos_session_transfer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_session_transfer` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `amount` decimal(15,5) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `session` int(10) unsigned DEFAULT NULL,
  `cash_desk` int(10) unsigned DEFAULT NULL,
  `memo` varchar(450) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `sign` int(10) DEFAULT NULL,
  `session_closed` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_pos_session_transfer_1` (`session`),
  KEY `FK_pos_session_transfer_2` (`cash_desk`),
  CONSTRAINT `FK_pos_session_transfer_1` FOREIGN KEY (`session`) REFERENCES `pos_session` (`Id`),
  CONSTRAINT `FK_pos_session_transfer_2` FOREIGN KEY (`cash_desk`) REFERENCES `accounting_cash_desk` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `pos_session_transfer_payment`
--

DROP TABLE IF EXISTS `pos_session_transfer_payment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_session_transfer_payment` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `payment` int(10) unsigned DEFAULT NULL,
  `session_transfer` int(10) unsigned DEFAULT NULL,
  `memo` varchar(450) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_pos_session_transfer_payment_1` (`payment`),
  KEY `FK_pos_session_transfer_payment_2` (`session_transfer`),
  CONSTRAINT `FK_pos_session_transfer_payment_1` FOREIGN KEY (`payment`) REFERENCES `commercial_payment` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_pos_session_transfer_payment_2` FOREIGN KEY (`session_transfer`) REFERENCES `pos_session_transfer` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `pos_user_point_of_sale`
--

DROP TABLE IF EXISTS `pos_user_point_of_sale`;
/*!50001 DROP VIEW IF EXISTS `pos_user_point_of_sale`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `pos_user_point_of_sale` (
  `point_of_sale` int(11) unsigned,
  `user` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `pos_warehouse_order`
--

DROP TABLE IF EXISTS `pos_warehouse_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_warehouse_order` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `order` int(10) unsigned DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  `printed` tinyint(1) DEFAULT NULL,
  `is_first` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`),
  KEY `FK_pos_warehouse_order_1` (`warehouse`),
  CONSTRAINT `FK_pos_warehouse_order_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_pos_warehouse_orderOnInsert` BEFORE INSERT ON `pos_warehouse_order` FOR EACH ROW BEGIN
set new.is_first = pos_get_is_first_warehouse_order(new.`order`,new.warehouse);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `pos_warehouse_order_line`
--

DROP TABLE IF EXISTS `pos_warehouse_order_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `pos_warehouse_order_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product` int(10) unsigned DEFAULT '0',
  `quantity` decimal(10,5) DEFAULT '0.00000',
  `piece` int(10) unsigned DEFAULT '0',
  `description` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `product_warehouse_actual_stock`
--

DROP TABLE IF EXISTS `product_warehouse_actual_stock`;
/*!50001 DROP VIEW IF EXISTS `product_warehouse_actual_stock`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `product_warehouse_actual_stock` (
  `Id` int(10) unsigned,
  `piece_line` int(10) unsigned,
  `piece_type` varchar(255),
  `actual_stock` decimal(15,5),
  `theoretical_stock` decimal(15,5),
  `werhouseStockValue` decimal(41,13),
  `product` int(10) unsigned,
  `date` datetime,
  `piece` int(10) unsigned,
  `action` varchar(45),
  `warehouse` int(10) unsigned,
  `warehouseName` varchar(45),
  `totalActual_stock` decimal(15,5),
  `totalTheoretical_stock` decimal(15,5),
  `totalStockValue` decimal(41,13),
  `name` varchar(200),
  `categoryName` varchar(45),
  `IdCategory` int(10) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `product_warehouse_stock`
--

DROP TABLE IF EXISTS `product_warehouse_stock`;
/*!50001 DROP VIEW IF EXISTS `product_warehouse_stock`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `product_warehouse_stock` (
  `Id` int(10) unsigned,
  `piece_line` int(10) unsigned,
  `piece_type` varchar(255),
  `actual_stock` decimal(15,5),
  `theoretical_stock` decimal(15,5),
  `werhouseStockValue` decimal(41,13),
  `product` int(10) unsigned,
  `date` datetime,
  `piece` int(10) unsigned,
  `action` varchar(45),
  `warehouse` int(10) unsigned,
  `warehouseName` varchar(45),
  `totalActual_stock` decimal(15,5),
  `totalTheoretical_stock` decimal(15,5),
  `totalStockValue` decimal(41,13),
  `name` varchar(200),
  `categoryName` varchar(45),
  `IdCategory` int(10) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `production_charging_station`
--

DROP TABLE IF EXISTS `production_charging_station`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_charging_station` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `IsMulti_entity` tinyint(1) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_charging_station_entity`
--

DROP TABLE IF EXISTS `production_charging_station_entity`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_charging_station_entity` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(100) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `mark` varchar(100) DEFAULT NULL,
  `reference` varchar(100) DEFAULT NULL,
  `description` varchar(450) DEFAULT NULL,
  `enabled` tinyint(1) DEFAULT NULL,
  `charging_station` int(10) unsigned DEFAULT NULL,
  `workshop` int(10) unsigned DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_charging_station_entity_1` (`workshop`),
  KEY `FK_production_charging_station_entity_2` (`charging_station`),
  KEY `FK_production_charging_station_entity_3` (`warehouse`),
  CONSTRAINT `FK_production_charging_station_entity_1` FOREIGN KEY (`workshop`) REFERENCES `production_workshop` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_production_charging_station_entity_2` FOREIGN KEY (`charging_station`) REFERENCES `production_charging_station` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_production_charging_station_entity_3` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_compsition`
--

DROP TABLE IF EXISTS `production_compsition`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_compsition` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `composite` int(10) unsigned DEFAULT '0',
  `component` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) DEFAULT '0.00000',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_consumable_charging_station_product`
--

DROP TABLE IF EXISTS `production_consumable_charging_station_product`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_consumable_charging_station_product` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `memo` varchar(450) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `charging_station` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_consumable_charging_station_product_1` (`product`),
  KEY `FK_production_consumable_charging_station_product_2` (`charging_station`),
  CONSTRAINT `FK_production_consumable_charging_station_product_1` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`),
  CONSTRAINT `FK_production_consumable_charging_station_product_2` FOREIGN KEY (`charging_station`) REFERENCES `production_charging_station` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_cost`
--

DROP TABLE IF EXISTS `production_cost`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_cost` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product_cost` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `cost` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_fabrication`
--

DROP TABLE IF EXISTS `production_fabrication`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_fabrication` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `quantity` decimal(10,0) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `code` varchar(45) DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `order` int(10) unsigned DEFAULT NULL,
  `charging_station_entity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_fabrication_1` (`order`),
  KEY `FK_production_fabrication_2` (`charging_station_entity`),
  CONSTRAINT `FK_production_fabrication_1` FOREIGN KEY (`order`) REFERENCES `production_order` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_production_fabrication_2` FOREIGN KEY (`charging_station_entity`) REFERENCES `production_charging_station_entity` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_fabrication_line`
--

DROP TABLE IF EXISTS `production_fabrication_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_fabrication_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `fabrication` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `estimated_quantity` decimal(15,5) DEFAULT NULL,
  `real_quantity` decimal(15,5) DEFAULT NULL,
  `cost` decimal(15,5) DEFAULT NULL,
  `estimated_total_cost` decimal(15,5) DEFAULT NULL,
  `real_total_cost` decimal(15,5) DEFAULT NULL,
  `range` int(10) unsigned DEFAULT NULL,
  `unit_quantity` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_fabrication_line_1` (`fabrication`),
  KEY `FK_production_fabrication_line_2` (`product`),
  CONSTRAINT `FK_production_fabrication_line_1` FOREIGN KEY (`fabrication`) REFERENCES `production_fabrication` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_production_fabrication_line_2` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_fabrication_planning`
--

DROP TABLE IF EXISTS `production_fabrication_planning`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_fabrication_planning` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime NOT NULL,
  `charging_station_entity` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) NOT NULL,
  `production_order` int(10) unsigned NOT NULL,
  `fabrication` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_fabrication_planning_charging_station_entity` (`charging_station_entity`),
  KEY `FK_production_fabrication_planning_production_order` (`production_order`),
  KEY `FK_production_fabrication_planning_fabrication` (`fabrication`),
  CONSTRAINT `FK_production_fabrication_planning_charging_station_entity` FOREIGN KEY (`charging_station_entity`) REFERENCES `production_charging_station_entity` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_production_fabrication_planning_production_order` FOREIGN KEY (`production_order`) REFERENCES `production_order` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_production_fabrication_planning_fabrication` FOREIGN KEY (`fabrication`) REFERENCES `production_fabrication` (`Id`) ON DELETE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_order`
--

DROP TABLE IF EXISTS `production_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_order` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `estimated_begin_date` datetime DEFAULT NULL,
  `estimated_end_date` datetime DEFAULT NULL,
  `estimated_duration` decimal(10,3) DEFAULT NULL,
  `estimated_quantity` decimal(10,3) DEFAULT NULL,
  `real_begin_date` datetime DEFAULT NULL,
  `real_end_date` datetime DEFAULT NULL,
  `real_quantity` decimal(10,3) DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `reference` varchar(45) DEFAULT NULL,
  `code` varchar(45) DEFAULT NULL,
  `memo` varchar(450) DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `sale_order` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `charging_station` int(10) unsigned DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `charging_station_entity` int(10) unsigned DEFAULT NULL,
  `sale_order_line` int(10) unsigned DEFAULT NULL,
  `need_expression` int(10) unsigned DEFAULT NULL,
  `need_expression_line` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_ordre_2` (`state`),
  KEY `FK_production_ordre_4` (`product`),
  KEY `FK_production_ordre_5` (`charging_station`),
  KEY `FK_production_order_5` (`parent`),
  KEY `FK_production_ordre_3` (`sale_order`) USING BTREE,
  KEY `FK_production_order_6` (`need_expression`),
  KEY `FK_production_order_7` (`need_expression_line`),
  KEY `FK_production_order_8` (`sale_order_line`),
  CONSTRAINT `FK_production_ordre_3` FOREIGN KEY (`sale_order`) REFERENCES `sale_order` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_production_order_5` FOREIGN KEY (`parent`) REFERENCES `production_order` (`Id`) ON DELETE SET NULL ON UPDATE NO ACTION,
  CONSTRAINT `FK_production_order_6` FOREIGN KEY (`need_expression`) REFERENCES `commercial_need_expression` (`Id`),
  CONSTRAINT `FK_production_order_7` FOREIGN KEY (`need_expression_line`) REFERENCES `commercial_need_expression_line` (`Id`),
  CONSTRAINT `FK_production_order_8` FOREIGN KEY (`sale_order_line`) REFERENCES `sale_order_line` (`Id`),
  CONSTRAINT `FK_production_order_charging_station` FOREIGN KEY (`charging_station`) REFERENCES `production_charging_station` (`Id`),
  CONSTRAINT `FK_production_ordre_4` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_order_state`
--

DROP TABLE IF EXISTS `production_order_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_order_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `state` int(10) unsigned DEFAULT NULL,
  `order` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_ordre_state_1` (`state`),
  KEY `FK_production_ordre_state_2` (`order`),
  CONSTRAINT `FK_production_ordre_state_1` FOREIGN KEY (`state`) REFERENCES `production_state` (`Id`) ON DELETE NO ACTION ON UPDATE NO ACTION,
  CONSTRAINT `FK_production_ordre_state_2` FOREIGN KEY (`order`) REFERENCES `production_order` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_production_order_stateOnInsert` AFTER INSERT ON `production_order_state` FOR EACH ROW BEGIN



update production_order set state = new.Id where Id = new.`order`;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `production_order_stock`
--

DROP TABLE IF EXISTS `production_order_stock`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_order_stock` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `real_stock` decimal(15,5) DEFAULT NULL,
  `order` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `last_transaction` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `cump` decimal(15,5) DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_order_stock_last_transaction` (`last_transaction`),
  KEY `FK_production_order_stock_product` (`product`),
  KEY `FK_production_order_stock_order` (`order`),
  KEY `FK_production_order_stock_3` (`warehouse`),
  CONSTRAINT `FK_production_order_stock_1` FOREIGN KEY (`order`) REFERENCES `production_order` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_production_order_stock_2` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE,
  CONSTRAINT `FK_production_order_stock_3` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=FIXED;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_order_stock_log`
--

DROP TABLE IF EXISTS `production_order_stock_log`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_order_stock_log` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `real_stock` decimal(15,5) DEFAULT NULL,
  `quantity` decimal(15,5) DEFAULT NULL,
  `order_stock` int(10) unsigned DEFAULT NULL,
  `type` int(10) unsigned DEFAULT NULL,
  `order` int(10) unsigned DEFAULT NULL,
  `fabrication` int(10) unsigned DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `cump` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_order_stock_log_type` (`type`),
  KEY `FK_production_order_stock_log_order` (`order`),
  KEY `FK_production_order_stock_log_fabrication` (`fabrication`),
  KEY `FK_production_order_stock_log_warehouse` (`warehouse`),
  KEY `FK_production_order_stock_log_order_stock` (`order_stock`),
  KEY `FK_production_order_stock_log_6` (`product`),
  CONSTRAINT `FK_production_order_stock_log_3` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_production_order_stock_log_6` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_production_order_stock_log_fabrication` FOREIGN KEY (`fabrication`) REFERENCES `production_fabrication` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_production_order_stock_log_order` FOREIGN KEY (`order`) REFERENCES `production_order` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_production_order_stock_log_order_stock` FOREIGN KEY (`order_stock`) REFERENCES `production_order_stock` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_production_order_stock_log_type` FOREIGN KEY (`type`) REFERENCES `production_order_stock_type` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_production_order_stock_logOnInsert` BEFORE INSERT ON `production_order_stock_log` FOR EACH ROW BEGIN

set new.order_stock = productionUpdateOrder_stock(new.product, new.warehouse, new.quantity, new.cump , new.`order`);
set new.real_stock = (select real_stock from production_order_stock where Id = new.order_stock);

if(new.`type` = 3) then
  call productionUpdateCommercial_product_stock('Production.Fabrication, Fabrication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.product, new.quantity, new.fabrication, new.warehouse, 'insert');
else if(new.`type` = 6) then
  call productionUpdateCommercial_product_stock('Production.Fabrication, Fabrication, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.product, new.quantity, new.fabrication, new.warehouse, 'correction');
end if;

end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `production_order_stock_type`
--

DROP TABLE IF EXISTS `production_order_stock_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_order_stock_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(450) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=9 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_product_charging_station`
--

DROP TABLE IF EXISTS `production_product_charging_station`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_product_charging_station` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `memo` varchar(1000) DEFAULT NULL,
  `charging_station` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_product_charging_station_1` (`charging_station`),
  KEY `FK_production_product_charging_station_2` (`product`),
  CONSTRAINT `FK_production_product_charging_station_1` FOREIGN KEY (`charging_station`) REFERENCES `production_charging_station` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_production_product_charging_station_2` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_product_cost`
--

DROP TABLE IF EXISTS `production_product_cost`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_product_cost` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `product` int(10) unsigned DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `cost` decimal(15,5) DEFAULT NULL,
  `piece_type` varchar(100) DEFAULT NULL,
  `piece` int(10) unsigned DEFAULT NULL,
  `piece_line` int(10) unsigned DEFAULT NULL,
  `note` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_production_product_costAfterInsert` AFTER INSERT ON `production_product_cost` FOR EACH ROW BEGIN
if((select count(*) from production_cost where product = new.product) = 0) THEN
insert into production_cost (product_cost, product, cost) value (new.Id, new.product, new.cost);
else
update production_cost set product_cost = new.Id, cost = new.cost where product = new.product;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `production_state`
--

DROP TABLE IF EXISTS `production_state`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_state` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_user_workshop`
--

DROP TABLE IF EXISTS `production_user_workshop`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_user_workshop` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `begin_date` datetime DEFAULT NULL,
  `end_date` datetime DEFAULT NULL,
  `actif` tinyint(1) DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `workshop` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_user_workshop_1` (`workshop`),
  KEY `FK_production_user_workshop_2` (`user`),
  CONSTRAINT `FK_production_user_workshop_1` FOREIGN KEY (`workshop`) REFERENCES `production_workshop` (`Id`),
  CONSTRAINT `FK_production_user_workshop_2` FOREIGN KEY (`user`) REFERENCES `atooerp_user` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `production_workshop`
--

DROP TABLE IF EXISTS `production_workshop`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `production_workshop` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `warehouse` int(10) unsigned DEFAULT NULL,
  `warehouse_waste` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_production_workshop_1` (`warehouse`),
  KEY `FK_production_workshop_2` (`warehouse_waste`),
  CONSTRAINT `FK_production_workshop_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_production_workshop_2` FOREIGN KEY (`warehouse_waste`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `purchase_balance`
--

DROP TABLE IF EXISTS `purchase_balance`;
/*!50001 DROP VIEW IF EXISTS `purchase_balance`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `purchase_balance` (
  `piece_type` varchar(89),
  `piece_typeName` varchar(24),
  `Id` int(11) unsigned,
  `code` varchar(45),
  `reference` varchar(45),
  `Date` datetime,
  `IdPartner` int(11) unsigned,
  `partnerName` varchar(200),
  `payment_conditionName` varchar(45),
  `payment_methodName` varchar(45),
  `total_amount` decimal(16,5),
  `paied_amount` decimal(15,5),
  `restAmount` decimal(16,5),
  `due_date` datetime,
  `pieceAgent` varchar(91),
  `partnerAgent` varchar(91),
  `IdCurrency` int(11) unsigned,
  `currencySymbol` varchar(45),
  `currencyName` varchar(45),
  `decimal_numbre` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `purchase_credit_invoice`
--

DROP TABLE IF EXISTS `purchase_credit_invoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_credit_invoice` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `invoice` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `withholding_tax_chec` tinyint(1) DEFAULT '0',
  `withholding_tax` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `warehouse` int(10) unsigned DEFAULT '0',
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `transport` int(10) unsigned DEFAULT '0',
  `driver` int(10) unsigned DEFAULT '0',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `due_date` datetime DEFAULT NULL,
  `delivred` tinyint(1) DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_credit_invoice_1` (`warehouse`),
  KEY `FK_purchase_credit_invoice_2` (`currency`),
  KEY `Index_3` (`invoice`),
  KEY `FK_purchase_credit_invoice_3` (`socity`),
  CONSTRAINT `FK_purchase_credit_invoice_3` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_credit_invoice_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_credit_invoice_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_credit_invoiceOnUpdate` BEFORE UPDATE ON `purchase_credit_invoice` FOR EACH ROW BEGIN
if(new.validated = 1 and old.validated = 0) then
  set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
  set new.delivred = getDelivred('Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `purchase_credit_invoice_line`
--

DROP TABLE IF EXISTS `purchase_credit_invoice_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_credit_invoice_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT NULL,
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `discount` decimal(6,5) DEFAULT NULL,
  `piece` int(10) DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `vat` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) DEFAULT NULL,
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_credit_invoice_line_1` (`tax1`),
  KEY `FK_purchase_credit_invoice_line_2` (`tax2`),
  KEY `FK_purchase_credit_invoice_line_3` (`tax3`),
  KEY `FK_purchase_credit_invoice_line_4` (`tax4`),
  KEY `FK_purchase_credit_invoice_line_5` (`tax5`),
  KEY `FK_purchase_credit_invoice_line_6` (`tare`),
  KEY `Index_8` (`piece`),
  KEY `Index_9` (`product`),
  CONSTRAINT `FK_purchase_credit_invoice_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_credit_invoice_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_credit_invoice_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_credit_invoice_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_credit_invoice_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_credit_invoice_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_invoice`
--

DROP TABLE IF EXISTS `purchase_invoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_invoice` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `withholding_tax_chec` tinyint(1) DEFAULT '0',
  `withholding_tax` int(10) unsigned DEFAULT '0',
  `quotation` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `delivred` tinyint(1) DEFAULT '0',
  `due_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_invoice_1` (`currency`),
  KEY `Index_2` (`order`),
  KEY `Index_3` (`quotation`),
  KEY `FK_purchase_invoice_2` (`socity`),
  CONSTRAINT `FK_purchase_invoice_2` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_invoice_1` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_invoiceOnInsert` BEFORE INSERT ON `purchase_invoice` FOR EACH ROW BEGIN
if(new.validated = 1) then
set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
update purchase_order set delivred=new.delivred where Id = new.`order`;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_invoiceAfterInsert` AFTER INSERT ON `purchase_invoice` FOR EACH ROW BEGIN
if(new.`order`<>0) then
call update_pieces_on_transfert('insert', 'purchase_invoice','order',new.Id, new.`order`);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_invoiceOnUpdate` BEFORE UPDATE ON `purchase_invoice` FOR EACH ROW BEGIN
if(new.validated = 1 and old.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
update purchase_order set delivred=new.delivred where Id = new.`order`;
else if(new.validated = 0 and old.validated = 1) then
delete from commercial_product_stock where piece = new.Id and piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
end if;
end if;
if(new.quotation<>old.quotation and new.quotation<>0) then
call update_pieces_on_transfert('update', 'purchase_invoice','quotation',new.quotation, new.Id);
end if;
if(new.`order`<>old.`order` and new.`order`<>0) then
call update_pieces_on_transfert('update', 'purchase_invoice','order',new.`order`, new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `purchase_invoice_line`
--

DROP TABLE IF EXISTS `purchase_invoice_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_invoice_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT NULL,
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT NULL,
  `discount` decimal(6,5) DEFAULT NULL,
  `piece` int(10) NOT NULL,
  `product` int(10) unsigned NOT NULL,
  `vat` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) NOT NULL,
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_invoice_line_1` (`tax1`),
  KEY `FK_purchase_invoice_line_2` (`tax2`),
  KEY `FK_purchase_invoice_line_3` (`tax3`),
  KEY `FK_purchase_invoice_line_4` (`tax4`),
  KEY `FK_purchase_invoice_line_5` (`tax5`),
  KEY `Index_7` (`product`),
  KEY `Index_8` (`piece`),
  CONSTRAINT `FK_purchase_invoice_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_invoice_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_invoice_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_invoice_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_invoice_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_order`
--

DROP TABLE IF EXISTS `purchase_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_order` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `quotation` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `delivred` tinyint(1) DEFAULT '0',
  `due_date` datetime DEFAULT NULL,
  `delivred_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `invoice` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `sale_order` int(10) unsigned DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_order_1` (`sale_order`),
  KEY `FK_purchase_order_2` (`currency`),
  KEY `FK_purchase_order_3` (`parent`),
  KEY `FK_purchase_order_4` (`socity`),
  CONSTRAINT `FK_purchase_order_4` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_order_1` FOREIGN KEY (`sale_order`) REFERENCES `sale_order` (`Id`),
  CONSTRAINT `FK_purchase_order_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_order_3` FOREIGN KEY (`parent`) REFERENCES `purchase_order` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_orderOnInsert` BEFORE INSERT ON `purchase_order` FOR EACH ROW BEGIN
if(new.validated = 1) then
set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_orderAfterInsert` AFTER INSERT ON `purchase_order` FOR EACH ROW BEGIN
if(new.quotation<>0) then
call update_pieces_on_transfert('insert', 'purchase_order','order',new.Id, new.quotation);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_orderOnUpdate` BEFORE UPDATE ON `purchase_order` FOR EACH ROW BEGIN
if(new.validated = 1 and OLD.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
else if(new.validated = 0 and old.validated = 1) then
delete from commercial_product_stock where piece = new.Id and piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
end if;
end if;
if(new.quotation<>old.quotation and new.quotation<>0) then
call update_pieces_on_transfert('update', 'purchase_order','quotation',new.quotation, new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `purchase_order_line`
--

DROP TABLE IF EXISTS `purchase_order_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_order_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `production_order` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_order_line_1` (`tax1`),
  KEY `FK_purchase_order_line_2` (`tax2`),
  KEY `FK_purchase_order_line_3` (`tax3`),
  KEY `FK_purchase_order_line_4` (`tax4`),
  KEY `FK_purchase_order_line_5` (`tax5`),
  KEY `Index_7` (`product`),
  KEY `Index_8` (`piece`),
  KEY `FK_purchase_order_line_production_order` (`production_order`),
  CONSTRAINT `FK_purchase_order_line_production_order` FOREIGN KEY (`production_order`) REFERENCES `production_order` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_purchase_order_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_order_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_order_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_order_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_order_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_payment`
--

DROP TABLE IF EXISTS `purchase_payment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_payment` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `referece` varchar(45) DEFAULT NULL,
  `amount` decimal(10,0) DEFAULT '0',
  `memo` varchar(45) DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT '0',
  `purchase_piece` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_piece`
--

DROP TABLE IF EXISTS `purchase_piece`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_piece` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT NULL,
  `fodec_chec` tinyint(1) DEFAULT NULL,
  `commercial_operation` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  `payment_condition` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `purchase_product`
--

DROP TABLE IF EXISTS `purchase_product`;
/*!50001 DROP VIEW IF EXISTS `purchase_product`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `purchase_product` (
  `Id` int(11) unsigned,
  `product` int(11) unsigned,
  `description` varchar(200),
  `quantity` decimal(16,5),
  `PrixUnitaire` decimal(44,11),
  `PrixTotal` decimal(59,16),
  `date` datetime,
  `PartnerName` varchar(200),
  `partner` int(11) unsigned,
  `categoryName` varchar(45),
  `IdCategory` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `purchase_quotation`
--

DROP TABLE IF EXISTS `purchase_quotation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_quotation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `quotation_request` int(10) unsigned DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_quotation_1` (`quotation_request`),
  KEY `FK_purchase_quotation_2` (`currency`),
  KEY `FK_purchase_quotation_3` (`socity`),
  CONSTRAINT `FK_purchase_quotation_3` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_quotation_1` FOREIGN KEY (`quotation_request`) REFERENCES `purchase_quotation_request` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_quotation_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_quotation_line`
--

DROP TABLE IF EXISTS `purchase_quotation_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_quotation_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_quotation_line_1` (`tax1`),
  KEY `FK_purchase_quotation_line_2` (`tax2`),
  KEY `FK_purchase_quotation_line_3` (`tax3`),
  KEY `FK_purchase_quotation_line_4` (`tax4`),
  KEY `FK_purchase_quotation_line_5` (`tax5`),
  KEY `Index_7` (`piece`),
  CONSTRAINT `FK_purchase_quotation_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_quotation_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_quotation_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_quotation_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_quotation_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_quotation_request`
--

DROP TABLE IF EXISTS `purchase_quotation_request`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_quotation_request` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `memo` varchar(200) DEFAULT NULL,
  `validated` tinyint(3) unsigned NOT NULL,
  `validate_date` datetime DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_quotation_request_1` (`socity`),
  CONSTRAINT `FK_purchase_quotation_request_1` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_quotation_request_line`
--

DROP TABLE IF EXISTS `purchase_quotation_request_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_quotation_request_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `description` varchar(10000) DEFAULT NULL,
  `piece` int(10) unsigned NOT NULL,
  `product` int(10) unsigned NOT NULL,
  `quantity` decimal(10,0) NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_shipping`
--

DROP TABLE IF EXISTS `purchase_shipping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_shipping` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `invoice` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT '0',
  `quotation` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `warehouse` int(10) unsigned DEFAULT '0',
  `due_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `transport` int(10) unsigned DEFAULT '0',
  `driver` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_shipping_1` (`warehouse`),
  KEY `Index_3` (`order`),
  KEY `Index_4` (`invoice`),
  KEY `Index_5` (`quotation`),
  KEY `FK_purchase_shipping_2` (`currency`),
  KEY `FK_purchase_shipping_3` (`socity`),
  CONSTRAINT `FK_purchase_shipping_3` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_shipping_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_shipping_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_shippingOnInsert` BEFORE INSERT ON `purchase_shipping` FOR EACH ROW BEGIN
declare delivredStatus bool default false;
if(new.validated = 1) then
set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

call setDelivred('Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_shippingOnUpdate` BEFORE UPDATE ON `purchase_shipping` FOR EACH ROW BEGIN
declare delivredStatus bool default false;
if(new.validated = 1 and OLD.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

call setDelivred('Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
else if(new.validated = 0 and old.validated = 1) then
delete from commercial_product_stock where piece = new.Id and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
end if;
end if;
if(new.quotation<>old.quotation and new.quotation<>0) then
call update_pieces_on_transfert('update', 'purchase_shipping','quotation',new.quotation, new.Id);
end if;
if(new.`order`<>old.`order` and new.`order`<>0) then
call update_pieces_on_transfert('update', 'purchase_shipping','order',new.`order`, new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `purchase_shipping_line`
--

DROP TABLE IF EXISTS `purchase_shipping_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_shipping_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_shipping_line_1` (`tax1`),
  KEY `FK_purchase_shipping_line_2` (`tax2`),
  KEY `FK_purchase_shipping_line_3` (`tax3`),
  KEY `FK_purchase_shipping_line_4` (`tax4`),
  KEY `FK_purchase_shipping_line_5` (`tax5`),
  KEY `FK_purchase_shipping_line_6` (`tare`),
  KEY `Index_8` (`piece`),
  KEY `Index_9` (`product`),
  CONSTRAINT `FK_purchase_shipping_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `purchase_shipping_return`
--

DROP TABLE IF EXISTS `purchase_shipping_return`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_shipping_return` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  `payment_condition` int(10) unsigned DEFAULT NULL,
  `invoice` int(10) unsigned DEFAULT NULL,
  `order` int(10) unsigned DEFAULT NULL,
  `quotation` int(10) unsigned DEFAULT NULL,
  `shipping` int(10) unsigned DEFAULT NULL,
  `credit_invoice` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `warehouse` int(10) unsigned DEFAULT NULL,
  `due_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `transport` int(10) unsigned DEFAULT NULL,
  `driver` int(10) unsigned DEFAULT NULL,
  `revenue_stamp` int(10) unsigned DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_shipping_return_1` (`partner`),
  KEY `FK_purchase_shipping_return_2` (`payment_method`),
  KEY `FK_purchase_shipping_return_3` (`payment_condition`),
  KEY `FK_purchase_shipping_return_4` (`invoice`),
  KEY `FK_purchase_shipping_return_5` (`order`),
  KEY `FK_purchase_shipping_return_6` (`quotation`),
  KEY `FK_purchase_shipping_return_7` (`shipping`),
  KEY `FK_purchase_shipping_return_8` (`credit_invoice`),
  KEY `FK_purchase_shipping_return_9` (`warehouse`),
  KEY `FK_purchase_shipping_return_10` (`agent`),
  KEY `FK_purchase_shipping_return_11` (`driver`),
  KEY `FK_purchase_shipping_return_12` (`revenue_stamp`),
  KEY `FK_purchase_shipping_return_18` (`currency`),
  KEY `FK_purchase_shipping_return_13` (`socity`),
  CONSTRAINT `FK_purchase_shipping_return_13` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_shipping_return_1` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_10` FOREIGN KEY (`agent`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_11` FOREIGN KEY (`driver`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_18` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_purchase_shipping_return_2` FOREIGN KEY (`payment_method`) REFERENCES `commercial_payment_method` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_3` FOREIGN KEY (`payment_condition`) REFERENCES `commercial_payment_condition` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_4` FOREIGN KEY (`invoice`) REFERENCES `purchase_invoice` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_purchase_shipping_return_5` FOREIGN KEY (`order`) REFERENCES `purchase_order` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_shipping_return_6` FOREIGN KEY (`quotation`) REFERENCES `purchase_quotation` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_shipping_return_7` FOREIGN KEY (`shipping`) REFERENCES `purchase_shipping` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_shipping_return_8` FOREIGN KEY (`credit_invoice`) REFERENCES `purchase_credit_invoice` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_shipping_return_9` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_purchase_shipping_returnOnUpdate` BEFORE UPDATE ON `purchase_shipping_return` FOR EACH ROW BEGIN
declare delivredStatus bool default false;
if(new.validated = 1 and OLD.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

call setDelivred('Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `purchase_shipping_return_line`
--

DROP TABLE IF EXISTS `purchase_shipping_return_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `purchase_shipping_return_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_purchase_shipping_return_line_1` (`tax1`),
  KEY `FK_purchase_shipping_return_line_2` (`tax2`),
  KEY `FK_purchase_shipping_return_line_3` (`tax3`),
  KEY `FK_purchase_shipping_return_line_4` (`tax4`),
  KEY `FK_purchase_shipping_return_line_5` (`tax5`),
  KEY `FK_purchase_shipping_return_line_6` (`tare`),
  KEY `FK_purchase_shipping_return_line_7` (`piece`),
  KEY `FK_purchase_shipping_return_line_8` (`product`),
  CONSTRAINT `FK_purchase_shipping_return_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`),
  CONSTRAINT `FK_purchase_shipping_return_line_7` FOREIGN KEY (`piece`) REFERENCES `purchase_shipping_return` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_purchase_shipping_return_line_8` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `purchase_state`
--

DROP TABLE IF EXISTS `purchase_state`;
/*!50001 DROP VIEW IF EXISTS `purchase_state`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `purchase_state` (
  `piece_type` varchar(82),
  `piece_typeName` varchar(16),
  `Id` int(11) unsigned,
  `code` varchar(45),
  `reference` varchar(45),
  `Date` datetime,
  `IdPartner` int(11) unsigned,
  `partnerName` varchar(200),
  `payment_conditionName` varchar(45),
  `payment_methodName` varchar(45),
  `total_amount` decimal(15,5),
  `paied_amount` decimal(39,5),
  `due_date` datetime
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `purchase_transfering_shipping`
--

DROP TABLE IF EXISTS `purchase_transfering_shipping`;
/*!50001 DROP VIEW IF EXISTS `purchase_transfering_shipping`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `purchase_transfering_shipping` (
  `piece_type` varchar(82),
  `piece_typeName` varchar(16),
  `Id` int(10) unsigned,
  `code` varchar(45),
  `reference` varchar(45),
  `date` datetime,
  `IdPartner` int(10) unsigned,
  `partnerName` varchar(200),
  `BonDeCommande` varchar(45),
  `payment_conditionName` varchar(45),
  `payment_methodName` varchar(45),
  `total_amount` decimal(15,5),
  `paied_amount` decimal(15,5),
  `restAmount` decimal(16,5),
  `due_date` datetime
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `read20232024`
--

DROP TABLE IF EXISTS `read20232024`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `read20232024` (
  `Id` int(11) NOT NULL AUTO_INCREMENT,
  `Nom` varchar(45) DEFAULT NULL,
  `Date_de_Naissance` datetime DEFAULT NULL,
  `NationalitÃ©` varchar(5) DEFAULT NULL,
  `ArrivÃ©e` datetime DEFAULT NULL,
  `DÃ©part` datetime DEFAULT NULL,
  `TÃ©l` varchar(255) DEFAULT NULL,
  `Email` varchar(45) DEFAULT NULL,
  `EmailAccept` varchar(5) DEFAULT NULL,
  `ApplicationId` varchar(12) DEFAULT NULL,
  `ProfileId` varchar(12) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=258 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `sale_balance`
--

DROP TABLE IF EXISTS `sale_balance`;
/*!50001 DROP VIEW IF EXISTS `sale_balance`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sale_balance` (
  `piece_type` varchar(80),
  `piece_typeName` varchar(19),
  `Id` int(11) unsigned,
  `code` varchar(45),
  `reference` varchar(45),
  `Date` datetime,
  `IdPartner` int(11) unsigned,
  `partnerName` varchar(200),
  `payment_conditionName` varchar(45),
  `payment_methodName` varchar(45),
  `total_amount` decimal(16,5),
  `paied_amount` decimal(16,5),
  `restAmount` decimal(17,5),
  `due_date` datetime,
  `pieceAgent` varchar(91),
  `partnerAgent` varchar(91),
  `IdCurrency` int(11) unsigned,
  `currencySymbol` varchar(45),
  `currencyName` varchar(45),
  `decimal_numbre` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sale_credit_invoice`
--

DROP TABLE IF EXISTS `sale_credit_invoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_credit_invoice` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `invoice` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `withholding_tax_chec` tinyint(1) DEFAULT '0',
  `withholding_tax` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `warehouse` int(10) unsigned DEFAULT '0',
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `transport` int(10) unsigned DEFAULT '0',
  `driver` int(10) unsigned DEFAULT '0',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `due_date` datetime DEFAULT NULL,
  `delivred` tinyint(1) DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_sale_credit_invoice_1` (`warehouse`),
  KEY `FK_sale_credit_invoice_2` (`currency`),
  KEY `Index_3` (`invoice`),
  KEY `FK_sale_credit_invoice_3` (`socity`),
  CONSTRAINT `FK_sale_credit_invoice_3` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_credit_invoice_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_sale_credit_invoice_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_credit_invoiceOnUpdate` BEFORE UPDATE ON `sale_credit_invoice` FOR EACH ROW BEGIN
if(new.validated = 1 and old.validated = 0) then
  set new.paied_amount =  GetPaymentAmountByPiece('Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
  set new.delivred = getDelivred('Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sale_credit_invoice_line`
--

DROP TABLE IF EXISTS `sale_credit_invoice_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_credit_invoice_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `cump` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_sale_credit_invoice_line_1` (`tax1`),
  KEY `FK_sale_credit_invoice_line_2` (`tax2`),
  KEY `FK_sale_credit_invoice_line_3` (`tax3`),
  KEY `FK_sale_credit_invoice_line_4` (`tax4`),
  KEY `FK_sale_credit_invoice_line_5` (`tax5`),
  KEY `FK_sale_credit_invoice_line_6` (`tare`),
  KEY `Index_8` (`piece`),
  KEY `Index_9` (`product`),
  CONSTRAINT `FK_sale_credit_invoice_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_credit_invoice_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_credit_invoice_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_credit_invoice_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_credit_invoice_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_credit_invoice_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_credit_invoice_lineBeforeInsert` BEFORE INSERT ON `sale_credit_invoice_line` FOR EACH ROW BEGIN

declare p_warehouse int default 0;

set p_warehouse = (select warehouse from sale_credit_invoice where Id = new.piece);
call get_all_stock_by_warehouse(new.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
set new.cump = @p_cump;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_sale_credit_invoice_lineBeforeUpdate
BEFORE UPDATE ON sale_credit_invoice_line
FOR EACH ROW
BEGIN
    DECLARE p_warehouse INT DEFAULT 0;

    SET p_warehouse = (SELECT warehouse FROM sale_credit_invoice WHERE Id = NEW.piece);
    CALL get_all_stock_by_warehouse(NEW.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
    SET NEW.cump = @p_cump;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sale_invoice`
--

DROP TABLE IF EXISTS `sale_invoice`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_invoice` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT '0',
  `quotation` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `withholding_tax_chec` tinyint(1) DEFAULT '0',
  `withholding_tax` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `delivred` tinyint(1) DEFAULT '0',
  `due_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_sale_invoice_1` (`currency`),
  KEY `Index_2` (`order`),
  KEY `Index_3` (`quotation`),
  KEY `FK_sale_invoice_2` (`socity`),
  CONSTRAINT `FK_sale_invoice_2` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_invoice_1` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=410 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_invoiceOnInsert` BEFORE INSERT ON `sale_invoice` FOR EACH ROW BEGIN
if(new.validated = 1) then
set new.paied_amount =  GetPaymentAmountByPiece('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
update sale_order set delivred=new.delivred where Id = new.`order`;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_invoiceAfterInsert` AFTER INSERT ON `sale_invoice` FOR EACH ROW BEGIN
if(new.`order`<>0) then
call update_pieces_on_transfert('insert', 'sale_invoice','order',new.Id, new.`order`);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_invoiceOnUpdate` BEFORE UPDATE ON `sale_invoice` FOR EACH ROW BEGIN
if(new.validated = 1 and old.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
update sale_order set delivred=new.delivred where Id = new.`order`;
call update_sale_rest_amount(new.partner);
else if(new.validated = 0 and old.validated = 1) then
delete from commercial_product_stock where piece = new.Id and piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
end if;
end if;
if(new.quotation<>old.quotation and new.quotation<>0) then
call update_pieces_on_transfert('update', 'sale_invoice','quotation',new.quotation, new.Id);
end if;
if(new.`order`<>old.`order` and new.`order`<>0) then
call update_pieces_on_transfert('update', 'sale_invoice','order',new.`order`, new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sale_invoice_line`
--

DROP TABLE IF EXISTS `sale_invoice_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_invoice_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL,
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `client` varchar(2000) DEFAULT NULL,
  `nuite` varchar(10) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_sale_invoice_line_1` (`tax1`),
  KEY `FK_sale_invoice_line_2` (`tax2`),
  KEY `FK_sale_invoice_line_3` (`tax3`),
  KEY `FK_sale_invoice_line_4` (`tax4`),
  KEY `FK_sale_invoice_line_5` (`tax5`),
  KEY `Index_7` (`product`),
  KEY `Index_8` (`piece`),
  CONSTRAINT `FK_sale_invoice_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_invoice_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_invoice_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_invoice_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_invoice_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=1804 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sale_order`
--

DROP TABLE IF EXISTS `sale_order`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_order` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `quotation` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `delivred` tinyint(1) DEFAULT '0',
  `due_date` datetime DEFAULT NULL,
  `delivred_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `invoice` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `parent` int(10) unsigned DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_sale_order_1` (`currency`),
  KEY `FK_sale_order_3` (`parent`),
  KEY `FK_sale_order_4` (`socity`),
  CONSTRAINT `FK_sale_order_4` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_order_1` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_order_3` FOREIGN KEY (`parent`) REFERENCES `sale_order` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_orderOnInsert` BEFORE INSERT ON `sale_order` FOR EACH ROW BEGIN
if(new.validated = 1) then
set new.paied_amount =  GetPaymentAmountByPiece('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_orderAfterInsert` AFTER INSERT ON `sale_order` FOR EACH ROW BEGIN
if(new.quotation<>0) then
call update_pieces_on_transfert('insert', 'sale_order','order',new.Id, new.quotation);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_orderOnUpdate` BEFORE UPDATE ON `sale_order` FOR EACH ROW BEGIN
if(new.validated = 1 and old.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
set new.delivred = getDelivred('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
call update_sale_rest_amount(new.partner);
else if(new.validated = 0 and old.validated = 1) then
delete from commercial_product_stock where piece = new.Id and piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
end if;
end if;
if(new.quotation<>old.quotation and new.quotation<>0) then
call update_pieces_on_transfert('update', 'sale_order','quotation',new.quotation, new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sale_order_line`
--

DROP TABLE IF EXISTS `sale_order_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_order_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_sale_order_line_1` (`tax1`),
  KEY `FK_sale_order_line_2` (`tax2`),
  KEY `FK_sale_order_line_3` (`tax3`),
  KEY `FK_sale_order_line_4` (`tax4`),
  KEY `FK_sale_order_line_5` (`tax5`),
  KEY `Index_7` (`product`),
  KEY `Index_8` (`piece`),
  CONSTRAINT `FK_sale_order_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_order_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_order_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_order_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_order_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sale_payment`
--

DROP TABLE IF EXISTS `sale_payment`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_payment` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `referece` varchar(45) DEFAULT NULL,
  `amount` decimal(10,0) DEFAULT '0',
  `memo` varchar(45) DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `sale_piece` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sale_piece`
--

DROP TABLE IF EXISTS `sale_piece`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_piece` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT NULL,
  `fodec_chec` tinyint(1) DEFAULT NULL,
  `commercial_operation` int(10) unsigned DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  `payment_condition` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `sale_product`
--

DROP TABLE IF EXISTS `sale_product`;
/*!50001 DROP VIEW IF EXISTS `sale_product`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sale_product` (
  `Id` int(11) unsigned,
  `product` int(11) unsigned,
  `description` varchar(200),
  `quantity` decimal(16,5),
  `PrixUnitaire` decimal(44,11),
  `PrixTotal` decimal(59,16),
  `profit` decimal(60,16),
  `date` datetime,
  `PartnerName` varchar(200),
  `partner` int(11) unsigned,
  `categoryName` varchar(45),
  `IdCategory` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `sale_product_state`
--

DROP TABLE IF EXISTS `sale_product_state`;
/*!50001 DROP VIEW IF EXISTS `sale_product_state`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sale_product_state` (
  `piece_type` varchar(255),
  `piece` int(11),
  `Id` int(11) unsigned,
  `product` int(11) unsigned,
  `description` varchar(200),
  `quantity` decimal(15,5),
  `PrixUnitaire` decimal(43,11),
  `cump` decimal(15,5),
  `date` datetime,
  `PartnerName` varchar(200),
  `partner` int(11) unsigned,
  `categoryName` varchar(45),
  `IdCategory` int(11) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sale_quotation`
--

DROP TABLE IF EXISTS `sale_quotation`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_quotation` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `crm_opportunity` int(10) unsigned DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_sale_quotation_1` (`crm_opportunity`),
  KEY `FK_sale_quotation_2` (`currency`),
  KEY `FK_sale_quotation_3` (`socity`),
  CONSTRAINT `FK_sale_quotation_3` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_quotation_1` FOREIGN KEY (`crm_opportunity`) REFERENCES `crm_opportunity` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_sale_quotation_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sale_quotation_line`
--

DROP TABLE IF EXISTS `sale_quotation_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_quotation_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `cump` decimal(15,5) DEFAULT '0.00000',
  PRIMARY KEY (`Id`),
  KEY `FK_sale_quotation_line_1` (`tax1`),
  KEY `FK_sale_quotation_line_2` (`tax2`),
  KEY `FK_sale_quotation_line_3` (`tax3`),
  KEY `FK_sale_quotation_line_4` (`tax4`),
  KEY `FK_sale_quotation_line_5` (`tax5`),
  KEY `Index_7` (`piece`),
  CONSTRAINT `FK_sale_quotation_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_quotation_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_quotation_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_quotation_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_quotation_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sale_shipping`
--

DROP TABLE IF EXISTS `sale_shipping`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_shipping` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `tva_chec` tinyint(1) DEFAULT '0',
  `fodec_chec` tinyint(1) DEFAULT '0',
  `fodec` int(10) unsigned DEFAULT '0',
  `memo` varchar(200) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT '0',
  `payment_method` int(10) unsigned DEFAULT '0',
  `payment_condition` int(10) unsigned DEFAULT '0',
  `invoice` int(10) unsigned DEFAULT '0',
  `order` int(10) unsigned DEFAULT '0',
  `quotation` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `warehouse` int(10) unsigned DEFAULT '0',
  `due_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT '0',
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `transport` int(10) unsigned DEFAULT '0',
  `driver` int(10) unsigned DEFAULT '0',
  `revenue_stamp` int(10) unsigned DEFAULT '0',
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_sale_shipping_1` (`warehouse`),
  KEY `Index_3` (`order`),
  KEY `Index_4` (`invoice`),
  KEY `Index_5` (`quotation`),
  KEY `FK_sale_shipping_2` (`currency`),
  KEY `FK_sale_shipping_3` (`socity`),
  CONSTRAINT `FK_sale_shipping_3` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_shipping_1` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`) ON UPDATE CASCADE,
  CONSTRAINT `FK_sale_shipping_2` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL
) ENGINE=InnoDB AUTO_INCREMENT=55612 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_shippingOnInsert` BEFORE INSERT ON `sale_shipping` FOR EACH ROW BEGIN
declare delivredStatus bool default false;
if(new.validated = 1) then
set new.paied_amount =  GetPaymentAmountByPiece('Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

call setDelivred('Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_shippingOnUpdate` BEFORE UPDATE ON `sale_shipping` FOR EACH ROW BEGIN
declare delivredStatus bool default false;
if(new.validated = 1 and old.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

call setDelivred('Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);
call update_sale_rest_amount(new.partner);
else if(new.validated = 0 and old.validated = 1) then
delete from commercial_product_stock where piece = new.Id and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
end if;
end if;
if(new.quotation<>old.quotation and new.quotation<>0) then
call update_pieces_on_transfert('update', 'sale_shipping','quotation',new.quotation, new.Id);
end if;
if(new.`order`<>old.`order` and new.`order`<>0) then
call update_pieces_on_transfert('update', 'sale_shipping','order',new.`order`, new.Id);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sale_shipping_line`
--

DROP TABLE IF EXISTS `sale_shipping_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_shipping_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) NOT NULL DEFAULT '0',
  `product` int(10) unsigned NOT NULL DEFAULT '0',
  `vat` int(10) unsigned DEFAULT '0',
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `cump` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_sale_shipping_line_1` (`tax1`),
  KEY `FK_sale_shipping_line_2` (`tax2`),
  KEY `FK_sale_shipping_line_3` (`tax3`),
  KEY `FK_sale_shipping_line_4` (`tax4`),
  KEY `FK_sale_shipping_line_5` (`tax5`),
  KEY `FK_sale_shipping_line_6` (`tare`),
  KEY `Index_8` (`piece`),
  KEY `Index_9` (`product`),
  CONSTRAINT `FK_sale_shipping_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=58540 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_shipping_lineBeforeInsert` BEFORE INSERT ON `sale_shipping_line` FOR EACH ROW BEGIN

declare p_warehouse int default 0;

set p_warehouse = (select warehouse from sale_shipping where Id = new.piece);
call get_all_stock_by_warehouse(new.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
set new.cump = @p_cump;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER trigger_sale_shipping_lineBeforeUpdate
BEFORE UPDATE ON sale_shipping_line
FOR EACH ROW
BEGIN
    DECLARE p_warehouse INT DEFAULT 0;

    SET p_warehouse = (SELECT warehouse FROM sale_shipping WHERE Id = NEW.piece);
    CALL get_all_stock_by_warehouse(NEW.product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
    SET NEW.cump = @p_cump;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sale_shipping_logistics`
--

DROP TABLE IF EXISTS `sale_shipping_logistics`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_shipping_logistics` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `create_date` datetime DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  `transport` int(10) unsigned DEFAULT NULL,
  `driver` int(10) unsigned DEFAULT NULL,
  `note` varchar(1000) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sale_shipping_logistics_line`
--

DROP TABLE IF EXISTS `sale_shipping_logistics_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_shipping_logistics_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `logistics` int(10) unsigned DEFAULT NULL,
  `shipping` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sale_shipping_return`
--

DROP TABLE IF EXISTS `sale_shipping_return`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_shipping_return` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `create_date` datetime DEFAULT NULL,
  `reference` varchar(45) DEFAULT NULL,
  `general_condition` mediumtext,
  `date` datetime DEFAULT NULL,
  `memo` varchar(1000) DEFAULT NULL,
  `partner` int(10) unsigned DEFAULT NULL,
  `payment_method` int(10) unsigned DEFAULT NULL,
  `payment_condition` int(10) unsigned DEFAULT NULL,
  `invoice` int(10) unsigned DEFAULT NULL,
  `order` int(10) unsigned DEFAULT NULL,
  `quotation` int(10) unsigned DEFAULT NULL,
  `shipping` int(10) unsigned DEFAULT NULL,
  `credit_invoice` int(10) unsigned DEFAULT NULL,
  `validated` tinyint(1) DEFAULT '0',
  `total_amount` decimal(15,5) DEFAULT '0.00000',
  `paied_amount` decimal(15,5) DEFAULT '0.00000',
  `warehouse` int(10) unsigned DEFAULT NULL,
  `due_date` datetime DEFAULT NULL,
  `agent` int(10) unsigned DEFAULT NULL,
  `tax1` tinyint(1) DEFAULT '0',
  `tax2` tinyint(1) DEFAULT '0',
  `tax3` tinyint(1) DEFAULT '0',
  `tax4` tinyint(1) DEFAULT '0',
  `tax5` tinyint(1) DEFAULT '0',
  `transport` int(10) unsigned DEFAULT NULL,
  `driver` int(10) unsigned DEFAULT NULL,
  `revenue_stamp` int(10) unsigned DEFAULT NULL,
  `currency` int(10) unsigned DEFAULT NULL,
  `currency_rate` decimal(15,5) DEFAULT NULL,
  `socity` int(10) unsigned DEFAULT NULL,
  `paied_amount_order` decimal(15,3) DEFAULT '0.000',
  `paied_amount_shipping` decimal(15,3) DEFAULT '0.000',
  `paied_amount_invoice` decimal(15,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`),
  KEY `FK_sale_shipping_return_1` (`partner`),
  KEY `FK_sale_shipping_return_2` (`payment_method`),
  KEY `FK_sale_shipping_return_3` (`payment_condition`),
  KEY `FK_sale_shipping_return_4` (`invoice`),
  KEY `FK_sale_shipping_return_5` (`order`),
  KEY `FK_sale_shipping_return_6` (`quotation`),
  KEY `FK_sale_shipping_return_7` (`shipping`),
  KEY `FK_sale_shipping_return_8` (`credit_invoice`),
  KEY `FK_sale_shipping_return_9` (`warehouse`),
  KEY `FK_sale_shipping_return_10` (`agent`),
  KEY `FK_sale_shipping_return_11` (`driver`),
  KEY `FK_sale_shipping_return_12` (`revenue_stamp`),
  KEY `FK_sale_shipping_return_25` (`currency`),
  KEY `FK_sale_shipping_return_13` (`socity`),
  CONSTRAINT `FK_sale_shipping_return_13` FOREIGN KEY (`socity`) REFERENCES `atooerp_socity` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_shipping_return_1` FOREIGN KEY (`partner`) REFERENCES `commercial_partner` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_10` FOREIGN KEY (`agent`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_11` FOREIGN KEY (`driver`) REFERENCES `hr_employe` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_2` FOREIGN KEY (`payment_method`) REFERENCES `commercial_payment_method` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_25` FOREIGN KEY (`currency`) REFERENCES `atooerp_currency` (`Id`) ON DELETE SET NULL ON UPDATE SET NULL,
  CONSTRAINT `FK_sale_shipping_return_3` FOREIGN KEY (`payment_condition`) REFERENCES `commercial_payment_condition` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_4` FOREIGN KEY (`invoice`) REFERENCES `sale_invoice` (`Id`) ON DELETE SET NULL,
  CONSTRAINT `FK_sale_shipping_return_5` FOREIGN KEY (`order`) REFERENCES `sale_order` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_sale_shipping_return_6` FOREIGN KEY (`quotation`) REFERENCES `sale_quotation` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_sale_shipping_return_7` FOREIGN KEY (`shipping`) REFERENCES `sale_shipping` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_sale_shipping_return_8` FOREIGN KEY (`credit_invoice`) REFERENCES `sale_credit_invoice` (`Id`) ON DELETE SET NULL ON UPDATE CASCADE,
  CONSTRAINT `FK_sale_shipping_return_9` FOREIGN KEY (`warehouse`) REFERENCES `commercial_warehouse` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sale_shipping_returnOnUpdate` BEFORE UPDATE ON `sale_shipping_return` FOR EACH ROW BEGIN
declare delivredStatus bool default false;
if(new.validated = 1 and OLD.validated = 0) then
set new.paied_amount =  GetPaymentAmountByPiece('Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

call setDelivred('Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', new.Id);

end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sale_shipping_return_line`
--

DROP TABLE IF EXISTS `sale_shipping_return_line`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sale_shipping_return_line` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `range` int(10) unsigned DEFAULT '0',
  `description` varchar(10000) DEFAULT NULL,
  `price` decimal(15,5) DEFAULT '0.00000',
  `discount` decimal(6,5) DEFAULT '0.00000',
  `piece` int(10) unsigned DEFAULT NULL,
  `product` int(10) unsigned DEFAULT NULL,
  `quantity` decimal(15,5) NOT NULL DEFAULT '0.00000',
  `tax1` int(10) unsigned DEFAULT NULL,
  `tax1_base` decimal(15,5) DEFAULT NULL,
  `tax1_amount` decimal(15,5) DEFAULT NULL,
  `tax1_total_amount` decimal(15,5) DEFAULT NULL,
  `tax2` int(10) unsigned DEFAULT NULL,
  `tax2_base` decimal(15,5) DEFAULT NULL,
  `tax2_amount` decimal(15,5) DEFAULT NULL,
  `tax2_total_amount` decimal(15,5) DEFAULT NULL,
  `tax3` int(10) unsigned DEFAULT NULL,
  `tax3_base` decimal(15,5) DEFAULT NULL,
  `tax3_amount` decimal(15,5) DEFAULT NULL,
  `tax3_total_amount` decimal(15,5) DEFAULT NULL,
  `tax4` int(10) unsigned DEFAULT NULL,
  `tax4_base` decimal(15,5) DEFAULT NULL,
  `tax4_amount` decimal(15,5) DEFAULT NULL,
  `tax4_total_amount` decimal(15,5) DEFAULT NULL,
  `tax5` int(10) unsigned DEFAULT NULL,
  `tax5_base` decimal(15,5) DEFAULT NULL,
  `tax5_amount` decimal(15,5) DEFAULT NULL,
  `tax5_total_amount` decimal(15,5) DEFAULT NULL,
  `tare` int(10) unsigned DEFAULT NULL,
  `package` int(10) unsigned DEFAULT NULL,
  `gross_weight` decimal(15,5) DEFAULT NULL,
  `tare_weight` decimal(15,5) DEFAULT NULL,
  `net_weight` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_sale_shipping_return_line_1` (`tax1`),
  KEY `FK_sale_shipping_return_line_2` (`tax2`),
  KEY `FK_sale_shipping_return_line_3` (`tax3`),
  KEY `FK_sale_shipping_return_line_4` (`tax4`),
  KEY `FK_sale_shipping_return_line_5` (`tax5`),
  KEY `FK_sale_shipping_return_line_6` (`tare`),
  KEY `FK_sale_shipping_return_line_7` (`piece`),
  KEY `FK_sale_shipping_return_line_8` (`product`),
  CONSTRAINT `FK_sale_shipping_return_line_1` FOREIGN KEY (`tax1`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_line_2` FOREIGN KEY (`tax2`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_line_3` FOREIGN KEY (`tax3`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_line_4` FOREIGN KEY (`tax4`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_line_5` FOREIGN KEY (`tax5`) REFERENCES `commercial_tax` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_line_6` FOREIGN KEY (`tare`) REFERENCES `commercial_product_tare` (`Id`),
  CONSTRAINT `FK_sale_shipping_return_line_7` FOREIGN KEY (`piece`) REFERENCES `sale_shipping_return` (`Id`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `FK_sale_shipping_return_line_8` FOREIGN KEY (`product`) REFERENCES `commercial_product` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8 ROW_FORMAT=DYNAMIC;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `sale_transfering_shipping`
--

DROP TABLE IF EXISTS `sale_transfering_shipping`;
/*!50001 DROP VIEW IF EXISTS `sale_transfering_shipping`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sale_transfering_shipping` (
  `piece_type` varchar(74),
  `piece_typeName` varchar(16),
  `Id` int(11) unsigned,
  `code` varchar(45),
  `reference` varchar(45),
  `date` datetime,
  `IdPartner` int(11) unsigned,
  `partnerName` varchar(200),
  `BonDeCommande` varchar(45),
  `payment_conditionName` varchar(45),
  `payment_methodName` varchar(45),
  `total_amount` decimal(15,5),
  `paied_amount` decimal(15,5),
  `restAmount` decimal(16,5),
  `due_date` datetime
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sigeo_adresse`
--

DROP TABLE IF EXISTS `sigeo_adresse`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_adresse` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `pays` varchar(45) DEFAULT NULL,
  `gouvernerat` varchar(45) DEFAULT NULL,
  `ville` varchar(45) DEFAULT NULL,
  `code_postal` int(10) unsigned DEFAULT NULL,
  `avenue` varchar(45) DEFAULT NULL,
  `numero` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_age_tranche`
--

DROP TABLE IF EXISTS `sigeo_age_tranche`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_age_tranche` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) NOT NULL,
  `age_mois` int(10) unsigned NOT NULL,
  `sexe` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=27 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_age_tranche_dent_etat`
--

DROP TABLE IF EXISTS `sigeo_age_tranche_dent_etat`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_age_tranche_dent_etat` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `age_tranche` int(10) unsigned NOT NULL,
  `dent` int(10) unsigned NOT NULL,
  `dent_etat` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=105 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_benchiboub_inventaire`
--

DROP TABLE IF EXISTS `sigeo_benchiboub_inventaire`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_benchiboub_inventaire` (
  `boucle` int(15) unsigned DEFAULT NULL
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_berge`
--

DROP TABLE IF EXISTS `sigeo_berge`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_berge` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `nom` varchar(45) DEFAULT NULL,
  `prenom` varchar(45) DEFAULT NULL,
  `e_mail` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `code` varchar(45) DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `adresse` int(10) unsigned DEFAULT NULL,
  `sexe` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_boucle`
--

DROP TABLE IF EXISTS `sigeo_boucle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_boucle` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `date_ajout` datetime DEFAULT NULL,
  `position` int(10) unsigned DEFAULT NULL,
  `couleur` int(10) unsigned DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  `type_boucle` int(10) unsigned DEFAULT NULL,
  `date_pose` datetime DEFAULT NULL,
  `perdu` tinyint(1) DEFAULT '0',
  `date_perte` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3969 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_boucleOnInsert` AFTER INSERT ON `sigeo_boucle` FOR EACH ROW BEGIN
update sigeo_ovin set boucle = (select Id from sigeo_boucle where ovin = new.ovin and perdu=0 order by date_pose desc limit 1) where Id = new.ovin;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_boucleOnUpdate` AFTER UPDATE ON `sigeo_boucle` FOR EACH ROW BEGIN
update sigeo_ovin set boucle = (select Id from sigeo_boucle where ovin = new.ovin and perdu=0 order by date_pose desc limit 1) where Id = new.ovin;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_boucleOnDelete` AFTER DELETE ON `sigeo_boucle` FOR EACH ROW BEGIN
update sigeo_ovin set boucle = (select Id from sigeo_boucle where ovin = old.ovin and perdu=0 order by date_pose desc limit 1) where Id = old.ovin;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sigeo_boucle_officiel`
--

DROP TABLE IF EXISTS `sigeo_boucle_officiel`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_boucle_officiel` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` int(10) unsigned DEFAULT NULL,
  `date_ajout` varchar(45) DEFAULT NULL,
  `position` varchar(45) DEFAULT NULL,
  `couleur` varchar(45) DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `sigeo_bouclelist`
--

DROP TABLE IF EXISTS `sigeo_bouclelist`;
/*!50001 DROP VIEW IF EXISTS `sigeo_bouclelist`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sigeo_bouclelist` (
  `Id` int(10) unsigned,
  `code` varchar(45),
  `date_ajout` datetime,
  `position` int(10) unsigned,
  `couleur` int(10) unsigned,
  `ovin` int(10) unsigned,
  `type_boucle` int(10) unsigned,
  `date_pose` datetime,
  `perdu` tinyint(1),
  `date_perte` datetime
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sigeo_chient`
--

DROP TABLE IF EXISTS `sigeo_chient`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_chient` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `nom` varchar(45) DEFAULT NULL,
  `berge` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `berge` (`berge`),
  CONSTRAINT `berge` FOREIGN KEY (`berge`) REFERENCES `sigeo_berge` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_couleur`
--

DROP TABLE IF EXISTS `sigeo_couleur`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_couleur` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_couleur_boucle`
--

DROP TABLE IF EXISTS `sigeo_couleur_boucle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_couleur_boucle` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_dent`
--

DROP TABLE IF EXISTS `sigeo_dent`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_dent` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) CHARACTER SET latin1 NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_dent_etat`
--

DROP TABLE IF EXISTS `sigeo_dent_etat`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_dent_etat` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) CHARACTER SET latin1 NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=6 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_eleveur`
--

DROP TABLE IF EXISTS `sigeo_eleveur`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_eleveur` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `nom` varchar(45) DEFAULT NULL,
  `prenom` varchar(45) DEFAULT NULL,
  `e_mail` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `code` varchar(45) DEFAULT NULL,
  `adresse` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `sexe` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `adresse` (`adresse`),
  KEY `user` (`user`),
  CONSTRAINT `adresse` FOREIGN KEY (`adresse`) REFERENCES `sigeo_adresse` (`Id`),
  CONSTRAINT `user` FOREIGN KEY (`user`) REFERENCES `sigeo_user` (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=2 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_flow`
--

DROP TABLE IF EXISTS `sigeo_flow`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_flow` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ovin` int(10) unsigned NOT NULL,
  `date` datetime NOT NULL,
  `in_out` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `sigeo_flowdesc`
--

DROP TABLE IF EXISTS `sigeo_flowdesc`;
/*!50001 DROP VIEW IF EXISTS `sigeo_flowdesc`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sigeo_flowdesc` (
  `Id` int(10) unsigned,
  `ovin` int(10) unsigned,
  `in_out` int(10) unsigned,
  `code` varchar(45),
  `IdBoucle` int(10) unsigned,
  `date` datetime,
  `ES` varchar(6)
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sigeo_local`
--

DROP TABLE IF EXISTS `sigeo_local`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_local` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  `observation` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `superficie` float DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_lot`
--

DROP TABLE IF EXISTS `sigeo_lot`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_lot` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  `observation` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `activer` tinyint(1) DEFAULT '1',
  `date_ajout` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_lutte`
--

DROP TABLE IF EXISTS `sigeo_lutte`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_lutte` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  `date_debut` datetime DEFAULT NULL,
  `date_fin` datetime DEFAULT NULL,
  `IdType` int(10) unsigned DEFAULT NULL,
  `note` varchar(445) DEFAULT NULL,
  `IdParent` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=11 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_lutte_ovin`
--

DROP TABLE IF EXISTS `sigeo_lutte_ovin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_lutte_ovin` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `IdLutte` int(10) unsigned DEFAULT NULL,
  `IdOvin` int(10) unsigned DEFAULT NULL,
  `date_entree` datetime DEFAULT NULL,
  `date_sortie` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=516 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_lutte_ovinOnInsert` AFTER INSERT ON `sigeo_lutte_ovin` FOR EACH ROW BEGIN
call sigeo_set_statut(new.IdOvin);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_lutte_ovinOnDelete` AFTER DELETE ON `sigeo_lutte_ovin` FOR EACH ROW BEGIN
call sigeo_set_statut(old.IdOvin);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sigeo_nature_entree`
--

DROP TABLE IF EXISTS `sigeo_nature_entree`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_nature_entree` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_nature_sortie`
--

DROP TABLE IF EXISTS `sigeo_nature_sortie`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_nature_sortie` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_ouvrier`
--

DROP TABLE IF EXISTS `sigeo_ouvrier`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_ouvrier` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `nom` varchar(45) DEFAULT NULL,
  `prenom` varchar(45) DEFAULT NULL,
  `e_mail` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `code` varchar(45) DEFAULT NULL,
  `adresse` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `sexe` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_ovin`
--

DROP TABLE IF EXISTS `sigeo_ovin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_ovin` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `date_ajout` datetime DEFAULT NULL,
  `date_naissance` datetime DEFAULT NULL,
  `remarque` varchar(45) DEFAULT NULL,
  `sexe` int(10) unsigned DEFAULT NULL,
  `nature_entree` int(10) unsigned DEFAULT NULL,
  `nature_sortie` int(10) unsigned DEFAULT NULL,
  `couleur` int(10) unsigned DEFAULT NULL,
  `troupeau` int(10) unsigned DEFAULT NULL,
  `observation` varchar(1000) DEFAULT NULL,
  `race` int(10) unsigned DEFAULT NULL,
  `pere` int(10) unsigned DEFAULT NULL,
  `mere` int(10) unsigned DEFAULT NULL,
  `entree` tinyint(1) NOT NULL,
  `sortie` tinyint(1) NOT NULL,
  `date_entree` datetime DEFAULT NULL,
  `date_sortie` datetime DEFAULT NULL,
  `reforme` tinyint(1) NOT NULL DEFAULT '0',
  `date_reforme` datetime DEFAULT NULL,
  `cause_reforme` int(10) unsigned DEFAULT '0',
  `valeur_entree` decimal(15,5) DEFAULT NULL,
  `valeur_sortie` decimal(15,5) DEFAULT NULL,
  `statut` int(10) unsigned DEFAULT '0',
  `boucle` int(10) unsigned DEFAULT '0',
  `poids` int(10) unsigned DEFAULT '0',
  `sevrage` tinyint(1) DEFAULT '0',
  `date_sevrage` datetime DEFAULT NULL,
  `lutte` int(10) unsigned DEFAULT '0',
  `pere_operateur` tinyint(1) DEFAULT '0' COMMENT 'si l''operateur a saisie le pere alor true else false(automatique)',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3742 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_ovin_local`
--

DROP TABLE IF EXISTS `sigeo_ovin_local`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_ovin_local` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `date_affectation` datetime DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  `local` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_ovin_lot`
--

DROP TABLE IF EXISTS `sigeo_ovin_lot`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_ovin_lot` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `date_affectation` datetime DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  `lot` int(10) unsigned DEFAULT NULL,
  `date_sortie` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_ovin_statut`
--

DROP TABLE IF EXISTS `sigeo_ovin_statut`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_ovin_statut` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `date_affectation` datetime DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  `statut` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=49715 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_ovin_statutOnInsert` AFTER INSERT ON `sigeo_ovin_statut` FOR EACH ROW BEGIN
update sigeo_ovin set statut = (select Id from sigeo_ovin_statut where ovin = new.ovin order by date_affectation desc limit 1) where Id = new.ovin;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_ovin_statutOnUpdate` AFTER UPDATE ON `sigeo_ovin_statut` FOR EACH ROW BEGIN
update sigeo_ovin set statut = (select Id from sigeo_ovin_statut where ovin = new.ovin order by date_affectation desc limit 1) where Id = new.ovin;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_ovin_statutOnDelete` AFTER DELETE ON `sigeo_ovin_statut` FOR EACH ROW BEGIN
update sigeo_ovin set statut = (select Id from sigeo_ovin_statut where ovin = old.ovin order by date_affectation desc limit 1) where Id = old.ovin;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Temporary table structure for view `sigeo_ovin_statutlist`
--

DROP TABLE IF EXISTS `sigeo_ovin_statutlist`;
/*!50001 DROP VIEW IF EXISTS `sigeo_ovin_statutlist`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sigeo_ovin_statutlist` (
  `Id` int(10) unsigned,
  `date_ajout` datetime,
  `date_affectation` datetime,
  `ovin` int(10) unsigned,
  `statut` int(10) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sigeo_ovin_tonte`
--

DROP TABLE IF EXISTS `sigeo_ovin_tonte`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_ovin_tonte` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `tonte` int(10) unsigned DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=15 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `sigeo_ovinlist`
--

DROP TABLE IF EXISTS `sigeo_ovinlist`;
/*!50001 DROP VIEW IF EXISTS `sigeo_ovinlist`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sigeo_ovinlist` (
  `Id` int(10) unsigned,
  `code` varchar(45),
  `Boucle` varchar(45),
  `TypeBoucle` varchar(45),
  `DateDeNaissance` datetime,
  `AgeEnMois` bigint(21),
  `NbrJour` bigint(21),
  `Troupeau` varchar(45),
  `Sexe` varchar(45),
  `Statut` varchar(45),
  `AReforme` tinyint(1),
  `DateSortie` datetime,
  `NatureDeSortie` varchar(45),
  `pese` float,
  `observation` varchar(1000),
  `sortie` tinyint(1),
  `date_entree` datetime,
  `date_reforme` datetime,
  `CauseReforme` varchar(45)
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Temporary table structure for view `sigeo_ovinlistbouclestatutpoid`
--

DROP TABLE IF EXISTS `sigeo_ovinlistbouclestatutpoid`;
/*!50001 DROP VIEW IF EXISTS `sigeo_ovinlistbouclestatutpoid`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sigeo_ovinlistbouclestatutpoid` (
  `Id` int(10) unsigned,
  `code` varchar(45),
  `Boucle` varchar(45),
  `TypeBoucle` varchar(45),
  `DateDeNaissance` datetime,
  `AgeEnMois` bigint(21),
  `NbrJour` bigint(21),
  `Troupeau` varchar(45),
  `Sexe` varchar(45),
  `Statut` varchar(45),
  `AReforme` tinyint(1),
  `DateSortie` datetime,
  `NatureDeSortie` varchar(45),
  `pese` float,
  `observation` varchar(1000),
  `sortie` tinyint(1),
  `date_entree` datetime,
  `date_reforme` datetime,
  `CauseReforme` varchar(45)
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sigeo_poid_compagne`
--

DROP TABLE IF EXISTS `sigeo_poid_compagne`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_poid_compagne` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  `date_ajout` datetime DEFAULT NULL,
  `date_pesee` datetime DEFAULT NULL,
  `observation` varchar(255) DEFAULT NULL,
  `type_pesee` int(10) unsigned DEFAULT '0',
  `validated` tinyint(1) DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=24 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_poid_ovin`
--

DROP TABLE IF EXISTS `sigeo_poid_ovin`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_poid_ovin` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `ovin` int(10) unsigned NOT NULL,
  `poid_compagne` int(10) unsigned NOT NULL,
  `pesee` decimal(10,3) DEFAULT NULL,
  `observation` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_poids`
--

DROP TABLE IF EXISTS `sigeo_poids`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_poids` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `date_pesee` datetime DEFAULT NULL,
  `observation` varchar(255) DEFAULT NULL,
  `pese` float DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  `type_pesee` int(10) unsigned DEFAULT '0',
  `poid_compagne` int(10) unsigned DEFAULT '0',
  `gmq` decimal(15,5) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=11982 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_poidsOnInsert` AFTER INSERT ON `sigeo_poids` FOR EACH ROW BEGIN
update sigeo_ovin set poids = (select Id from sigeo_poids where ovin = new.ovin order by date_pesee desc limit 1) where Id = new.ovin;
call sigeo_set_statut(new.ovin);
call sigeo_calculatePoidsAuAgeType(new.ovin);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_poidsOnUpdate` AFTER UPDATE ON `sigeo_poids` FOR EACH ROW BEGIN
update sigeo_ovin set poids = (select Id from sigeo_poids where ovin = new.ovin order by date_pesee desc limit 1) where Id = new.ovin;
call sigeo_set_statut(new.ovin);
call sigeo_calculatePoidsAuAgeType(new.ovin);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'NO_AUTO_VALUE_ON_ZERO' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50017 DEFINER=`root`@`localhost`*/ /*!50003 TRIGGER `trigger_sigeo_poidsOnDelete` AFTER DELETE ON `sigeo_poids` FOR EACH ROW BEGIN
update sigeo_ovin set poids = (select Id from sigeo_poids where ovin = old.ovin order by date_pesee desc limit 1) where Id = old.ovin;
call sigeo_set_statut(old.ovin);
call sigeo_calculatePoidsAuAgeType(old.ovin);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Table structure for table `sigeo_poids_gmq`
--

DROP TABLE IF EXISTS `sigeo_poids_gmq`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_poids_gmq` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `poids` int(10) unsigned NOT NULL,
  `val` int(10) unsigned NOT NULL,
  PRIMARY KEY (`Id`),
  KEY `FK_sigeo_poids_gmq_1` (`poids`),
  CONSTRAINT `FK_sigeo_poids_gmq_1` FOREIGN KEY (`poids`) REFERENCES `sigeo_poids` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_poids_gmq_genetique`
--

DROP TABLE IF EXISTS `sigeo_poids_gmq_genetique`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_poids_gmq_genetique` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `poids_naissance` decimal(10,3) DEFAULT NULL,
  `poids10` decimal(10,3) DEFAULT NULL,
  `poids30` decimal(10,3) DEFAULT NULL,
  `gmq0030` decimal(10,3) DEFAULT NULL,
  `gmq1030` decimal(10,3) DEFAULT NULL,
  `poids70` decimal(10,3) DEFAULT NULL,
  `gmq3070` decimal(10,3) DEFAULT NULL,
  `poids90` decimal(10,3) DEFAULT NULL,
  `gmq3090` decimal(10,3) DEFAULT NULL,
  `poids120` decimal(10,3) DEFAULT NULL,
  `gmq30120` decimal(10,3) DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=13609 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_poids_type`
--

DROP TABLE IF EXISTS `sigeo_poids_type`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_poids_type` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  `nbr_jour` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Temporary table structure for view `sigeo_poidslist`
--

DROP TABLE IF EXISTS `sigeo_poidslist`;
/*!50001 DROP VIEW IF EXISTS `sigeo_poidslist`*/;
SET @saved_cs_client     = @@character_set_client;
SET character_set_client = utf8;
/*!50001 CREATE TABLE `sigeo_poidslist` (
  `Id` int(10) unsigned,
  `date_ajout` datetime,
  `date_pesee` datetime,
  `observation` varchar(255),
  `pese` float,
  `ovin` int(10) unsigned,
  `type_pesee` int(10) unsigned
) ENGINE=MyISAM */;
SET character_set_client = @saved_cs_client;

--
-- Table structure for table `sigeo_position_boucle`
--

DROP TABLE IF EXISTS `sigeo_position_boucle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_position_boucle` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=4 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_race`
--

DROP TABLE IF EXISTS `sigeo_race`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_race` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `observation` varchar(45) DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `couleur` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_race_croisee`
--

DROP TABLE IF EXISTS `sigeo_race_croisee`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_race_croisee` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `observation` varchar(45) DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `couleur` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_race_pure`
--

DROP TABLE IF EXISTS `sigeo_race_pure`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_race_pure` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `observation` varchar(45) DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `couleur` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_reforme`
--

DROP TABLE IF EXISTS `sigeo_reforme`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_reforme` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  `sexe` int(10) unsigned DEFAULT '0',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_rfid`
--

DROP TABLE IF EXISTS `sigeo_rfid`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_rfid` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` int(10) unsigned DEFAULT NULL,
  `date_ajout` varchar(45) DEFAULT NULL,
  `position` varchar(45) DEFAULT NULL,
  `couleur` varchar(45) DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_sexe`
--

DROP TABLE IF EXISTS `sigeo_sexe`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_sexe` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `designation` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_statut`
--

DROP TABLE IF EXISTS `sigeo_statut`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_statut` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `libelle` varchar(45) CHARACTER SET latin1 DEFAULT NULL,
  `sexe` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB AUTO_INCREMENT=8 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_statut_compagne`
--

DROP TABLE IF EXISTS `sigeo_statut_compagne`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_statut_compagne` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `date_ajout` datetime DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  `date_affectation` datetime DEFAULT NULL,
  `observation` varchar(45) DEFAULT NULL,
  `statut` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_tatouage`
--

DROP TABLE IF EXISTS `sigeo_tatouage`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_tatouage` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` int(10) unsigned DEFAULT NULL,
  `date_ajout` varchar(45) DEFAULT NULL,
  `position` varchar(45) DEFAULT NULL,
  `couleur` varchar(45) DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_tip_tag`
--

DROP TABLE IF EXISTS `sigeo_tip_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_tip_tag` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` int(10) unsigned DEFAULT NULL,
  `date_ajout` varchar(45) DEFAULT NULL,
  `position` varchar(45) DEFAULT NULL,
  `couleur` varchar(45) DEFAULT NULL,
  `ovin` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_tonte`
--

DROP TABLE IF EXISTS `sigeo_tonte`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_tonte` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `observation` varchar(2000) DEFAULT NULL,
  `description` varchar(2000) DEFAULT NULL,
  `date` datetime DEFAULT NULL,
  `date_ajout` datetime DEFAULT NULL,
  `prix_unitaire` decimal(10,3) DEFAULT '0.000',
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_troupeau`
--

DROP TABLE IF EXISTS `sigeo_troupeau`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_troupeau` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `code` varchar(45) DEFAULT NULL,
  `date_ajout` datetime DEFAULT NULL,
  `date_creation` datetime DEFAULT NULL,
  `libelle` varchar(45) DEFAULT NULL,
  `remarque` varchar(45) DEFAULT NULL,
  `observation` varchar(45) DEFAULT NULL,
  `eleveur` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=3 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_type_boucle`
--

DROP TABLE IF EXISTS `sigeo_type_boucle`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_type_boucle` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  `date_ajout` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=7 DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_type_lutte`
--

DROP TABLE IF EXISTS `sigeo_type_lutte`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_type_lutte` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `libelle` varchar(45) DEFAULT NULL,
  PRIMARY KEY (`Id`)
) ENGINE=InnoDB AUTO_INCREMENT=5 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_user`
--

DROP TABLE IF EXISTS `sigeo_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_user` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_name` varchar(45) DEFAULT NULL,
  `password` varchar(45) DEFAULT NULL,
  `date_ajout` datetime DEFAULT NULL,
  PRIMARY KEY (`Id`) USING BTREE
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Table structure for table `sigeo_veterinaire`
--

DROP TABLE IF EXISTS `sigeo_veterinaire`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `sigeo_veterinaire` (
  `Id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `nom` varchar(45) DEFAULT NULL,
  `prenom` varchar(45) DEFAULT NULL,
  `e_mail` varchar(45) DEFAULT NULL,
  `mobile` varchar(45) DEFAULT NULL,
  `phone` varchar(45) DEFAULT NULL,
  `fax` varchar(45) DEFAULT NULL,
  `description` varchar(45) DEFAULT NULL,
  `code` varchar(45) DEFAULT NULL,
  `adresse` int(10) unsigned DEFAULT NULL,
  `user` int(10) unsigned DEFAULT NULL,
  `sexe` int(10) unsigned DEFAULT NULL,
  PRIMARY KEY (`Id`),
  KEY `adrersse` (`adresse`),
  CONSTRAINT `adrersse` FOREIGN KEY (`adresse`) REFERENCES `sigeo_adresse` (`Id`)
) ENGINE=InnoDB DEFAULT CHARSET=latin1;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping events for database 'mdt_test'
--

--
-- Dumping routines for database 'mdt_test'
--
/*!50003 DROP FUNCTION IF EXISTS `check_actual_stock_by_product_session_and_quantity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_actual_stock_by_product_session_and_quantity`(p_product int, p_session int, p_quantity decimal(15,5)) RETURNS tinyint(1)
BEGIN
declare p_stock decimal default 0;
if((select `type` from commercial_product where Id=p_product)=3) then
return true;
else
SELECT        actual_stock into p_stock
FROM            commercial_product_stock_warehouse
WHERE        (commercial_product_stock_warehouse.product = p_product) and (commercial_product_stock_warehouse.warehouse=(SELECT        pos_category_product.warehouse
FROM            pos_session INNER JOIN
pos_category ON pos_session.pos = pos_category.point_of_sale INNER JOIN
pos_category_product ON pos_category.Id = pos_category_product.category
WHERE        (pos_session.Id = p_session) AND (pos_category_product.product = p_product)
GROUP BY pos_category_product.product))
order by Id desc
limit 1;
if(p_stock-p_quantity<0)then
return false;
else
return true;
end if;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `check_actual_stock_by_product_warehouse_and_quantity` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_actual_stock_by_product_warehouse_and_quantity`(p_product int, p_warehouse int, p_quantity decimal(15,5)) RETURNS tinyint(1)
BEGIN
declare p_stock decimal default 0;
if((select `type` from commercial_product where Id=p_product)=3) then
return true;
else
SELECT        actual_stock into p_stock
FROM            commercial_product_stock_warehouse
WHERE        (commercial_product_stock_warehouse.product = p_product) and (commercial_product_stock_warehouse.warehouse=p_warehouse)
order by Id desc
limit 1;
if(p_stock-p_quantity<0)then
return false;
else
return true;
end if;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `check_purchase_invoice_freind` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_purchase_invoice_freind`(piece int) RETURNS tinyint(1)
BEGIN
declare trouv bool default false;
declare v_order int;
declare v_shipping int;
select `order` into v_order from purchase_invoice where Id=piece;
select count(Id) into v_shipping from purchase_shipping where invoice=piece;
if v_order<>0 or v_shipping<>0 then
set trouv=true;
end if;
return trouv;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `check_purchase_order_freind` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_purchase_order_freind`(piece int) RETURNS tinyint(1)
BEGIN
declare trouv bool default false;
declare v_shipping int;
declare v_invoice int;
select count(Id) into v_shipping from purchase_shipping where `order`=piece;
select count(Id) into v_invoice from purchase_invoice where `order`=piece;
if v_invoice<>0 or v_shipping<>0 then
set trouv=true;
end if;
return trouv;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `check_purchase_shipping_freind` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_purchase_shipping_freind`(piece int) RETURNS tinyint(1)
BEGIN
declare trouv bool default false;
declare v_order int default 0;
declare v_invoice int default 0;
set v_invoice = (select  (case coalesce(purchase_shipping.invoice ,0)  when  0 then coalesce(purchase_invoice_1.Id,0) else coalesce(purchase_shipping.invoice,0) end)
FROM            purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id and purchase_order.validated=1 LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=1 LEFT OUTER JOIN
purchase_invoice purchase_invoice_1 ON purchase_order.Id = purchase_invoice_1.`order` and purchase_invoice_1.validated=1 AND purchase_invoice_1.`order` <> 0
where purchase_shipping.Id = piece);
if(v_invoice=0) then
set v_order = (select  (case coalesce(purchase_shipping.`order`,0)  when  0 then coalesce(purchase_order_1.Id,0) else coalesce(purchase_shipping.`order`,0) end)
FROM            purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id and purchase_order.validated=1 LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=1 LEFT OUTER JOIN
purchase_order purchase_order_1 ON purchase_invoice.`order` = purchase_order_1.Id  and purchase_order_1.validated=1 AND purchase_invoice.`order` <> 0
where purchase_shipping.Id = piece);
end if;
if v_order<>0 or v_invoice<>0 then
set trouv=true;
end if;
return trouv;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `check_sale_invoice_freind` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_sale_invoice_freind`(piece int) RETURNS tinyint(1)
BEGIN
declare trouv bool default false;
declare v_order int;
declare v_shipping int;
declare v_pos_order int;
select `order` into v_order from sale_invoice where Id=piece;
select count(Id) into v_shipping from sale_shipping where invoice=piece;
select count(Id) into v_pos_order from pos_order where invoice=piece;
if v_order<>0 or v_shipping<>0 then
set trouv=true;
end if;
return trouv;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `check_sale_order_freind` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_sale_order_freind`(piece int) RETURNS tinyint(1)
BEGIN
declare trouv bool default false;
declare v_shipping int;
declare v_invoice int;
select count(Id) into v_shipping from sale_shipping where `order`=piece;
select count(Id) into v_invoice from sale_invoice where `order`=piece;
if v_invoice<>0 or v_shipping<>0 then
set trouv=true;
end if;
return trouv;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `check_sale_shipping_freind` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `check_sale_shipping_freind`(piece int) RETURNS tinyint(1)
BEGIN
declare trouv bool default false;
declare v_order int default 0;
declare v_invoice int default 0;
set v_invoice = (select  (case coalesce(sale_shipping.invoice ,0)  when  0 then coalesce(sale_invoice_1.Id,0) else coalesce(sale_shipping.invoice,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id and sale_order.validated=1 LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=1 LEFT OUTER JOIN
sale_invoice sale_invoice_1 ON sale_order.Id = sale_invoice_1.`order` and sale_invoice_1.validated=1 AND sale_invoice_1.`order` <> 0
where sale_shipping.Id = piece);
if(v_invoice=0) then
set v_order = (select  (case coalesce(sale_shipping.`order`,0)  when  0 then coalesce(sale_order_1.Id,0) else coalesce(sale_shipping.`order`,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id and sale_order.validated=1 LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=1 LEFT OUTER JOIN
sale_order sale_order_1 ON sale_invoice.`order` = sale_order_1.Id  and sale_order_1.validated=1 AND sale_invoice.`order` <> 0
where sale_shipping.Id = piece);
end if;
if v_order<>0 or v_invoice<>0 then
set trouv=true;
end if;
return trouv;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_batch_getCUMP` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_batch_getCUMP`(p_batch INT, piece INT, line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE InitialStock DECIMAL(15,5);
    DECLARE old_average_cost DECIMAL(15,5);
    DECLARE new_average_cost DECIMAL(15,5);
    DECLARE logistic_cost decimal(15,5);
    
    -- Get batch information and product details
    SELECT 
        cbp.batch,
        cbp.product, 
        cbp.quantity, 
        (price - (price * discount)) * IF(atooerp_currency.principal = 1, 1, COALESCE(currency_rate, 1)), 
        purchase_shipping.warehouse
    INTO 
        p_batch, IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        commercial_batch_piece cbp 
    LEFT OUTER JOIN
        purchase_shipping_line ON purchase_shipping_line.range = cbp.purchase_shipping_line AND purchase_shipping_line.piece = cbp.purchase_shipping  
    JOIN
        purchase_shipping ON piece = purchase_shipping.Id 
    JOIN
        atooerp_currency ON atooerp_currency.Id = purchase_shipping.currency
    WHERE
        cbp.purchase_shipping_line = line AND cbp.purchase_shipping = piece AND cbp.batch = p_batch;

    if(p_quantity > 0) then
        SELECT SUM(cost_amount) INTO logistic_cost  FROM commercial_logistics_cost_line LEFT OUTER JOIN
        purchase_shipping_line ON purchase_shipping_line.piece = commercial_logistics_cost_line.shipping 
        AND purchase_shipping_line.product = commercial_logistics_cost_line.product LEFT OUTER JOIN
        commercial_logistics_cost ON commercial_logistics_cost.`Id` = commercial_logistics_cost_line.logistics_cost
        WHERE purchase_shipping_line.range = line  AND purchase_shipping_line.piece = piece AND commercial_logistics_cost.validated = 1;
    end if;

    IF(sign = -1) THEN
        SELECT last_price_cost INTO p_price FROM commercial_batch_stock_log
        WHERE piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
        AND piece_line = line
        AND piece_id = piece
        AND `action` = 'insert'
        ORDER BY Id DESC
        LIMIT 1;
    END IF;
    
    -- Get current stock and CUMP value
    SELECT 
        COALESCE(quantity, 0), 
        COALESCE(average_cost, 0) 
    INTO 
        InitialStock, old_average_cost
    FROM 
        commercial_batch_warehouse
    WHERE 
        batch = p_batch AND warehouse = IdWarehouse;
    
    -- Ensure stock values are not negative
    IF (InitialStock < 0) THEN 
        SET InitialStock = 0;
    END IF;
    
    IF (p_quantity < 0) THEN 
        SET p_quantity = 0;
    END IF;
    
    -- Calculate new CUMP (Cost Unit Medium Ponderate)
    IF ((InitialStock + p_quantity * sign) <> 0 AND old_average_cost > 0) THEN
        SET new_average_cost = ((COALESCE(InitialStock, 0) * COALESCE(old_average_cost, 0)) + 
                      (p_quantity * p_price * sign)) / 
                      (COALESCE(InitialStock, 0) + p_quantity * sign);
    ELSE
        SET new_average_cost = p_price;
    END IF;
    
    -- Return non-negative CUMP
    IF (new_average_cost >= 0) THEN
        RETURN new_average_cost;
    ELSE
        RETURN 0;
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_batch_getCUMPBySale_shipping_return_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_batch_getCUMPBySale_shipping_return_line`(p_batch INT, piece INT, line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE InitialStock DECIMAL(15,5);
    DECLARE old_average_cost DECIMAL(15,5);
    DECLARE new_average_cost DECIMAL(15,5);
    
    -- Get batch information and product details
    SELECT 
        cbp.batch,
        cbp.product, 
        cbp.quantity, 
        (price - (price * discount)) * IF(atooerp_currency.principal = 1, 1, COALESCE(currency_rate, 1)), 
        sale_shipping_return.warehouse
    INTO 
        p_batch, IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        commercial_batch_piece cbp 
    LEFT OUTER JOIN
        sale_shipping_return_line ON sale_shipping_return_line.range = cbp.sale_shipping_return_line AND sale_shipping_return_line.piece = cbp.sale_shipping_return  
    JOIN
        sale_shipping_return ON piece = sale_shipping_return.Id 
    JOIN
        atooerp_currency ON atooerp_currency.Id = sale_shipping_return.currency
    WHERE
        cbp.sale_shipping_return_line = line AND cbp.sale_shipping_return = piece AND cbp.batch = p_batch;

    IF(sign = -1) THEN
        SELECT last_price_cost INTO p_price FROM commercial_batch_stock_log
        WHERE piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
        AND piece_line = line
        AND piece_id = piece
        AND `action` = 'insert'
        ORDER BY Id DESC
        LIMIT 1;
    END IF;
    
    -- Get current stock and CUMP value
    SELECT 
        COALESCE(quantity, 0), 
        COALESCE(average_cost, 0) 
    INTO 
        InitialStock, old_average_cost
    FROM 
        commercial_batch_warehouse
    WHERE 
        batch = p_batch AND warehouse = IdWarehouse;
    
    -- Ensure stock values are not negative
    IF (InitialStock < 0) THEN 
        SET InitialStock = 0;
    END IF;
    
    IF (p_quantity < 0) THEN 
        SET p_quantity = 0;
    END IF;
    
    -- Calculate new CUMP (Cost Unit Medium Ponderate)
    IF ((InitialStock + p_quantity * sign) <> 0 AND old_average_cost > 0) THEN
        SET new_average_cost = ((COALESCE(InitialStock, 0) * COALESCE(old_average_cost, 0)) + 
                      (p_quantity * p_price * sign)) / 
                      (COALESCE(InitialStock, 0) + p_quantity * sign);
    ELSE
        SET new_average_cost = p_price;
    END IF;
    
    -- Return non-negative CUMP
    IF (new_average_cost >= 0) THEN
        RETURN new_average_cost;
    ELSE
        RETURN 0;
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_batch_getCUMPByStock_entry_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_batch_getCUMPByStock_entry_line`(p_batch INT, piece INT, line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE InitialStock DECIMAL(15,5);
    DECLARE old_average_cost DECIMAL(15,5);
    DECLARE new_average_cost DECIMAL(15,5);
    
    -- Get batch information and product details
    SELECT 
        cbp.batch,
        cbp.product, 
        cbp.quantity, 
        csel.cump, 
        cse.warehouse  
    INTO 
        p_batch, IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        commercial_batch_piece cbp 
    LEFT OUTER JOIN
        commercial_stock_entry_line csel ON csel.range = cbp.stock_entry_line AND csel.piece = cbp.stock_entry  
    LEFT OUTER JOIN
        commercial_stock_entry cse ON csel.piece = cse.Id 
    LEFT OUTER JOIN
        commercial_product_stock_warehouse cpsw ON cpsw.product = cbp.product AND cpsw.warehouse = cse.warehouse
    WHERE 
        cbp.stock_entry_line = line AND cbp.stock_entry = piece AND cbp.batch = p_batch;

    IF(sign = -1) THEN
        SELECT last_price_cost INTO p_price FROM commercial_batch_stock_log
        WHERE piece_type = 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
        AND piece_line = line
        AND piece_id = piece
        AND `action` = 'insert'
        ORDER BY Id DESC
        LIMIT 1;
    END IF;
    
    -- Get current stock and CUMP value
    SELECT 
        COALESCE(quantity, 0), 
        COALESCE(average_cost, 0) 
    INTO 
        InitialStock, old_average_cost
    FROM 
        commercial_batch_warehouse
    WHERE 
        batch = p_batch AND warehouse = IdWarehouse;
    
    -- Ensure stock values are not negative
    IF (InitialStock < 0) THEN 
        SET InitialStock = 0;
    END IF;
    
    IF (p_quantity < 0) THEN 
        SET p_quantity = 0;
    END IF;
    
    -- Calculate new CUMP (Cost Unit Medium Ponderate)
    IF ((InitialStock + p_quantity * sign) <> 0 AND old_average_cost > 0) THEN
        SET new_average_cost = ((COALESCE(InitialStock, 0) * COALESCE(old_average_cost, 0)) + 
                      (p_quantity * p_price * sign)) / 
                      (COALESCE(InitialStock, 0) + p_quantity * sign);
    ELSE
        SET new_average_cost = p_price;
    END IF;
    
    -- Return non-negative CUMP
    IF (new_average_cost >= 0) THEN
        RETURN new_average_cost;
    ELSE
        RETURN 0;
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_batch_getLastPriceCost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_batch_getLastPriceCost`(p_batch INT, piece INT, line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE InitialStock DECIMAL(15,5);
    DECLARE oldLastPriceCost DECIMAL(15,5);
    DECLARE newLastPriceCost DECIMAL(15,5);
    
    -- Get batch information and product details
    SELECT 
        cbp.batch,
        cbp.product, 
        cbp.quantity, 
        (price - (price * discount)) * IF(atooerp_currency.principal = 1, 1, COALESCE(currency_rate, 1)), 
        warehouse  
    INTO 
        p_batch, IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        commercial_batch_piece cbp 
    LEFT OUTER JOIN
        purchase_shipping_line ON purchase_shipping_line.range = cbp.purchase_shipping_line AND purchase_shipping_line.piece = cbp.purchase_shipping  
    JOIN
        purchase_shipping ON purchase_shipping_line.piece = purchase_shipping.Id 
    JOIN
        atooerp_currency ON atooerp_currency.Id = purchase_shipping.currency
    WHERE 
        cbp.purchase_shipping_line = line AND cbp.purchase_shipping = piece AND cbp.batch = p_batch;
    
    -- Determine the last price cost based on sign
    IF (sign = 1) THEN 
        SET newLastPriceCost = p_price;
    ELSE
        -- Get the current last price cost
        SELECT last_price_cost INTO oldLastPriceCost
        FROM commercial_batch_warehouse
        WHERE batch = p_batch AND warehouse = IdWarehouse;
        IF(oldLastPriceCost IS NOT NULL) THEN
            -- If current price matches, find the previous price
            IF (oldLastPriceCost = p_price) THEN
                SELECT last_price_cost INTO newLastPriceCost 
                FROM commercial_batch_stock_log
                WHERE (piece_line <> line 
                OR piece_id <> piece)
                AND batch = p_batch 
                AND warehouse = IdWarehouse
                ORDER BY Id DESC
                LIMIT 1;
            ELSE
                SET newLastPriceCost = oldLastPriceCost;
            END IF;
        END IF;
    END IF;
    
    -- Return the calculated last price cost or 0 if NULL
    RETURN COALESCE(newLastPriceCost, 0);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_batch_getLastPriceCostBySale_shipping_return_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_batch_getLastPriceCostBySale_shipping_return_line`(p_batch INT, piece INT, line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE InitialStock DECIMAL(15,5);
    DECLARE oldLastPriceCost DECIMAL(15,5);
    DECLARE newLastPriceCost DECIMAL(15,5);
    
    -- Get batch information and product details
    SELECT 
        cbp.batch,
        cbp.product, 
        cbp.quantity, 
        (price - (price * discount)) * IF(atooerp_currency.principal = 1, 1, COALESCE(currency_rate, 1)), 
        warehouse  
    INTO 
        p_batch, IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        commercial_batch_piece cbp 
    LEFT OUTER JOIN
        sale_shipping_return_line ON sale_shipping_return_line.range = cbp.sale_shipping_return_line AND sale_shipping_return_line.piece = cbp.sale_shipping_return  
    JOIN
        sale_shipping_return ON sale_shipping_return_line.piece = sale_shipping_return.Id 
    JOIN
        atooerp_currency ON atooerp_currency.Id = sale_shipping_return.currency
    WHERE 
        cbp.sale_shipping_return_line = line AND cbp.sale_shipping_return = piece AND cbp.batch = p_batch;
    
    -- Determine the last price cost based on sign
    IF (sign = 1) THEN 
        SET newLastPriceCost = p_price;
    ELSE
        -- Get the current last price cost
        SELECT last_price_cost INTO oldLastPriceCost
        FROM commercial_batch_warehouse
        WHERE batch = p_batch AND warehouse = IdWarehouse;
        IF(oldLastPriceCost IS NOT NULL) THEN
            -- If current price matches, find the previous price
            IF (oldLastPriceCost = p_price) THEN
                SELECT last_price_cost INTO newLastPriceCost 
                FROM commercial_batch_stock_log
                WHERE (piece_line <> line 
                OR piece_id <> piece)
                AND batch = p_batch 
                AND warehouse = IdWarehouse
                ORDER BY Id DESC
                LIMIT 1;
            ELSE
                SET newLastPriceCost = oldLastPriceCost;
            END IF;
        END IF;
    END IF;
    
    -- Return the calculated last price cost or 0 if NULL
    RETURN COALESCE(newLastPriceCost, 0);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_batch_getLastPriceCostByStock_entry_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_batch_getLastPriceCostByStock_entry_line`(p_batch INT, piece INT, line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE oldLastPriceCost DECIMAL(15,5);
    DECLARE newLastPriceCost DECIMAL(15,5);
    
    -- Get batch information and product details
    SELECT 
        cbp.batch,
        cbp.product, 
        cbp.quantity, 
        csel.cump, 
        cse.warehouse  
    INTO 
        p_batch, IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        commercial_batch_piece cbp 
    LEFT OUTER JOIN
        commercial_stock_entry_line csel ON csel.range = cbp.stock_entry_line AND csel.piece = cbp.stock_entry  
    LEFT OUTER JOIN
        commercial_stock_entry cse ON csel.piece = cse.Id 
    LEFT OUTER JOIN
        commercial_product_stock_warehouse cpsw ON cpsw.product = cbp.product AND cpsw.warehouse = cse.warehouse
    WHERE 
        cbp.stock_entry_line = line AND cbp.stock_entry = piece AND cbp.batch = p_batch;
    
    -- Determine the last price cost based on sign
    IF (sign = 1) THEN 
        SET newLastPriceCost = p_price;
    ELSE
        -- Get the current last price cost
        SELECT 
            last_price_cost 
        INTO 
            oldLastPriceCost
        FROM 
            commercial_batch_warehouse
        WHERE 
            batch = p_batch AND warehouse = IdWarehouse;
            
        -- Check if oldLastPriceCost is not NULL
        IF (oldLastPriceCost IS NOT NULL) THEN
            -- If current price matches, find the previous price
            IF (oldLastPriceCost = p_price) THEN
                SELECT 
                    last_price_cost 
                INTO 
                    newLastPriceCost 
                FROM 
                    commercial_batch_stock_log
                WHERE 
                    (piece_line <> line OR piece_id <> piece)
                    AND batch = p_batch 
                    AND warehouse = IdWarehouse
                ORDER BY 
                    Id DESC
                LIMIT 1;
            ELSE
                SET newLastPriceCost = oldLastPriceCost;
            END IF;
        END IF;
    END IF;
    
    -- Return the calculated last price cost or 0 if NULL
    RETURN COALESCE(newLastPriceCost, 0);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getByBatchCost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getByBatchCost`(line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE byBatchCost DECIMAL(15,5);
    
    -- Get product information from purchase shipping line
    SELECT 
        product, 
        quantity, 
        (price - (price * discount)) * IF(atooerp_currency.principal = 1, 1, COALESCE(currency_rate, 1)), 
        warehouse 
    INTO 
        IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        purchase_shipping_line 
    JOIN 
        purchase_shipping ON piece = purchase_shipping.Id 
    JOIN 
        atooerp_currency ON atooerp_currency.Id = purchase_shipping.currency
    WHERE 
        purchase_shipping_line.Id = line;
    
    -- Calculate the batch cost based on warehouse inventory
    SELECT 
        SUM(quantity * cost) / SUM(quantity) 
    INTO 
        byBatchCost 
    FROM 
        commercial_batch_warehouse
    WHERE 
        product = IdProduct AND warehouse = IdWarehouse;
    
    -- Return the calculated batch cost
    RETURN byBatchCost;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getCUMP` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getCUMP`(line int, sign int) RETURNS decimal(15,5)
BEGIN
declare IdProduct int;
declare IdWarehouse int;
declare p_quantity decimal(15,5);
declare p_price decimal(15,5);
declare InitialStock decimal(15,5);
declare old_average_cost decimal(15,5);
declare new_average_cost decimal(15,5);
DECLARE logistic_cost decimal(15,5);

select product, quantity, (tax1_base) * if(atooerp_currency.principal = 1, 1, coalesce(currency_rate, 1)) , warehouse  into IdProduct, p_quantity, p_price, IdWarehouse
from purchase_shipping_line join
purchase_shipping on piece = purchase_shipping.Id join
atooerp_currency on atooerp_currency.Id = purchase_shipping.currency
where purchase_shipping_line.Id = line;

if(p_quantity > 0) then
  SELECT SUM(cost_amount) INTO logistic_cost  FROM commercial_logistics_cost_line WHERE product = line ;

  SET p_price = p_price + COALESCE(logistic_cost, 0);
end if;

IF(sign = -1) THEN
  SELECT last_price_cost INTO p_price FROM commercial_product_stock
  WHERE piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
  AND piece_line = line
  AND `action` = 'insert'
  ORDER BY Id DESC
  LIMIT 1;
END IF;

select coalesce(actual_stock,0), coalesce(average_cost,0) into InitialStock, old_average_cost
from commercial_product_stock_warehouse
where product = IdProduct and warehouse= IdWarehouse;
if(InitialStock<0) then set InitialStock = 0;end if;
if(p_quantity<0) then set p_quantity = 0;end if;
if((InitialStock + p_quantity)<>0 and old_average_cost>0) then
set new_average_cost = ((coalesce(InitialStock,0) * coalesce(old_average_cost,0)) + (p_quantity * p_price * sign)) / (coalesce(InitialStock,0) + p_quantity * sign);
else
set new_average_cost = p_price;
end if;
if(new_average_cost>=0) then
return new_average_cost;
else
return 0;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getCUMPByPOS_credit_order_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getCUMPByPOS_credit_order_line`(line int) RETURNS decimal(15,5)
BEGIN
declare IdProduct int;
declare IdWarehouse int;
declare p_quantity decimal(15,5);
declare p_price decimal(15,5);
declare InitialStock decimal(15,5);
declare oldCUMP decimal(15,5);
declare newCUMP decimal(15,5);


select product, quantity, ((price -(price * discount)) * (coalesce(commercial_vat.`value` * tva_chec,0) + 1)), warehouse into IdProduct, p_quantity, p_price, IdWarehouse
from pos_credit_order_line left join
commercial_vat on commercial_vat.Id = pos_credit_order_line.vat left join
pos_credit_order on piece = pos_credit_order.Id
where pos_credit_order_line.Id = line;

select coalesce(actual_stock,0), coalesce(cump,0) into InitialStock, oldCUMP
from commercial_product_stock_warehouse
where product = IdProduct and warehouse= IdWarehouse;

if(InitialStock<0) then set InitialStock = 0;end if;
if(p_quantity<0) then set p_quantity = 0;end if;

if((InitialStock + p_quantity)<>0 and oldCUMP>0) then
set newCUMP = ((coalesce(InitialStock,0) * coalesce(oldCUMP,0)) + (p_quantity * p_price)) / (coalesce(InitialStock,0) + p_quantity);
else
set newCUMP = p_price;
end if;

if(newCUMP>=0) then
return newCUMP;
else
return 0; end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getCUMPByPurchase_credit_invoice_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getCUMPByPurchase_credit_invoice_line`(line int, sign int) RETURNS decimal(15,5)
BEGIN

declare IdProduct int;
declare IdWarehouse int;
declare p_quantity decimal(15,5);
declare p_price decimal(15,5);
declare InitialStock decimal(15,5);
declare oldCUMP decimal(15,5);
declare newCUMP decimal(15,5);
select product, quantity, ((price -(price * discount)) * (coalesce(commercial_fodec.`value`,0) + 1) * (coalesce(commercial_vat.`value`* tva_chec,0) + 1)), warehouse into IdProduct, p_quantity, p_price, IdWarehouse
from purchase_credit_invoice_line left join
commercial_vat on commercial_vat.Id = purchase_credit_invoice_line.vat left join
purchase_credit_invoice on piece = purchase_credit_invoice.Id left join
commercial_fodec on purchase_credit_invoice.fodec = commercial_fodec.Id and purchase_credit_invoice.fodec_chec = 1
where purchase_credit_invoice_line.Id = line;

select coalesce(actual_stock,0), coalesce(cump,0) into InitialStock, oldCUMP
from commercial_product_stock_warehouse
where product = IdProduct and warehouse= IdWarehouse;
if(InitialStock<0) then set InitialStock = 0;end if;
if(p_quantity<0) then set p_quantity = 0;end if;
if((InitialStock + p_quantity)<>0 and oldCUMP>0) then
set newCUMP = ((coalesce(InitialStock,0) * coalesce(oldCUMP,0)) - (p_quantity * p_price * sign)) / (coalesce(InitialStock,0) - p_quantity * sign);
else
set newCUMP = p_price;
end if;
if(newCUMP>=0) then
return newCUMP;
else
return 0; end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getCUMPBySale_credit_invoice_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getCUMPBySale_credit_invoice_line`(line int) RETURNS decimal(15,5)
BEGIN
declare IdProduct int;
declare IdWarehouse int;
declare p_quantity decimal(15,5);
declare p_price decimal(15,5);
declare InitialStock decimal(15,5);
declare oldCUMP decimal(15,5);
declare newCUMP decimal(15,5);


select product, quantity, ((price -(price * discount)) * (coalesce(commercial_vat.`value`* tva_chec,0) + 1)), warehouse into IdProduct, p_quantity, p_price, IdWarehouse
from sale_credit_invoice_line left join
commercial_vat on commercial_vat.Id = sale_credit_invoice_line.vat left join
sale_credit_invoice on piece = sale_credit_invoice.Id
where sale_credit_invoice_line.Id = line;

select coalesce(actual_stock,0), coalesce(cump,0) into InitialStock, oldCUMP
from commercial_product_stock_warehouse
where product = IdProduct and warehouse= IdWarehouse;

if(InitialStock<0) then set InitialStock = 0;end if;
if(p_quantity<0) then set p_quantity = 0;end if;

if((InitialStock + p_quantity)<>0 and oldCUMP>0) then
set newCUMP = ((coalesce(InitialStock,0) * coalesce(oldCUMP,0)) + (p_quantity * p_price)) / (coalesce(InitialStock,0) + p_quantity);
else
set newCUMP = p_price;
end if;

if(newCUMP>=0) then
return newCUMP;
else
return 0; end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getCUMPBySale_shipping_return_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getCUMPBySale_shipping_return_line`(line int, sign int) RETURNS decimal(15,5)
BEGIN
declare IdProduct int;
declare IdWarehouse int;
declare p_quantity decimal(15,5);
declare p_price decimal(15,5);
declare InitialStock decimal(15,5);
declare old_average_cost decimal(15,5);
declare new_average_cost decimal(15,5);

select product, quantity, (price -(price * discount)) * if(atooerp_currency.principal = 1, 1, coalesce(currency_rate, 1)) , warehouse  into IdProduct, p_quantity, p_price, IdWarehouse
from sale_shipping_return_line join
sale_shipping_return on piece = sale_shipping_return.Id join
atooerp_currency on atooerp_currency.Id = sale_shipping_return.currency
where sale_shipping_return_line.Id = line;

IF(sign = -1) THEN
  SELECT last_price_cost INTO p_price FROM commercial_product_stock
  WHERE piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
  AND piece_line = line
  AND `action` = 'insert'
  ORDER BY Id DESC
  LIMIT 1;
END IF;

select coalesce(actual_stock,0), coalesce(average_cost,0) into InitialStock, old_average_cost
from commercial_product_stock_warehouse
where product = IdProduct and warehouse= IdWarehouse;
if(InitialStock<0) then set InitialStock = 0;end if;
if(p_quantity<0) then set p_quantity = 0;end if;
if((InitialStock + p_quantity)<>0 and old_average_cost>0) then
set new_average_cost = ((coalesce(InitialStock,0) * coalesce(old_average_cost,0)) + (p_quantity * p_price * sign)) / (coalesce(InitialStock,0) + p_quantity * sign);
else
set new_average_cost = p_price;
end if;
if(new_average_cost>=0) then
return new_average_cost;
else
return 0;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getCUMPByStock_entry` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getCUMPByStock_entry`(line int, sign int) RETURNS decimal(15,5)
BEGIN
declare IdProduct int;
declare IdWarehouse int;
declare p_quantity decimal(15,5);
declare p_price decimal(15,5);
declare InitialStock decimal(15,5);
declare old_average_cost decimal(15,5);
declare new_average_cost decimal(15,5);
select commercial_stock_entry_line.product, commercial_stock_entry_line.quantity, commercial_product_stock_warehouse.cump, warehouse_in into
IdProduct, p_quantity, p_price, IdWarehouse
from commercial_stock_entry_line INNER JOIN
commercial_stock_mouvement ON commercial_stock_entry_line.piece = commercial_stock_mouvement.stock_in INNER JOIN
commercial_product_stock_warehouse ON commercial_stock_mouvement.warehouse_out = commercial_product_stock_warehouse.warehouse AND
commercial_stock_entry_line.product = commercial_product_stock_warehouse.product
where commercial_stock_entry_line.Id = line;
if(IdWarehouse is null) then
return (select commercial_product_stock_warehouse.average_cost from commercial_stock_entry_line inner join
commercial_stock_entry on commercial_stock_entry.Id = commercial_stock_entry_line.piece inner join
commercial_product_stock_warehouse on commercial_product_stock_warehouse.product = commercial_stock_entry_line.product and commercial_stock_entry.warehouse = commercial_product_stock_warehouse.warehouse
where commercial_stock_entry_line.Id = line);
return null;
else
IF(sign = -1) THEN
  SELECT last_price_cost INTO p_price FROM commercial_product_stock
  WHERE piece_type = 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
  AND piece_line = line
  AND `action` = 'insert'
  ORDER BY Id DESC
  LIMIT 1;
END IF;


select coalesce(actual_stock,0), coalesce(commercial_product_stock_warehouse.average_cost,0) into InitialStock, old_average_cost
from commercial_product_stock_warehouse
where product = IdProduct and warehouse= IdWarehouse;
if(InitialStock<0) then set InitialStock = 0;end if;
if(p_quantity<0) then set p_quantity = 0;end if;
if((InitialStock + p_quantity)<>0 and old_average_cost>0) then
set new_average_cost = ((coalesce(InitialStock,0) * coalesce(old_average_cost,0)) + (p_quantity * p_price * sign)) / (coalesce(InitialStock,0) + p_quantity * sign);
else
set new_average_cost = p_price;
end if;
if(new_average_cost>=0) then
return new_average_cost;
else
return 0;
end if;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getLastPriceCost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getLastPriceCost`(line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE oldLastPriceCost DECIMAL(15,5);
    DECLARE newLastPriceCost DECIMAL(15,5);
    
    -- Get product information from purchase shipping line
    SELECT 
        product, 
        quantity, 
        (price - (price * discount)) * IF(atooerp_currency.principal = 1, 1, COALESCE(currency_rate, 1)), 
        warehouse 
    INTO 
        IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        purchase_shipping_line 
    JOIN 
        purchase_shipping ON piece = purchase_shipping.Id 
    JOIN 
        atooerp_currency ON atooerp_currency.Id = purchase_shipping.currency
    WHERE 
        purchase_shipping_line.Id = line;
    
    -- Determine the last price cost based on sign
    IF (sign = 1) THEN 
        SET newLastPriceCost = p_price;
    ELSE
        IF(oldLastPriceCost IS NOT NULL) THEN
            -- Get the current last price cost
            SELECT last_price_cost INTO oldLastPriceCost
            FROM commercial_product_stock_warehouse
            WHERE product = IdProduct AND warehouse = IdWarehouse;
            
            -- If current price matches, find the previous price
            IF (oldLastPriceCost = p_price) THEN
                SELECT last_price_cost INTO newLastPriceCost 
                FROM commercial_product_stock
                WHERE piece_line <> line 
                AND product = IdProduct 
                AND warehouse = IdWarehouse
                ORDER BY Id DESC
                LIMIT 1;
            ELSE
                SET newLastPriceCost = oldLastPriceCost;
            END IF;
        END IF;
    END IF;
    
    -- Return the calculated last price cost or 0 if NULL
    RETURN COALESCE(newLastPriceCost, 0);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getLastPriceCostBySale_shipping_return_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getLastPriceCostBySale_shipping_return_line`(line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE oldLastPriceCost DECIMAL(15,5);
    DECLARE newLastPriceCost DECIMAL(15,5);
    
    -- Get product information from purchase shipping line
    SELECT 
        product, 
        quantity, 
        (price - (price * discount)) * IF(atooerp_currency.principal = 1, 1, COALESCE(currency_rate, 1)), 
        warehouse 
    INTO 
        IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        sale_shipping_return_line 
    JOIN 
        sale_shipping_return ON piece = sale_shipping_return.Id 
    JOIN 
        atooerp_currency ON atooerp_currency.Id = sale_shipping_return.currency
    WHERE 
        sale_shipping_return_line.Id = line;
    
    -- Determine the last price cost based on sign
    IF (sign = 1) THEN 
        SET newLastPriceCost = p_price;
    ELSE
        -- Get the current last price cost
        SELECT last_price_cost INTO oldLastPriceCost
        FROM commercial_product_stock_warehouse
        WHERE product = IdProduct AND warehouse = IdWarehouse;
        IF(oldLastPriceCost IS NOT NULL) THEN
          -- If current price matches, find the previous price
          IF (oldLastPriceCost = p_price) THEN
              SELECT last_price_cost INTO newLastPriceCost 
              FROM commercial_product_stock
              WHERE piece_line <> line 
                AND product = IdProduct 
                AND warehouse = IdWarehouse
              ORDER BY Id DESC
              LIMIT 1;
          ELSE
              SET newLastPriceCost = oldLastPriceCost;
          END IF;
        END IF;
    END IF;
    
    -- Return the calculated last price cost or 0 if NULL
    RETURN COALESCE(newLastPriceCost, 0);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `commercial_getLastPriceCostByStock_entry_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `commercial_getLastPriceCostByStock_entry_line`(line INT, sign INT) RETURNS decimal(15,5)
BEGIN
    DECLARE IdProduct INT;
    DECLARE IdWarehouse INT;
    DECLARE p_quantity DECIMAL(15,5);
    DECLARE p_price DECIMAL(15,5);
    DECLARE oldLastPriceCost DECIMAL(15,5);
    DECLARE newLastPriceCost DECIMAL(15,5);
    
    -- Get product information from stock entry line
    SELECT 
        csel.product, 
        csel.quantity, 
        csel.cump, 
        cse.warehouse 
    INTO
        IdProduct, p_quantity, p_price, IdWarehouse
    FROM 
        commercial_stock_entry_line csel
    INNER JOIN
        commercial_stock_entry cse ON cse.`Id` = csel.piece 
    WHERE 
        csel.Id = line;
    
    -- Determine the last price cost based on sign
    IF (sign = 1) THEN 
        SET newLastPriceCost = p_price;
    ELSE
        -- Get the current last price cost
        SELECT 
            last_price_cost 
        INTO 
            oldLastPriceCost
        FROM 
            commercial_product_stock_warehouse
        WHERE 
            product = IdProduct 
            AND warehouse = IdWarehouse;
        
        -- If current price matches, find the previous price, otherwise keep the current price
        IF(oldLastPriceCost IS NOT NULL) THEN
            IF (oldLastPriceCost = p_price) THEN
                SELECT 
                    last_price_cost 
                INTO 
                    newLastPriceCost 
                FROM 
                    commercial_product_stock
                WHERE 
                    piece_line <> line 
                    AND product = IdProduct 
                    AND warehouse = IdWarehouse
                ORDER BY 
                    Id DESC
                LIMIT 1;
            ELSE
                SET newLastPriceCost = oldLastPriceCost;
            END IF;
        END IF;
    END IF;
    
    -- Return the calculated last price cost or 0 if NULL
    RETURN COALESCE(newLastPriceCost, 0);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `detectsInfiniteLoop_atooerp_activity_next` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `detectsInfiniteLoop_atooerp_activity_next`(p_type int, p_next int) RETURNS tinyint(1)
BEGIN
declare p_res bool default false;
call detectsInfiniteLoop_atooerp_activity_next(p_type, p_next, @p_res);
return @p_res;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `detectsInfiniteLoop_commercial_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `detectsInfiniteLoop_commercial_category`(p_Id int , p_parent int) RETURNS tinyint(1)
BEGIN
declare d_parent int default NULL;
select parent into d_parent from commercial_category where Id=p_parent;
while (d_parent IS NOT NULL) and (d_parent<>p_Id) do
select parent into d_parent from commercial_category where Id=p_parent;
set p_parent=d_parent;
end while;
if(d_parent IS NULL) then
return false;
else
return true;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `detectsInfiniteLoop_commercial_partner_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `detectsInfiniteLoop_commercial_partner_category`(p_Id int , p_parent int) RETURNS tinyint(1)
BEGIN
declare d_parent int default NULL;
select parent into d_parent from commercial_partner_category where Id=p_parent;
while (d_parent IS NOT NULL) and (d_parent<>p_Id) do
select parent into d_parent from commercial_partner_category where Id=p_parent;
set p_parent=d_parent;
end while;
if(d_parent IS NULL) then
return false;
else
return true;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `detectsInfiniteLoop_pos_category` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `detectsInfiniteLoop_pos_category`(p_Id int , p_parent int) RETURNS tinyint(1)
BEGIN
declare d_parent int default 0;
select parent into d_parent from pos_category where Id=p_parent;
while (d_parent<>0) and (d_parent<>p_Id) do
select parent into d_parent from pos_category where Id=p_parent;
set p_parent=d_parent;
end while;
if(d_parent=0) then
return false;
else
return true;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `detectsInfiniteLoop_production_composition` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `detectsInfiniteLoop_production_composition`(p_Id int, p_child int) RETURNS tinyint(1)
BEGIN
declare p_res bool default false;
call detectsInfiniteLoop_production_composition(p_Id, p_child, @p_res);
return @p_res;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GEN_EAN13` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `GEN_EAN13`(`CODE` INT) RETURNS varchar(13) CHARSET utf8
BEGIN
	DECLARE response VARCHAR(13);
	DECLARE prefix CHAR(7);
	DECLARE indx INT;
	DECLARE SumODD INT;
	DECLARE SumEven INT;
	DECLARE Summ INT;
  DECLARE creat VARCHAR(13);

  
	SET prefix = CONCAT( '040', (select concat(year(create_date)-2000, IF(month(create_date)<10, concat('0', month(create_date)), month(create_date))) from commercial_product where Id = code)); 

  	SET response =  (CAST(CODE as char(13)));



	WHILE (LENGTH(response)<12-LENGTH(prefix)) DO
		SET response = CONCAT('0',response);
	END WHILE;

	SET response = CONCAT(prefix,response);

	SET indx = LENGTH(response);
	SET SumODD = 0;
	SET SumEven = 0;
	WHILE indx > 0 DO
 		SET SumODD = SumODD+CAST(SUBSTRING(response,indx,1) as UNSIGNED);
		SET indx = indx-1;
 		SET SumEven = SumEven+CAST(SUBSTRING(response,indx,1) AS UNSIGNED);
		SET indx = indx-1;
	END WHILE;
	SET Summ = SumODD * 3 + SumEven;
	SET indx = CASE Summ % 10
            WHEN 0 THEN '0'
            ELSE 10 - Summ % 10
        END;
 	SET response = CONCAT(response,CAST(indx AS char(1)));
	
	RETURN(response);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `getDelivred` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `getDelivred`(pieceType varchar(255), IdPiece int) RETURNS tinyint(1)
BEGIN
declare unDelivredCount int default 0;
declare delivredStatus bool default false;
declare IdOrder int default 0;
declare IdInvoice int default 0;
case pieceType
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set unDelivredCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT purchase_invoice_line.Id, purchase_invoice_line.product, purchase_invoice_line.description, purchase_invoice_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 purchase_invoice_line.tax1, purchase_invoice_line.tax2, purchase_invoice_line.tax3, purchase_invoice_line.tax4, purchase_invoice_line.tax5
                  FROM      purchase_invoice LEFT OUTER JOIN
                                    purchase_invoice_line ON purchase_invoice.Id = purchase_invoice_line.piece
                  WHERE   (purchase_invoice.Id = IdPiece)
union
SELECT purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.description, 0 as quantity, -purchase_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_line.tax1, purchase_shipping_line.tax2, purchase_shipping_line.tax3, purchase_shipping_line.tax4,
                                    purchase_shipping_line.tax5
                  FROM      purchase_shipping LEFT OUTER JOIN
                                    purchase_shipping_line ON purchase_shipping.Id = purchase_shipping_line.piece
                  WHERE   (purchase_shipping.invoice = IdPiece)
union
SELECT purchase_shipping_return_line.Id, purchase_shipping_return_line.product, purchase_shipping_return_line.description, 0 as quantity, purchase_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_return_line.tax1, purchase_shipping_return_line.tax2, purchase_shipping_return_line.tax3, purchase_shipping_return_line.tax4,
                                    purchase_shipping_return_line.tax5
                  FROM      purchase_shipping_return LEFT OUTER JOIN
                                    purchase_shipping_return_line ON purchase_shipping_return.Id = purchase_shipping_return_line.piece
                  WHERE   (purchase_shipping_return.invoice = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );


when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set unDelivredCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT purchase_order_line.Id, purchase_order_line.product, purchase_order_line.description, purchase_order_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 purchase_order_line.tax1, purchase_order_line.tax2, purchase_order_line.tax3, purchase_order_line.tax4, purchase_order_line.tax5
                  FROM      purchase_order LEFT OUTER JOIN
                                    purchase_order_line ON purchase_order.Id = purchase_order_line.piece
                  WHERE   (purchase_order.Id = IdPiece)
union
SELECT purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.description, 0 as quantity, -purchase_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_line.tax1, purchase_shipping_line.tax2, purchase_shipping_line.tax3, purchase_shipping_line.tax4,
                                    purchase_shipping_line.tax5
                  FROM      purchase_shipping LEFT OUTER JOIN
                                    purchase_shipping_line ON purchase_shipping.Id = purchase_shipping_line.piece
                  WHERE   (purchase_shipping.`order` = IdPiece)
union
SELECT purchase_shipping_return_line.id, purchase_shipping_return_line.product, purchase_shipping_return_line.description, 0 as quantity, purchase_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_return_line.tax1, purchase_shipping_return_line.tax2, purchase_shipping_return_line.tax3, purchase_shipping_return_line.tax4,
                                    purchase_shipping_return_line.tax5
                  FROM      purchase_shipping_return LEFT OUTER JOIN
                                    purchase_shipping_return_line ON purchase_shipping_return.Id = purchase_shipping_return_line.piece
                  WHERE   (purchase_shipping_return.`order` = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );


when 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set unDelivredCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT purchase_credit_invoice_line.Id, purchase_credit_invoice_line.product, purchase_credit_invoice_line.description, purchase_credit_invoice_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 purchase_credit_invoice_line.tax1, purchase_credit_invoice_line.tax2, purchase_credit_invoice_line.tax3, purchase_credit_invoice_line.tax4, purchase_credit_invoice_line.tax5
                  FROM      purchase_credit_invoice LEFT OUTER JOIN
                                    purchase_credit_invoice_line ON purchase_credit_invoice.Id = purchase_credit_invoice_line.piece
                  WHERE   (purchase_credit_invoice.Id = IdPiece)
union
SELECT purchase_shipping_return_line.Id, purchase_shipping_return_line.product, purchase_shipping_return_line.description, 0 as quantity, -purchase_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_return_line.tax1, purchase_shipping_return_line.tax2, purchase_shipping_return_line.tax3, purchase_shipping_return_line.tax4,
                                    purchase_shipping_return_line.tax5
                  FROM      purchase_shipping_return LEFT OUTER JOIN
                                    purchase_shipping_return_line ON purchase_shipping_return.Id = purchase_shipping_return_line.piece
                  WHERE   (purchase_shipping_return.credit_invoice = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );


when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set unDelivredCount = (select count(*) from (  select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT sale_invoice_line.Id, sale_invoice_line.product, sale_invoice_line.description, sale_invoice_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 sale_invoice_line.tax1, sale_invoice_line.tax2, sale_invoice_line.tax3, sale_invoice_line.tax4, sale_invoice_line.tax5
                  FROM      sale_invoice LEFT OUTER JOIN
                                    sale_invoice_line ON sale_invoice.Id = sale_invoice_line.piece
                  WHERE   (sale_invoice.Id = IdPiece)
union
SELECT sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.description, 0 as quantity, -sale_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_line.tax1, sale_shipping_line.tax2, sale_shipping_line.tax3, sale_shipping_line.tax4,
                                    sale_shipping_line.tax5
                  FROM      sale_shipping LEFT OUTER JOIN
                                    sale_shipping_line ON sale_shipping.Id = sale_shipping_line.piece
                  WHERE   (sale_shipping.invoice = IdPiece)
union
SELECT pos_order_line.Id, pos_order_line.product, pos_order_line.description, 0 as quantity, -pos_order_line.quantity as delivredQuantity,
price, discount, tax1_base, pos_order_line.tax1, pos_order_line.tax2, pos_order_line.tax3, pos_order_line.tax4,
                                    pos_order_line.tax5
                  FROM      pos_order LEFT OUTER JOIN
                                    pos_order_line ON pos_order.Id = pos_order_line.piece
                  WHERE   (pos_order.invoice = IdPiece)
union
SELECT sale_shipping_return_line.Id, sale_shipping_return_line.product, sale_shipping_return_line.description, 0 as quantity, sale_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_return_line.tax1, sale_shipping_return_line.tax2, sale_shipping_return_line.tax3, sale_shipping_return_line.tax4,
                                    sale_shipping_return_line.tax5
                  FROM      sale_shipping_return LEFT OUTER JOIN
                                    sale_shipping_return_line ON sale_shipping_return.Id = sale_shipping_return_line.piece
                  WHERE   (sale_shipping_return.invoice = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0)
) tab );


when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set unDelivredCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, SUM(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + SUM(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT sale_order_line.Id, sale_order_line.product, sale_order_line.description, sale_order_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 sale_order_line.tax1, sale_order_line.tax2, sale_order_line.tax3, sale_order_line.tax4, sale_order_line.tax5
                  FROM      sale_order LEFT OUTER JOIN
                                    sale_order_line ON sale_order.Id = sale_order_line.piece
                  WHERE   (sale_order.Id = IdPiece)
union
SELECT sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.description, 0 as quantity, -sale_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_line.tax1, sale_shipping_line.tax2, sale_shipping_line.tax3, sale_shipping_line.tax4,
                                    sale_shipping_line.tax5
                  FROM      sale_shipping LEFT OUTER JOIN
                                    sale_shipping_line ON sale_shipping.Id = sale_shipping_line.piece
                  WHERE   (sale_shipping.`order` = IdPiece)
union
SELECT pos_order_line.Id, pos_order_line.product, pos_order_line.description, 0 as quantity, -pos_order_line.quantity as delivredQuantity,
price, discount, tax1_base, pos_order_line.tax1, pos_order_line.tax2, pos_order_line.tax3, pos_order_line.tax4,
                                    pos_order_line.tax5
                  FROM      pos_order LEFT OUTER JOIN
                                    pos_order_line ON pos_order.Id = pos_order_line.piece left join
                                   sale_invoice on sale_invoice.Id = invoice
                  WHERE   (sale_invoice.`order` = IdPiece)
union
SELECT sale_shipping_return_line.Id, sale_shipping_return_line.product, sale_shipping_return_line.description, 0 as quantity, sale_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_return_line.tax1, sale_shipping_return_line.tax2, sale_shipping_return_line.tax3, sale_shipping_return_line.tax4,
                                    sale_shipping_return_line.tax5
                  FROM      sale_shipping_return LEFT OUTER JOIN
                                    sale_shipping_return_line ON sale_shipping_return.Id = sale_shipping_return_line.piece
                  WHERE   (sale_shipping_return.`order` = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );


when 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set unDelivredCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT sale_credit_invoice_line.Id, sale_credit_invoice_line.product, sale_credit_invoice_line.description, sale_credit_invoice_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 sale_credit_invoice_line.tax1, sale_credit_invoice_line.tax2, sale_credit_invoice_line.tax3, sale_credit_invoice_line.tax4, sale_credit_invoice_line.tax5
                  FROM      sale_credit_invoice LEFT OUTER JOIN
                                    sale_credit_invoice_line ON sale_credit_invoice.Id = sale_credit_invoice_line.piece
                  WHERE   (sale_credit_invoice.Id = IdPiece)
union
SELECT sale_shipping_return_line.Id, sale_shipping_return_line.product, sale_shipping_return_line.description, 0 as quantity, -sale_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_return_line.tax1, sale_shipping_return_line.tax2, sale_shipping_return_line.tax3, sale_shipping_return_line.tax4,
                                    sale_shipping_return_line.tax5
                  FROM      sale_shipping_return LEFT OUTER JOIN
                                    sale_shipping_return_line ON sale_shipping_return.Id = sale_shipping_return_line.piece
                  WHERE   (sale_shipping_return.credit_invoice = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );



end case;
if(unDelivredCount=0) then
set delivredStatus = 1;
else
set delivredStatus = 0;
end if;
return delivredStatus;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetDescription` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `GetDescription`(IdOperation INT) RETURNS varchar(25) CHARSET utf8
BEGIN
return (select description  from `agriculture_operation`  where (Id=IdOperation));
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `getDirectPaymentByPiece` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `getDirectPaymentByPiece`(IdPiece int, PieceType varchar(255)) RETURNS decimal(10,0)
BEGIN
declare totalAmount int;
select sum(amount) into totalAmount from commercial_payment_piece where (piece = IdPiece and piece_type = PieceType);
return totalAmount;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetExploitationName` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `GetExploitationName`(IdOperation INT) RETURNS varchar(25) CHARSET utf8
BEGIN
return (select name as Exploitation from `agriculture_exploitation`,`agriculture_operation`  where (`agriculture_operation`.`Id`=IdOperation and `agriculture_exploitation`.`Id`=`agriculture_operation`.`exploitation`));
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetPaymentAmountByPiece` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `GetPaymentAmountByPiece`(pieceType varchar(255), IdPiece int) RETURNS decimal(15,5)
BEGIN
declare amountByShipping decimal(15,5) default 0;
DECLARE done INT DEFAULT FALSE;
declare c_Id int;
declare c_total_amount decimal(15,5) default 0;
declare c_paied_amount decimal(15,5) default 0;
declare c_invoice_paied_amount decimal(15,5) default 0;
declare c_shipping_paied_amount decimal(15,5) default 0;
declare c_rest_amount decimal(15,5) default 0;
declare cursorPurchase_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            purchase_shipping
where ((invoice IN (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0 ))
or (`order` IN (select `order` from purchase_shipping where Id = IdPiece and `order` <> 0 ))
or (invoice IN (select Id from purchase_invoice where `order` = (select `order` from purchase_shipping where Id = IdPiece)  and Id <>0 )))
and purchase_shipping.validated=1
order by `date`;
declare cursorSale_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            sale_shipping
where ((invoice IN (select invoice from sale_shipping where Id = IdPiece and invoice <> 0 ))
or (`order` IN (select `order` from sale_shipping where Id = IdPiece and `order` <> 0 ))
or (invoice IN (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece)  and Id <>0 )))
and sale_shipping.validated=1
order by `date`;
declare cursorShipping_purchase_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            purchase_shipping
where((invoice = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0))
or (`order` = (select `order` from purchase_shipping where Id = IdPiece and `order` <> 0))
or  (Id = IdPiece))
order by `date`;
declare cursorShipping_sale_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            sale_shipping
where ((invoice = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0))
or (`order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0)) or Id = IdPiece)
order by `date`;
declare cursorPos_order_sale_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            pos_order
where (invoice = ((select invoice from sale_shipping where Id = IdPiece and invoice <> 0) or (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0)))) and validated=1
order by `date`;
declare cursorShipping_pos_order cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            sale_shipping
where ((invoice = (select invoice from pos_order where Id = IdPiece and invoice <> 0)))
and sale_shipping.validated=1
order by `date`;
declare cursorPos_order_Pos_order cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            pos_order
where (invoice = (select invoice from pos_order where Id = IdPiece and invoice <> 0) or Id = IdPiece)
order by `date`;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
case pieceType
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece IN (select ID from purchase_order where invoice = IdPiece) and piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where invoice = IdPiece) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping_return where invoice = IdPiece) and piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where `order` = (select `order` from purchase_invoice where Id = IdPiece and `order`<>0)) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
return c_invoice_paied_amount;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set amountByShipping = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = (select invoice from purchase_shipping where Id = IdPiece) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from purchase_shipping where Id = IdPiece) and (piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from purchase_invoice where (Id = (select invoice from purchase_shipping where Id = IdPiece and invoice<>0)) and `order`<>0) and (piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from purchase_invoice where (`order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<>0))) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece)
or (piece IN (select Id from purchase_shipping where invoice = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0)))
or (piece IN (select Id from purchase_shipping where invoice = (select Id from purchase_invoice where `order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<> 0))))
or (piece IN (select Id from purchase_shipping where `order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<> 0)))
or (piece IN (select Id from purchase_shipping where `order` = (select `order` from purchase_invoice where Id = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0) and `order`<>0))))
and (piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
and (select validated from commercial_payment where Id = payment) = 1);
update purchase_invoice set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0))
or ((`order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<>0))) and validated = 1;
update purchase_order set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select `order` from purchase_shipping where Id = IdPiece and `order`<> 0))
or (Id = (select `order` from purchase_invoice where Id = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0) and `order`<>0)) and validated = 1;
begin
declare paymentAmount decimal(15,5) default 0;
declare paymentAmountShipping decimal(15,5) default 0;
declare totalPaymentAmountShipping decimal(15,5) default 0;
declare totalPaymentAmount decimal(15,5) default 0;
declare thisTotalAmount decimal(15,5) default 0;
set paymentAmount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = (select `order` from purchase_shipping where Id = IdPiece and `order` <> 0) and (piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from purchase_invoice where `order` = (select `order` from purchase_shipping where Id = IdPiece and `order` <> 0)) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
open cursorShipping_purchase_shipping;
read_loop: LOOP
fetch cursorShipping_purchase_shipping into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
if(c_Id=IdPiece) then
set paymentAmountShipping = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set thisTotalAmount = c_total_amount;
else
set totalPaymentAmountShipping = totalPaymentAmountShipping + (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set totalPaymentAmount = totalPaymentAmount + c_paied_amount;
end If;
END LOOP;
close cursorShipping_purchase_shipping;
set paymentAmountShipping = paymentAmountShipping + (paymentAmount - (totalPaymentAmount - totalPaymentAmountShipping));
if(thisTotalAmount < paymentAmountShipping) then
set paymentAmountShipping = thisTotalAmount;
end if;
return paymentAmountShipping;
end;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select Id from purchase_invoice where `order` = IdPiece) and piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where `order` = IdPiece) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping_return where `order` = IdPiece) and piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where invoice = (select Id from purchase_invoice where `Order` = IdPiece)) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
return c_invoice_paied_amount;
when 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType)
and (select validated from commercial_payment where Id = payment) = 1);
return c_invoice_paied_amount;
when 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece IN (select Id from purchase_shipping_return where credit_invoice = IdPiece) and piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
return c_invoice_paied_amount;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece in (select Id from sale_order where invoice = IdPiece) and piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where invoice = IdPiece) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping_return where invoice = IdPiece) and piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where `order` = (select `order` from sale_invoice where Id = IdPiece and `order`<>0)) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from pos_order where invoice = IdPiece) and piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = c_invoice_paied_amount +  (select coalesce(sum(amount),0.00000) from pos_offer
where (piece IN (select Id from pos_order where invoice = IdPiece)));
return c_invoice_paied_amount;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set amountByShipping = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = (select invoice from sale_shipping where Id = IdPiece) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from sale_shipping where Id = IdPiece) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from sale_invoice where (Id = (select invoice from sale_shipping where Id = IdPiece and invoice<>0)) and `order`<>0) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from sale_invoice where (`order` = (select `order` from sale_shipping where Id = IdPiece and `order`<>0))) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select invoice from pos_order where (invoice = ((select invoice from sale_shipping where Id = IdPiece and invoice <> 0) or (select Id from sale_invoice where `order` IN (select `order` from sale_shipping where Id = IdPiece and `order`<>0))))) and  (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((((piece = IdPiece)
or (piece IN (select Id from sale_shipping where invoice = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0)))
or (piece IN (select Id from sale_shipping where invoice = (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order`<> 0))))
or (piece IN (select Id from sale_shipping where `order` = (select `order` from sale_shipping where Id = IdPiece and `order`<> 0)))
or (piece IN (select Id from sale_shipping where `order` = (select `order` from sale_invoice where Id = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0) and `order`<>0))))
and (piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (
(piece IN (select Id from pos_order where invoice = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0)))
or (piece IN (select Id from pos_order where invoice = (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0))))
and (piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
update sale_invoice set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0))
or ((`order` = (select `order` from sale_shipping where Id = IdPiece and `order`<>0))) and validated = 1;
update sale_order set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select `order` from sale_shipping where Id = IdPiece and `order`<> 0))
or (Id = (select `order` from sale_invoice where Id = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0) and `order`<>0)) and validated = 1;
begin
declare paymentAmount decimal(15,5) default 0;
declare paymentAmountShipping decimal(15,5) default 0;
declare totalPaymentAmountShipping decimal(15,5) default 0;
declare totalPaymentAmount decimal(15,5) default 0;
declare thisTotalAmount decimal(15,5) default 0;
set paymentAmount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = (select `order` from sale_shipping where Id = IdPiece and `order` <>0) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select invoice from sale_shipping where Id = IdPiece and invoice <>0) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0)) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
begin
DECLARE done1 INT DEFAULT FALSE;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done1 = TRUE;
open cursorShipping_sale_shipping;
read_loop: LOOP
fetch cursorShipping_sale_shipping into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done1 THEN
LEAVE read_loop;
END IF;
if(c_Id=IdPiece) then
set paymentAmountShipping = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set thisTotalAmount = c_total_amount;
else
set totalPaymentAmountShipping = totalPaymentAmountShipping + (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set totalPaymentAmount = totalPaymentAmount + c_paied_amount;
end If;
END LOOP;
close cursorShipping_sale_shipping;
end;
open cursorPos_order_sale_shipping;
read_loop: LOOP
fetch cursorPos_order_sale_shipping into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set totalPaymentAmountShipping = totalPaymentAmountShipping + (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = c_Id) and (piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set totalPaymentAmount = totalPaymentAmount + c_paied_amount;
END LOOP;
close cursorPos_order_sale_shipping;
set paymentAmountShipping = paymentAmountShipping + (paymentAmount - (totalPaymentAmount - totalPaymentAmountShipping));
if(thisTotalAmount < paymentAmountShipping) then
set paymentAmountShipping = thisTotalAmount;
end if;
return paymentAmountShipping;
end;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select Id from sale_invoice where `order` = IdPiece) and piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where `order` = IdPiece) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping_return where `order` = IdPiece) and piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where invoice = (select Id from sale_invoice where `Order` = IdPiece)) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from pos_order where invoice = (select Id from sale_invoice where `Order` = IdPiece)) and piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = c_invoice_paied_amount + (select coalesce(sum(amount),0.00000) from pos_offer
where (piece IN (select Id from pos_order where invoice = (select Id from sale_invoice where `order` = IdPiece))));
return c_invoice_paied_amount;
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and (piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = c_invoice_paied_amount + (select coalesce(sum(amount),0.00000) from pos_offer where piece = IdPiece);
return c_invoice_paied_amount;
when 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType)
and (select validated from commercial_payment where Id = payment) = 1);
return c_invoice_paied_amount;
when 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece IN (select Id from sale_shipping_return where credit_invoice = IdPiece) and piece_type = 'Sale.Shipping_return, sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
return c_invoice_paied_amount;


end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `GetTypeOperation` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `GetTypeOperation`(IdOperation INT) RETURNS varchar(25) CHARSET utf8
BEGIN
return (select name as Type from `agriculture_type_operation`,`agriculture_operation`  where (`agriculture_operation`.`Id`=IdOperation and `agriculture_type_operation`.`Id`=`agriculture_operation`.`type_operation`));
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_purchase_order_of_invoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_purchase_order_of_invoice`(piece int) RETURNS int(11)
BEGIN
declare v_order int;
select `order` into v_order from purchase_invoice where Id=piece;
return v_order;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_sale_order_of_invoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_sale_order_of_invoice`(piece int) RETURNS int(11)
BEGIN
declare v_order int;
select `order` into v_order from sale_invoice where Id=piece;
return v_order;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_stock`(p_product int) RETURNS decimal(10,0)
BEGIN
declare p_stock decimal default 0;
SELECT        actual_stock into p_stock
FROM            commercial_product_stock
WHERE        (commercial_product_stock.product = p_product) AND (commercial_product_stock.Id =
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (commercial_product_stock_1.product = p_product)));
return p_stock;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_stock_by_warehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_stock_by_warehouse`(p_product int, p_warehouse int) RETURNS decimal(10,0)
BEGIN
declare p_stock decimal default 0;
SELECT        actual_stock into p_stock
FROM            commercial_product_stock
WHERE        (commercial_product_stock.product = p_product) and (commercial_product_stock.warehouse=p_warehouse) AND (commercial_product_stock.Id =
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (commercial_product_stock_1.product = p_product) and (commercial_product_stock_1.warehouse=p_warehouse)));
return p_stock;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_th_stock_by_warehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_th_stock_by_warehouse`(p_product int, p_warehouse int) RETURNS decimal(10,3)
BEGIN
declare p_stock decimal(10,3) default 0;
SELECT        theoretical_stock into p_stock
FROM            commercial_product_stock
WHERE        (commercial_product_stock.product = p_product) and (commercial_product_stock.warehouse=p_warehouse) AND (commercial_product_stock.Id =
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (commercial_product_stock_1.product = p_product) and (commercial_product_stock_1.warehouse=p_warehouse)));
return p_stock;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_total_stock_by_product` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_total_stock_by_product`(p_product int) RETURNS decimal(10,0)
BEGIN
declare p_stock decimal default 0;
SELECT   sum(actual_stock) into p_stock
FROM         commercial_product_stock
where  (commercial_product_stock.product = p_product)  AND (commercial_product_stock.Id in
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (commercial_product_stock_1.product = p_product)
group by warehouse
order by warehouse DESC))
;
return p_stock;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_total_th_stock_by_product` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_total_th_stock_by_product`(p_product int) RETURNS decimal(10,0)
BEGIN
declare p_stock decimal default 0;
SELECT   sum(theoretical_stock) into p_stock
FROM         commercial_product_stock
where  (commercial_product_stock.product = p_product)  AND (commercial_product_stock.Id in
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (commercial_product_stock_1.product = p_product)
group by warehouse
order by warehouse DESC));
return p_stock;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_warehouse_by_credit_order_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_warehouse_by_credit_order_line`(IdPiece_line int) RETURNS int(11)
BEGIN
declare IdWarehouse int default 1;
SELECT        pos_category_product.warehouse into IdWarehouse
FROM            pos_credit_order_line INNER JOIN
pos_category_product ON pos_credit_order_line.product = pos_category_product.product INNER JOIN
pos_credit_order ON pos_credit_order_line.piece = pos_credit_order.Id INNER JOIN
pos_order ON pos_order.Id = pos_credit_order.`order` INNER JOIN
pos_session ON pos_order.session = pos_session.Id INNER JOIN
pos_point_of_sale ON pos_session.pos = pos_point_of_sale.Id INNER JOIN
pos_category ON pos_point_of_sale.Id = pos_category.point_of_sale AND pos_category_product.category = pos_category.Id
WHERE        (pos_credit_order_line.Id = IdPiece_line)
LIMIT 1;
return IdWarehouse;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `get_warehouse_by_piece_line` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `get_warehouse_by_piece_line`(IdPiece_line int) RETURNS int(11)
BEGIN
declare IdWarehouse int default 1;
SELECT        pos_category_product.warehouse into IdWarehouse
FROM            pos_order_line INNER JOIN
pos_category_product ON pos_order_line.product = pos_category_product.product INNER JOIN
pos_order ON pos_order_line.piece = pos_order.Id INNER JOIN
pos_session ON pos_order.session = pos_session.Id INNER JOIN
pos_point_of_sale ON pos_session.pos = pos_point_of_sale.Id INNER JOIN
pos_category ON pos_point_of_sale.Id = pos_category.point_of_sale AND pos_category_product.category = pos_category.Id
WHERE        (pos_order_line.Id = IdPiece_line)
LIMIT 1;
return IdWarehouse;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `is_composite` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `is_composite`(IdProduct int) RETURNS tinyint(1)
BEGIN
declare i int;
select is_composite into i from commercial_product where Id = IdProduct;
return i;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `pos_get_is_first_warehouse_order` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `pos_get_is_first_warehouse_order`(IdOrder int, IdWarehouse int) RETURNS tinyint(1)
BEGIN
Declare warehouse_order int default 0;
select count(*) into warehouse_order from pos_warehouse_order where `order` = IdOrder and warehouse = Idwarehouse;
if(warehouse_order = 0) then
return 1;
else
return 0;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `pos_orderIsStockUpdated` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `pos_orderIsStockUpdated`(IdPiece int) RETURNS tinyint(4)
BEGIN
declare c int default 0;
set c= (select count(Id) from commercial_product_stock where piece=IdPiece and piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
if (c>0) then
return 1;
else
return 0;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `productionUpdateOrder_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `productionUpdateOrder_stock`(_product int, _warehouse int, _quantity decimal(15,5), _cump decimal(15,5), _order int) RETURNS int(11)
BEGIN

declare _order_stock int default 0;
declare _oldStock decimal(15,5) default 0;
declare _oldCump decimal(15,5) default 0;




select Id, real_stock, cump into
_order_stock, _oldStock, _oldCump
from production_order_stock
where `order` = _order and product = _product and warehouse = _warehouse;

set _oldCump = ((_oldCump * _oldStock) + (_quantity * _cump)) / (_oldStock + _quantity);

set _oldStock = _oldStock + _quantity;


if (_order_stock > 0) then
update production_order_stock
set real_stock = _oldStock, cump = _oldCump
where `order` = _order and product = _product and warehouse = _warehouse;
else
insert into production_order_stock(create_date, `date`, real_stock, `order`, product, cump, warehouse)
value(now(), now(), _oldStock, _order, _product, _oldCump, _warehouse);
select max(Id) into _order_stock
from production_order_stock;
end if;

return _order_stock;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `production_getProductCost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `production_getProductCost`(IdComposit int) RETURNS decimal(15,5)
BEGIN
return (SELECT        SUM(lineCost)
FROM            (SELECT        commercial_product_stock_warehouse.product, AVG(commercial_product_stock_warehouse.cump) AS Expr1, production_compsition.quantity,
AVG(commercial_product_stock_warehouse.cump) * production_compsition.quantity AS lineCost
FROM            commercial_product_stock_warehouse INNER JOIN
production_compsition ON commercial_product_stock_warehouse.product = production_compsition.component
WHERE        (production_compsition.composite = IdComposite)
GROUP BY commercial_product_stock_warehouse.product) x);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `production_isComponent` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `production_isComponent`(IdProduct int) RETURNS tinyint(1)
BEGIN
declare i tinyint(1);
select coalesce(count(Id),0) into i from production_compsition where component = IdProduct;
if(i>0) then return 1;
else return 0;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `sigeoCalculateGMQ` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `sigeoCalculateGMQ`(IdPoids int, IdOvin int,  datePesee datetime,  pesee decimal(15,5)) RETURNS int(11)
BEGIN

declare lastPesee decimal(15,5) default null;
declare lastDate datetime  default null;
declare daysNumber int ;
declare gmqExist bool;

declare nextIdPoids int default null;
declare nextPesee decimal(15,5) default null;
declare nextDate datetime  default null;
declare daysNumberNext int ;


select Id, date_pesee, pese into nextIdPoids, nextDate, nextPesee
 from sigeo_poids where date_pesee > datePesee and ovin = IdOvin
 order by date_pesee
 limit 1;

if(nextPesee is not null and  nextDate is not null) then
SELECT DATEDIFF(nextDate, datePesee) into daysNumberNext;

if(daysNumberNext = 0) then set  daysNumberNext=1; end if;
update sigeo_poids set gmq = ((nextPesee - pesee) / daysNumberNext) where Id = nextIdPoids;
end if;

select date_pesee, pese into lastDate, lastPesee
 from sigeo_poids where date_pesee < datePesee and ovin = IdOvin
 order by date_pesee desc
 limit 1;

if(lastPesee is null or  lastDate is null) then
return null;
else
SELECT DATEDIFF(datePesee,lastDate) into daysNumber;

if(daysNumber = 0) then set  daysNumber=1; end if;


return ((pesee-lastPesee)/daysNumber)*1000;
end if;


return null;



END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP FUNCTION IF EXISTS `sigeoRFIDTest` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 FUNCTION `sigeoRFIDTest`(codeBoucle varchar(255)) RETURNS varchar(15) CHARSET latin1
BEGIN
Declare p_observation varchar(15) default 'v';
select observation into p_observation from sigeo_ovin where Id = (select ovin from sigeo_boucle where code = codeBoucle);
if(p_observation = 'r') then
return 'r';
else
return 'v';
end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accountingCash_registerADDByBank_deposit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accountingCash_registerADDByBank_deposit`(_bank_deposit int)
BEGIN
declare done int default 0;
declare done_holder int;
declare _date datetime;
declare _piece_type varchar(55);
declare _motif int;
declare _state int;
declare _amount decimal(15,5);
declare _partner varchar(255);
declare _piece varchar(10000);
declare _code varchar(255);
declare _cash_desk int;
declare _unpaied_cash_desk int;
declare _payment int;
declare _bank_deposit_line int;
declare _register varchar(20000);
declare _reference varchar(255);
declare _sens int;


declare _bank_deposit_amount decimal(15,5);


declare cursorPayment cursor for
select accounting_bank_deposit_line.Id, accounting_bank_deposit_line.payment, pa.`date`,  pa.piece_type , pa.amount , pa.cash_desk,  if(pa.piece_type <> 'HR', commercial_partner.name, concat(first_name, ' ', last_name)), pa.code, pa.reference
from accounting_bank_deposit_line join
commercial_payment pa on accounting_bank_deposit_line.payment =pa.Id left join
commercial_partner on commercial_partner.Id = pa.partner and pa.piece_type <> 'HR' left join
atooerp_person on atooerp_person.Id = pa.partner and pa.piece_type = 'HR'
where accounting_bank_deposit_line.bank_deposit = _bank_deposit;
declare continue handler for sqlstate '02000' set done=1;


select amount, cash_desk, sens
into _bank_deposit_amount, _cash_desk, _sens
from accounting_bank_deposit
where Id = _bank_deposit;

SET SESSION group_concat_max_len = 1000000;

set _unpaied_cash_desk = _cash_desk;

if((select count(payment) from accounting_bank_deposit_line where bank_deposit = _bank_deposit )=0) then
  insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, bank_deposit)
  value(now(), now(), if(_bank_deposit_amount >= 0,5 ,6), -_bank_deposit_amount , if(_bank_deposit_amount >= 0,-1,1), _cash_desk, _bank_deposit);
else

  set done=0;
  open cursorPayment;
  repeat
  fetch cursorPayment into _bank_deposit_line, _payment, _date, _piece_type, _amount, _cash_desk, _partner, _code, _reference;
if not done then
set done_holder=done;

case _piece_type
when 'Purchase' then

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_order.code
    WHEN commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_shipping.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_invoice.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_credit_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
purchase_order on piece = purchase_order.Id and commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_shipping on piece = purchase_shipping.Id and commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_invoice on piece = purchase_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_credit_invoice on piece = purchase_credit_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;

when 'Sale' then

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_order.reference, sale_order.code)
    WHEN commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_shipping.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_credit_invoice.reference,sale_credit_invoice.code)
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
sale_order on piece = sale_order.Id and commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_shipping on piece = sale_shipping.Id and commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_invoice on piece = sale_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_credit_invoice on piece = sale_credit_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;

when 'HR' then


SELECT GROUP_CONCAT(

CASE
    WHEN commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_period.name , '[', hr_pay_slip.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_deposit_type.name , '[', hr_deposit.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END  SEPARATOR ';\n') into _piece
FROM commercial_payment_piece left join
hr_pay_slip on piece = hr_pay_slip.Id and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit on piece = hr_deposit.Id and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_period on hr_period.Id = period and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit_type on hr_deposit_type.Id = deposit_type and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;


ELSE
set _motif = null;
set _state = 1;
END case;

set _register = concat(_code, '; ', _partner, '; ', _piece);

if(_sens = -1) then
set   _cash_desk = _unpaied_cash_desk;
end if;

insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, bank_deposit, payment, bank_deposit_line, register)
  value(now(), now(), 5, -(_sens * _amount) , -_sens, _cash_desk, _bank_deposit, _payment, _bank_deposit_line, _register);

if(_sens = 1) then
  UPDATE commercial_payment set cash_desk = null WHERE Id = _payment;
else
  UPDATE commercial_payment set cash_desk = _cash_desk, bank_account = 0 WHERE Id = _payment;
end if;


set done=done_holder;
end if;
until done end repeat;
close cursorPayment;


end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accountingCash_registerADDByCash_in_out` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accountingCash_registerADDByCash_in_out`(_cash_in_out int)
BEGIN


insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, cash_in_out, register)

select now(), accounting_cash_in_out.date, motif, amount * in_out, in_out, cash_desk, accounting_cash_in_out.Id, accounting_cash_in_out.memo 
from accounting_cash_in_out left join
accounting_cash_register_motif on motif = accounting_cash_register_motif.Id left join
atooerp_person on agent = atooerp_person.Id
where accounting_cash_in_out.Id = _cash_in_out;



END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accountingCash_registerADDByPayment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accountingCash_registerADDByPayment`(_payment int)
BEGIN
declare _date datetime;
declare _piece_type varchar(55);
declare _motif int;
declare _state int;
declare _cash_desk int;
declare _amount decimal(15,5);
declare _partner varchar(255);
declare _piece varchar(10000);
declare _code varchar(255);
declare _register varchar(20000);
declare _reference varchar(255);




select pa.`date`,  pa.piece_type , pa.amount , pa.cash_desk,  if(pa.piece_type <> 'HR', commercial_partner.name, concat(first_name, ' ', last_name)), pa.code, pa.reference
into _date, _piece_type, _amount, _cash_desk, _partner, _code, _reference
from commercial_payment pa  left join
commercial_partner on commercial_partner.Id = pa.partner and pa.piece_type <> 'HR' left join
atooerp_person on atooerp_person.Id = pa.partner and pa.piece_type = 'HR'
where pa.Id = _payment;

SET SESSION group_concat_max_len = 1000000;

case _piece_type
when 'Purchase' then
set _motif = 3;
set _state = -1;

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_order.code
    WHEN commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_shipping.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_invoice.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_credit_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code
    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
purchase_order on piece = purchase_order.Id and commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_shipping on piece = purchase_shipping.Id and commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_invoice on piece = purchase_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_credit_invoice on piece = purchase_credit_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;

when 'Sale' then
set _motif = 4;
set _state = 1;

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_order.reference, sale_order.code)
    WHEN commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_shipping.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_credit_invoice.reference,sale_credit_invoice.code)
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
sale_order on piece = sale_order.Id and commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_shipping on piece = sale_shipping.Id and commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_invoice on piece = sale_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_credit_invoice on piece = sale_credit_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment =   _payment
group by payment;

when 'HR' then



set _motif = 7;
set _state = -1;

SELECT GROUP_CONCAT(

CASE
    WHEN commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_period.name , '[', hr_pay_slip.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_deposit_type.name , '[', hr_deposit.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code
    ELSE null
END  SEPARATOR ';\n') into _piece
FROM commercial_payment_piece left join
hr_pay_slip on piece = hr_pay_slip.Id and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit on piece = hr_deposit.Id and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_period on hr_period.Id = period and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit_type on hr_deposit_type.Id = deposit_type and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;


ELSE
set _motif = null;
set _state = 1;
END case;

if (not(_reference is null or _reference = '')) then
set _code = concat (_code, '; ',_reference);
end if;

set _register = concat(_code, '; ', _partner, '; ', _piece);

insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, payment, register)
value(now(), _date, _motif, _amount * _state, _state, _cash_desk, _payment, _register);



END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accountingCash_registerADDByPaymentDelete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accountingCash_registerADDByPaymentDelete`(_payment int)
BEGIN
declare _date datetime;
declare _piece_type varchar(55);
declare _motif int;
declare _state int;
declare _cash_desk int;
declare _amount decimal(15,5);
declare _partner varchar(255);
declare _piece varchar(10000);
declare _code varchar(255);
declare _register varchar(20000);
declare _reference varchar(255);




select pa.`date`,  pa.piece_type , pa.amount , pa.cash_desk,  if(pa.piece_type <> 'HR', commercial_partner.name, concat(first_name, ' ', last_name)), pa.code, pa.reference
into _date, _piece_type, _amount, _cash_desk, _partner, _code, _reference
from commercial_payment pa  left join
commercial_partner on commercial_partner.Id = pa.partner and pa.piece_type <> 'HR' left join
atooerp_person on atooerp_person.Id = pa.partner and pa.piece_type = 'HR'
where pa.Id = _payment;

SET SESSION group_concat_max_len = 1000000;

case _piece_type
when 'Purchase' then
set _motif = 3;
set _state = -1;

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_order.code
    WHEN commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_shipping.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_invoice.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_credit_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
purchase_order on piece = purchase_order.Id and commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_shipping on piece = purchase_shipping.Id and commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_invoice on piece = purchase_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_credit_invoice on piece = purchase_credit_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;

when 'Sale' then
set _motif = 4;
set _state = 1;

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_order.reference, sale_order.code)
    WHEN commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_shipping.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_credit_invoice.reference,sale_credit_invoice.code)
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
sale_order on piece = sale_order.Id and commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_shipping on piece = sale_shipping.Id and commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_invoice on piece = sale_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_credit_invoice on piece = sale_credit_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment =   _payment
group by payment;

when 'HR' then



set _motif = 7;
set _state = -1;

SELECT GROUP_CONCAT(

CASE
    WHEN commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_period.name , '[', hr_pay_slip.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_deposit_type.name , '[', hr_deposit.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END  SEPARATOR ';\n') into _piece
FROM commercial_payment_piece left join
hr_pay_slip on piece = hr_pay_slip.Id and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit on piece = hr_deposit.Id and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_period on hr_period.Id = period and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit_type on hr_deposit_type.Id = deposit_type and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;


ELSE
set _motif = null;
set _state = 1;
END case;

if (not(_reference is null or _reference = '')) then
set _code = concat (_code, '; ',_reference);
end if;

set _register = concat('****Correction****\n', _code, '; ', _partner, '; ', _piece);

insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, payment, register)
value(now(), _date, _motif, - _amount * _state, _state, _cash_desk, _payment, _register);



END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accountingCash_registerADDByPos_SessionTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accountingCash_registerADDByPos_SessionTransfer`(_transfer int)
BEGIN
declare done int default 0;
declare done_holder int;
declare _date datetime;
declare _piece_type varchar(55);
declare _motif int;
declare _sign int;
declare _amount decimal(15,5);
declare _partner varchar(255);
declare _piece varchar(10000);
declare _code varchar(255);
declare _cash_desk int;
declare _payment int;
declare _payment_tansfert int;
declare _register varchar(20000);
declare _reference varchar(255);
declare _session int;
declare _transfer_amount decimal(15,5);


declare cursorPayment cursor for
select pos_session_transfer_payment.Id, pos_session_transfer_payment.payment, pa.`date`,  pa.piece_type , pa.amount ,  commercial_partner.name, pa.code, pa.reference
from pos_session_transfer_payment join
commercial_payment pa on pos_session_transfer_payment.payment =pa.Id left join
commercial_partner on commercial_partner.Id = pa.partner
where pos_session_transfer_payment.session_transfer  = _transfer;
declare continue handler for sqlstate '02000' set done=1;


select amount, cash_desk, sign, `session`
into _transfer_amount, _cash_desk, _sign, _session
from pos_session_transfer
where Id = _transfer;

SET SESSION group_concat_max_len = 1000000;



if((select count(payment) from pos_session_transfer_payment where session_transfer = _transfer )=0) then
  insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, pos_session_transfer)
  value(now(), now(), if(_sign = 1, 9, 8), -_sign * _transfer_amount , -_sign, _cash_desk, _transfer);
else

  set done=0;
  open cursorPayment;
  repeat
  fetch cursorPayment into _payment_tansfert, _payment, _date, _piece_type, _amount, _partner, _code, _reference;
    if not done then
      set done_holder=done;



SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(pos_order.code, ' ', coalesce(pos_order.reference, ''))
    WHEN commercial_payment_piece.piece_type = 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(pos_credit_order.code, ' ', coalesce(pos_credit_order.reference, ''))
    WHEN commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
pos_order on piece = pos_order.Id and commercial_payment_piece.piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_invoice on piece = sale_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
pos_credit_order on piece = pos_credit_order.Id and commercial_payment_piece.piece_type = 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;



set _register = concat(_code, '; ', _partner, '; ', _piece);


insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, pos_session_transfer, payment, pos_session_transfer_payment, register)
  value(now(), now(), if(_sign = 1, 9, 8), -_sign * _amount , -_sign, _cash_desk, _transfer, _payment, _payment_tansfert, _register);

  UPDATE commercial_payment
  set cash_desk = if(_sign = 1, null, _cash_desk), pos_session = _session
  WHERE Id = _payment;

set done=done_holder;
end if;
until done end repeat;
close cursorPayment;


end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accountingCash_registerADDByTransfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accountingCash_registerADDByTransfer`(_transfer int)
BEGIN
declare done int default 0;
declare done_holder int;
declare _date datetime;
declare _piece_type varchar(55);
declare _motif int;
declare _state int;
declare _amount decimal(15,5);
declare _partner varchar(255);
declare _piece varchar(10000);
declare _code varchar(255);
declare _cash_desk int;
declare _payment int;
declare _payment_tansfert int;
declare _register varchar(20000);
declare _reference varchar(255);

declare _cash_desk_in int default null;
declare _cash_desk_out int;
declare _cash_desk_in_name varchar(255);
declare _cash_desk_out_name varchar(255);

declare _transfer_amount decimal(15,5);


declare cursorPayment cursor for
select accounting_payment_transfer.Id, accounting_payment_transfer.payment, pa.`date`,  pa.piece_type , pa.amount , pa.cash_desk,  if(pa.piece_type <> 'HR', commercial_partner.name, concat(first_name, ' ', last_name)), pa.code, pa.reference
from accounting_payment_transfer join
commercial_payment pa on accounting_payment_transfer.payment =pa.Id left join
commercial_partner on commercial_partner.Id = pa.partner and pa.piece_type <> 'HR' left join
atooerp_person on atooerp_person.Id = pa.partner and pa.piece_type = 'HR'
where accounting_payment_transfer.transfer = _transfer;
declare continue handler for sqlstate '02000' set done=1;


select accounting_transfer.amount, accounting_transfer.cash_desk_in, accounting_transfer.cash_desk_out, concat('To: ', coalesce(cdIn.name, 'Release')), concat('From: ',cdOut.name)
into _transfer_amount, _cash_desk_in, _cash_desk_out, _cash_desk_in_name, _cash_desk_out_name
from accounting_transfer LEFT join
accounting_cash_desk cdIn on cdIn.Id = accounting_transfer.cash_desk_in LEFT join
accounting_cash_desk cdOut on cdOut.Id = accounting_transfer.cash_desk_out
where accounting_transfer.Id = _transfer;

SET SESSION group_concat_max_len = 1000000;


if((select count(payment) from accounting_payment_transfer where transfer = _transfer )=0) then
  insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, transfer, register)
  value(now(), now(), 9, -_transfer_amount , -1, _cash_desk_out, _transfer, _cash_desk_in_name);
  insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, transfer, register)
  value(now(), now(), 8, _transfer_amount , 1, _cash_desk_in, _transfer, _cash_desk_out_name);
else

  set done=0;
  open cursorPayment;
  repeat
  fetch cursorPayment into _payment_tansfert, _payment, _date, _piece_type, _amount, _cash_desk, _partner, _code, _reference;
if not done then
set done_holder=done;

case _piece_type
when 'Purchase' then

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_order.code
    WHEN commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_shipping.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_invoice.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_credit_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
purchase_order on piece = purchase_order.Id and commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_shipping on piece = purchase_shipping.Id and commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_invoice on piece = purchase_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_credit_invoice on piece = purchase_credit_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;

when 'Sale' then

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_order.reference, sale_order.code)
    WHEN commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_shipping.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_credit_invoice.reference,sale_credit_invoice.code)
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
sale_order on piece = sale_order.Id and commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_shipping on piece = sale_shipping.Id and commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_invoice on piece = sale_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_credit_invoice on piece = sale_credit_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment =   _payment
group by payment;

when 'HR' then


SELECT GROUP_CONCAT(

CASE
    WHEN commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_period.name , '[', hr_pay_slip.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_deposit_type.name , '[', hr_deposit.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END  SEPARATOR ';\n') into _piece
FROM commercial_payment_piece left join
hr_pay_slip on piece = hr_pay_slip.Id and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit on piece = hr_deposit.Id and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_period on hr_period.Id = period and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit_type on hr_deposit_type.Id = deposit_type and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;


ELSE
set _motif = null;
set _state = 1;
END case;

set _register = concat(_code, '; ', _partner, '; ', _piece);


insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, transfer, payment, payment_transfert, register)
  value(now(), now(), 9, -_amount , -1, _cash_desk_out, _transfer, _payment, _payment_tansfert, concat(_cash_desk_in_name, ' | ', _register));
  insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, transfer, payment, payment_transfert, register)
  value(now(), now(), 8, _amount , 1, _cash_desk_in, _transfer, _payment, _payment_tansfert, concat(_cash_desk_out_name, ' | ', _register));

UPDATE commercial_payment set cash_desk = _cash_desk_in WHERE Id = _payment;


set done=done_holder;
end if;
until done end repeat;
close cursorPayment;


end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accountingCash_registerDeleteByBank_deposit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accountingCash_registerDeleteByBank_deposit`(_bank_deposit int)
BEGIN
declare done int default 0;
declare done_holder int;
declare _date datetime;
declare _piece_type varchar(55);
declare _motif int;
declare _state int;
declare _amount decimal(15,5);
declare _partner varchar(255);
declare _piece varchar(10000);
declare _code varchar(255);
declare _cash_desk int;
declare _payment int;
declare _bank_deposit_line int;
declare _bank_account int;
declare _register varchar(20000);
declare _reference varchar(255);
declare _sens int;


declare _bank_deposit_amount decimal(15,5);


declare cursorPayment cursor for
select accounting_bank_deposit_line.Id, accounting_bank_deposit_line.payment, pa.`date`,  pa.piece_type , pa.amount ,  if(pa.piece_type <> 'HR', commercial_partner.name, concat(first_name, ' ', last_name)), pa.code, pa.reference
from accounting_bank_deposit_line join
commercial_payment pa on accounting_bank_deposit_line.payment =pa.Id left join
commercial_partner on commercial_partner.Id = pa.partner and pa.piece_type <> 'HR' left join
atooerp_person on atooerp_person.Id = pa.partner and pa.piece_type = 'HR'
where accounting_bank_deposit_line.bank_deposit = _bank_deposit;
declare continue handler for sqlstate '02000' set done=1;


select amount, cash_desk, bank_account, sens
into _bank_deposit_amount, _cash_desk, _bank_account, _sens
from accounting_bank_deposit
where Id = _bank_deposit;

SET SESSION group_concat_max_len = 1000000;

if((select count(payment) from accounting_bank_deposit_line where bank_deposit = _bank_deposit )=0) then
  insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, bank_deposit, register)
  value(now(), now(), if(_bank_deposit_amount >= 0,5 ,6), _bank_deposit_amount , if(_bank_deposit_amount < 0,-1,1), _cash_desk, _bank_deposit, '****Correction****');
else

  set done=0;
  open cursorPayment;
  repeat
  fetch cursorPayment into _bank_deposit_line, _payment, _date, _piece_type, _amount, _partner, _code, _reference;
if not done then
set done_holder=done;

case _piece_type
when 'Purchase' then

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_order.code
    WHEN commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_shipping.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_invoice.reference
    WHEN commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN purchase_credit_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
purchase_order on piece = purchase_order.Id and commercial_payment_piece.piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_shipping on piece = purchase_shipping.Id and commercial_payment_piece.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_invoice on piece = purchase_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
purchase_credit_invoice on piece = purchase_credit_invoice.Id and commercial_payment_piece.piece_type = 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;

when 'Sale' then

SELECT GROUP_CONCAT(concat(commercial_dialing.name , '[',

CASE
    WHEN commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_order.reference, sale_order.code)
    WHEN commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_shipping.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN sale_invoice.code
    WHEN commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN coalesce( sale_credit_invoice.reference,sale_credit_invoice.code)
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END,

']: ', format(commercial_payment_piece.amount, 3)) SEPARATOR ';\n') into _piece
FROM commercial_payment_piece join
commercial_dialing on commercial_dialing.piece_type = commercial_payment_piece.piece_type left join
sale_order on piece = sale_order.Id and commercial_payment_piece.piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_shipping on piece = sale_shipping.Id and commercial_payment_piece.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_invoice on piece = sale_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
sale_credit_invoice on piece = sale_credit_invoice.Id and commercial_payment_piece.piece_type = 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment =   _payment
group by payment;

when 'HR' then


SELECT GROUP_CONCAT(

CASE
    WHEN commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_period.name , '[', hr_pay_slip.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN concat(hr_deposit_type.name , '[', hr_deposit.Id,']: ', format(commercial_payment_piece.amount, 3))
    WHEN commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN pay.code

    ELSE null
END  SEPARATOR ';\n') into _piece
FROM commercial_payment_piece left join
hr_pay_slip on piece = hr_pay_slip.Id and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit on piece = hr_deposit.Id and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_period on hr_period.Id = period and commercial_payment_piece.piece_type = 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
hr_deposit_type on hr_deposit_type.Id = deposit_type and commercial_payment_piece.piece_type = 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' left join
commercial_payment pay on piece = pay.Id and commercial_payment_piece.piece_type = 'Commercial.Payment, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
where payment = _payment
group by payment;


ELSE
set _motif = null;
set _state = 1;
END case;

set _register = concat('****Correction****\n', _code, '; ', _partner, '; ', _piece);


insert into accounting_cash_register (create_date, `date`, motif, amount, state, cash_desk, bank_deposit, payment, bank_deposit_line, register)
  value(now(), now(), 5, _amount * _sens , _sens, _cash_desk, _bank_deposit, _payment, _bank_deposit_line, _register);

if(_sens = 1) then
  UPDATE commercial_payment set cash_desk = _cash_desk, bank_account = 0 WHERE Id = _payment ;
else
  UPDATE commercial_payment set cash_desk = null, bank_account = _bank_account WHERE Id = _payment;
end if;


set done=done_holder;
end if;
until done end repeat;
close cursorPayment;


end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accounting_bank_account_status_solde` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accounting_bank_account_status_solde`(lastId int, lastSolde decimal(15,5), lastBank_account int)
BEGIN
declare nextId int;
declare nextSolde, bank_solde decimal(15,5);
SET max_sp_recursion_depth=5000;
SELECT        coalesce(MIN(Id),0), amount + lastSolde into nextId, nextSolde
FROM            (SELECT        Id, amount
FROM            accounting_bank_account_status accounting_bank_account_status_1
WHERE        (Id > lastId) and (bank_account = lastBank_account)) derivedtbl_1;
if(nextId <> 0) then
update accounting_bank_account_status set solde = nextSolde where Id = nextId;
call accounting_bank_account_status_solde(nextId, nextSolde, lastBank_account);
else
UPDATE       accounting_bank_account
SET                solde = lastSolde
WHERE        (Id = lastBank_account);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `accounting_update_cash_register_solde` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `accounting_update_cash_register_solde`(lastId int, lastSolde decimal(15,5))
BEGIN
declare nextId int;
declare nextSolde decimal(15,5);
SET max_sp_recursion_depth=5000;
SELECT        coalesce(MIN(Id),0), amount + lastSolde into nextId, nextSolde
FROM            (SELECT        Id, amount
FROM            accounting_cash_register accounting_cash_register_1
WHERE        (Id > lastId)) derivedtbl_1;
if(nextId <> 0) then
update accounting_cash_register set solde = nextSolde where Id = nextId;
call accounting_update_cash_register_solde(nextId, nextSolde);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `bookingChangeGuest` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `bookingChangeGuest`(oldId int, newId int)
BEGIN

update booking_reservation set guest = newId WHERE guest = oldId;

update booking_reservation set partner = (select partner from booking_guest where Id = guest)
where guest = newId;

update sale_shipping set partner = (select partner from booking_guest where Id = newId)
where partner = (select partner from booking_guest where Id = oldId);

update commercial_payment set partner = (select partner from booking_guest where Id = newId)
where partner = (select partner from booking_guest where Id = oldId);

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateProjectProgress` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `CalculateProjectProgress`(IN projectId INT)
proc_label: BEGIN
    DECLARE taskId INT;
    DECLARE taskDuration FLOAT;
    DECLARE taskProgress FLOAT;
    DECLARE weightedProgress FLOAT;
    DECLARE totalDuration FLOAT DEFAULT 0;
    DECLARE progressResult FLOAT DEFAULT 0;
    DECLARE done INT DEFAULT FALSE;

    DECLARE taskCursor CURSOR FOR
        SELECT Id, COALESCE(duration, 0) as duration
        FROM atooerp_project_task
        WHERE project = projectId
           AND (parent_task_id = 0 OR parent_task_id IS NULL);

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    -- Check if project exists
    IF NOT EXISTS (SELECT 1 FROM atooerp_project WHERE Id = projectId) THEN
        SELECT 0 AS progress;
        LEAVE proc_label;
    END IF;

    -- Check for main tasks
    SELECT COUNT(*) INTO @taskCount
    FROM atooerp_project_task
    WHERE project = projectId AND (parent_task_id = 0 OR parent_task_id IS NULL);

    IF @taskCount = 0 THEN
        SELECT 0 AS progress;
        LEAVE proc_label;
    END IF;

    -- Calculate total duration
    SELECT COALESCE(SUM(COALESCE(duration, 0)), 0) INTO totalDuration
    FROM atooerp_project_task
    WHERE project = projectId
      AND (parent_task_id = 0 OR parent_task_id IS NULL);

    IF totalDuration = 0 THEN
        SELECT 0 AS progress;
        LEAVE proc_label;
    END IF;

    OPEN taskCursor;

    read_loop: LOOP
        FETCH taskCursor INTO taskId, taskDuration;
        IF done THEN
            LEAVE read_loop;
        END IF;

        CALL CalculateTaskProgress(taskId, taskProgress);
        SET taskProgress = IFNULL(taskProgress, 0);
        SET weightedProgress = taskProgress * taskDuration;
        SET progressResult = progressResult + weightedProgress;
    END LOOP;

    CLOSE taskCursor;

    SET progressResult = progressResult / totalDuration;

    SELECT
        progressResult AS progress;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `CalculateTaskProgress` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `CalculateTaskProgress`(
    IN taskId INT,
    OUT progressResult FLOAT
)
BEGIN
    DECLARE projectId INT;
    DECLARE totalDuration FLOAT DEFAULT 0;
    DECLARE isTaskClosed BOOLEAN DEFAULT FALSE;
    DECLARE hasSubtasks INT DEFAULT 0;
    DECLARE currentLevel INT;
    DECLARE rowsAffected INT;
    DECLARE maxLevel INT;

    -- 1. Get project
    SELECT project INTO projectId FROM atooerp_project_task WHERE Id = taskId;
   
    -- 2. Check if task is closed
    SELECT COUNT(*) > 0 INTO isTaskClosed
    FROM atooerp_step_object obj
    JOIN atooerp_step_cycle_line scl ON obj.current = scl.step AND obj.cycle = scl.cycle
    WHERE obj.piece = taskId
    AND obj.piece_type = 'ProjectManager.Task'
    AND scl.is_closing = 1
    LIMIT 1;

    -- 3. If closed, set progress=1
    IF isTaskClosed THEN
        SELECT duration INTO totalDuration FROM atooerp_project_task WHERE Id = taskId;
        SET progressResult = 1;
    ELSE
        -- 4. Check for subtasks
        SELECT COUNT(*) INTO hasSubtasks
        FROM atooerp_project_task
        WHERE parent_task_id = taskId;
       
        -- 5. No subtasks, set progress=0
        IF hasSubtasks = 0 THEN
            SELECT duration INTO totalDuration FROM atooerp_project_task WHERE Id = taskId;
            SET progressResult = 0;
        ELSE
            -- 6. Create table for hierarchy calculations
            SET @session_id = CONCAT('session_', FLOOR(RAND() * 1000000));
            DROP TABLE IF EXISTS task_progress_data;

            CREATE TABLE task_progress_data (
                session_id VARCHAR(50),
                task_id INT,
                parent_id INT,
                duration FLOAT,
                level INT,
                is_leaf BOOLEAN DEFAULT TRUE,
                is_closed BOOLEAN DEFAULT FALSE,
                progress FLOAT DEFAULT 0,
                processed BOOLEAN DEFAULT FALSE,
                PRIMARY KEY (session_id, task_id),
                INDEX (session_id, parent_id),
                INDEX (session_id, level),
                INDEX (session_id, processed)
            ) ENGINE=InnoDB;

            -- 7. Insert main task
            INSERT INTO task_progress_data (session_id, task_id, parent_id, duration, level)
            SELECT @session_id, Id, parent_task_id, duration, 0
            FROM atooerp_project_task
            WHERE Id = taskId;

            -- 8. Build hierarchy
            SET currentLevel = 0;

            REPEAT
                SET currentLevel = currentLevel + 1;

                INSERT INTO task_progress_data (session_id, task_id, parent_id, duration, level)
                SELECT @session_id, t.Id, t.parent_task_id, t.duration, currentLevel
                FROM atooerp_project_task t
                JOIN task_progress_data pt ON t.parent_task_id = pt.task_id AND pt.session_id = @session_id
                WHERE pt.level = currentLevel - 1
                AND NOT EXISTS (
                    SELECT 1 FROM task_progress_data
                    WHERE task_id = t.Id AND session_id = @session_id
                );

                SELECT ROW_COUNT() INTO rowsAffected;

            UNTIL rowsAffected = 0 OR currentLevel > 20 END REPEAT;

            -- 9. Mark leaf tasks
            UPDATE task_progress_data t
            SET t.is_leaf = NOT EXISTS (
                SELECT 1 FROM atooerp_project_task
                WHERE parent_task_id = t.task_id
            )
            WHERE t.session_id = @session_id;

            -- 10. Mark closed tasks
            UPDATE task_progress_data t
            SET t.is_closed = EXISTS (
                SELECT 1 FROM atooerp_step_object obj
                JOIN atooerp_step_cycle_line scl ON obj.current = scl.step AND obj.cycle = scl.cycle
                WHERE obj.piece = t.task_id
                AND obj.piece_type = 'ProjectManager.Task'
                AND scl.is_closing = 1
            )
            WHERE t.session_id = @session_id;

            -- 11. Set progress for leaves and closed tasks
            UPDATE task_progress_data
            SET progress = CASE
                              WHEN is_closed THEN 1
                              WHEN is_leaf THEN 0
                              ELSE progress
                          END,
                processed = is_leaf OR is_closed
            WHERE (is_leaf = TRUE OR is_closed = TRUE)
            AND session_id = @session_id;

            -- 12. Calculate parent progress (bottom-up)
            SELECT MAX(level) INTO maxLevel FROM task_progress_data WHERE session_id = @session_id;
            SET currentLevel = maxLevel;

            WHILE currentLevel >= 0 DO
                UPDATE task_progress_data parent
                JOIN (
                    SELECT
                        t.parent_id,
                        SUM(t.duration) AS total_duration,
                        SUM(t.duration * t.progress) AS weighted_sum
                    FROM task_progress_data t
                    WHERE t.parent_id IS NOT NULL
                    AND t.session_id = @session_id
                    GROUP BY t.parent_id
                ) child ON parent.task_id = child.parent_id
                SET parent.progress = CASE
                                        WHEN child.total_duration > 0 THEN child.weighted_sum / child.total_duration
                                        ELSE 0
                                      END,
                    parent.processed = TRUE
                WHERE parent.level = currentLevel - 1
                AND parent.session_id = @session_id;

                SET currentLevel = currentLevel - 1;
            END WHILE;

            -- 13. Get final progress
            SELECT progress INTO progressResult
            FROM task_progress_data
            WHERE task_id = taskId
            AND session_id = @session_id;

            -- 14. Calculate total duration of direct subtasks
            SELECT IFNULL(SUM(duration), 0) INTO totalDuration
            FROM atooerp_project_task
            WHERE parent_task_id = taskId;

            -- 15. Cleanup
            DROP TABLE IF EXISTS task_progress_data;
        END IF;
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercialProductDeleteTrace` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercialProductDeleteTrace`(IdProduct int)
BEGIN
DELETE FROM commercial_product_partner_price
WHERE        (product = IdProduct);
DELETE FROM commercial_product_stock_warehouse
WHERE        (product = IdProduct);
DELETE FROM commercial_soldes_product
WHERE        (product = IdProduct);
DELETE FROM pos_category_product
WHERE        (product = IdProduct);
DELETE FROM pos_product_change_price_line
WHERE        (product = IdProduct);
DELETE FROM pos_scales_product
WHERE        (product = IdProduct);
DELETE FROM production_cost
WHERE        (product = IdProduct);
DELETE FROM production_product_cost
WHERE        (product = IdProduct);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_batch_get_batches_to_generate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_batch_get_batches_to_generate`(
    IN p_Product_id INT,
    IN p_Warehouse_id INT,
    IN p_piece_type VARCHAR(255),
    IN p_piece_id INT,
    IN p_piece_line INT
)
BEGIN
    SET @rownum := 0;
    SET @Product_id := p_Product_id;
    SET @Warehouse_id := p_Warehouse_id;
    SET @piece_type := p_piece_type;
    SET @piece_id := p_piece_id;
    SET @piece_line := p_piece_line;
   SELECT ranked_results.*
FROM (
    SELECT
        cb.Id,
        cb.code, 
        (cbw.quantity - COALESCE(appliedQty.quantity, 0)) as quantity,
        @rownum := @rownum + 1 as row_num
    FROM 
        commercial_batch_warehouse cbw
    INNER JOIN 
        commercial_batch cb ON cb.Id = cbw.batch
    INNER JOIN 
        commercial_product cp ON cp.Id = cbw.product
    LEFT JOIN 
        commercial_batch_type cbt ON cp.batch_type = cbt.Id
    LEFT OUTER JOIN
        (SELECT cbsl.batch, SUM(cbsl.quantity) as quantity 
         FROM commercial_batch_stock_log cbsl 
         LEFT OUTER JOIN commercial_stock_mouvement sm ON sm.stock_out = cbsl.piece_id
         WHERE CASE 
                WHEN @piece_type LIKE '%Purchase.Shipping%' THEN cbsl.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Sale.Shipping_return%' THEN cbsl.piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Commercial.Stock_entry%' THEN cbsl.piece_type = 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Commercial.Stock_out%' THEN cbsl.piece_type = 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Commercial.Stock_mouvement%' THEN cbsl.piece_type = 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND sm.Id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Purchase.Shipping_return%' THEN cbsl.piece_type = '%Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Sale.Shipping%' THEN cbsl.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
            END
         GROUP BY cbsl.batch
        ) appliedQty ON appliedQty.batch = cbw.batch
    JOIN
        (SELECT @rownum := 0) r
    WHERE 
        cbw.product = @Product_id
        AND cbw.warehouse = @Warehouse_id
    ORDER BY 
        CASE 
            WHEN COALESCE(cbt.retrieval_method, 1) = 1 THEN cb.Id  -- FIFO (oldest first)
            WHEN COALESCE(cbt.retrieval_method, 1) = 2 THEN -cb.Id  -- LIFO (newest first)
            WHEN COALESCE(cbt.retrieval_method, 1) = 3 THEN cb.expiration_date  -- FEFO
            WHEN COALESCE(cbt.retrieval_method, 1) = 4 THEN (cbw.quantity - COALESCE(appliedQty.quantity, 0))  -- Least packages
        END,
        cb.Id
) AS ranked_results
CROSS JOIN (
    SELECT COUNT(*) AS has_positive
    FROM commercial_batch_warehouse cbw
    LEFT OUTER JOIN (
        SELECT cbsl.batch, SUM(cbsl.quantity) as quantity 
        FROM commercial_batch_stock_log cbsl 
        LEFT OUTER JOIN commercial_stock_mouvement sm ON sm.stock_out = cbsl.piece_id
        WHERE CASE 
                WHEN @piece_type LIKE '%Purchase.Shipping%' THEN cbsl.piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Sale.Shipping_return%' THEN cbsl.piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Commercial.Stock_entry%' THEN cbsl.piece_type = 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Commercial.Stock_out%' THEN cbsl.piece_type = 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Commercial.Stock_mouvement%' THEN cbsl.piece_type = 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND sm.Id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Purchase.Shipping_return%' THEN cbsl.piece_type = '%Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
                WHEN @piece_type LIKE '%Sale.Shipping%' THEN cbsl.piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND piece_id = @piece_id AND piece_line = @piece_line
            END
        GROUP BY cbsl.batch
    ) appliedQty ON appliedQty.batch = cbw.batch
    WHERE 
        cbw.product = @Product_id
        AND cbw.warehouse = @Warehouse_id
        AND (cbw.quantity - COALESCE(appliedQty.quantity, 0)) > 0
) AS check_positive
WHERE (check_positive.has_positive > 0 AND ranked_results.quantity > 0)
   OR (check_positive.has_positive = 0 AND ranked_results.row_num = 1);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_batch_merge` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_batch_merge`(
    IN p_source_batch_id INT,
    IN p_target_batch_id INT
)
BEGIN
    DECLARE v_warehouse INT;
    DECLARE v_quantity DECIMAL(15,5);
    DECLARE v_done INT DEFAULT 0;
    
    -- Cursor to find all warehouse-product combinations with stock for the source batch
    DECLARE batch_cursor CURSOR FOR
        SELECT warehouse, quantity
        FROM commercial_batch_warehouse
        WHERE batch = p_source_batch_id
        AND quantity > 0;
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET v_done = 1;
    
    OPEN batch_cursor;
    
    batch_loop: LOOP
        -- Get next warehouse-product combination with stock
        FETCH batch_cursor INTO  v_warehouse, v_quantity;
        IF v_done THEN 
            LEAVE batch_loop;
        END IF;
        CALL commercial_batch_transfer(p_source_batch_id,p_target_batch_id,v_quantity,v_warehouse,'merge');
    END LOOP;
    
    CLOSE batch_cursor;
    
    UPDATE commercial_batch SET destination = p_target_batch_id
    WHERE Id = p_source_batch_id;
    
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_batch_transfer` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_batch_transfer`(
    IN p_source_batch_id INT,
    IN p_destination_batch_id INT,
    IN p_quantity DECIMAL(15,5),
    IN p_warehouse_id INT,
    IN p_action VARCHAR(255)
)
BEGIN
    DECLARE v_source_product INT;
    DECLARE v_source_cump DECIMAL(15,5);
    DECLARE v_source_current_stock DECIMAL(15,5);
    DECLARE v_destination_current_stock DECIMAL(15,5);
    

    -- Get current stock and CUMP for source batch
    SELECT COALESCE(quantity, 0), COALESCE(cump, 0) , product
    INTO v_source_current_stock, v_source_cump, v_source_product
    FROM commercial_batch_warehouse
    WHERE batch = p_source_batch_id AND warehouse = p_warehouse_id;
    
    -- Get current stock for destination batch
    SELECT COALESCE(quantity, 0)
    INTO v_destination_current_stock
    FROM commercial_batch_warehouse
    WHERE batch = p_destination_batch_id AND warehouse = p_warehouse_id;
    
    
    -- Start transaction
    START TRANSACTION;
    
    -- Insert negative log entry for source batch
    INSERT INTO commercial_batch_stock_log (
        date, 
        cump, 
        batch, 
        warehouse, 
        product, 
        piece_type, 
        piece_line, 
        quantity, 
        stock, 
        piece_id, 
        `action`
    )
    VALUES (
        NOW(), 
        v_source_cump, 
        p_source_batch_id, 
        p_warehouse_id, 
        v_source_product, 
        'BatchTransfer OUT', 
        0, 
        -p_quantity, 
        v_source_current_stock - p_quantity, 
        0, 
        p_action
    );
    
    -- Insert positive log entry for destination batch
    INSERT INTO commercial_batch_stock_log (
        date, 
        cump, 
        batch, 
        warehouse, 
        product, 
        piece_type, 
        piece_line, 
        quantity, 
        stock, 
        piece_id, 
        `action`
    )
    VALUES (
        NOW(), 
        v_source_cump, 
        p_destination_batch_id, 
        p_warehouse_id, 
        v_source_product, 
        'BatchTransfer IN', 
        0, 
        p_quantity, 
        COALESCE(v_destination_current_stock,0) + p_quantity, 
        0, 
        p_action
    );
    
    COMMIT;
    
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_fill_category_hierarchy` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_fill_category_hierarchy`()
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE _id INT;
  DECLARE rowCount INT;
  DROP TEMPORARY TABLE IF EXISTS commercial_category_hierarchy;
  CREATE TEMPORARY TABLE commercial_category_hierarchy AS SELECT Id,parent FROM commercial_category WHERE parent > 0;
  CREATE TEMPORARY TABLE IF NOT EXISTS commercial_category_temp_2 AS SELECT Id,parent FROM commercial_category;
  CREATE TEMPORARY TABLE IF NOT EXISTS commercial_category_temp_1 (Id INT ,parent INT);
  INSERT INTO commercial_category_hierarchy (Id,parent)
  SELECT Id AS Id , Id AS parent FROM
  commercial_category;


  SET rowCount = 1;

  WHILE rowCount > 0 DO
      INSERT INTO commercial_category_temp_1 (Id,parent)
      SELECT c1.Id,c2.parent
      FROM commercial_category_temp_2 c1 LEFT OUTER JOIN
      commercial_category c2 ON c1.parent = c2.Id
      WHERE  c1.parent > 0;


    SET rowCount = (SELECT COUNT(*) FROM commercial_category_temp_1 WHERE parent <= 0);


    INSERT INTO commercial_category_hierarchy
    SELECT * FROM commercial_category_temp_1
    WHERE commercial_category_temp_1.parent > 0;

    DELETE FROM commercial_category_temp_2;

    INSERT INTO commercial_category_temp_2
    SELECT * FROM commercial_category_temp_1
    WHERE commercial_category_temp_1.parent > 0;

    DELETE FROM commercial_category_temp_1;

  END WHILE;
  INSERT INTO commercial_category_temp_1 (Id,parent)
    SELECT c1.Id,c2.parent
    FROM commercial_category_temp_2 c1 LEFT OUTER JOIN
    commercial_category c2 ON c1.parent = c2.Id
    WHERE  c1.parent > 0;
    INSERT INTO commercial_category_hierarchy
    SELECT * FROM commercial_category_temp_1
    WHERE commercial_category_temp_1.parent > 0;
  DROP TEMPORARY TABLE IF EXISTS `commercial_category_temp_1`;
  DROP TEMPORARY TABLE IF EXISTS `commercial_category_temp_2`;
  DROP TEMPORARY TABLE IF EXISTS `commercial_category_user_type`;
  CREATE TEMPORARY TABLE `commercial_category_user_type` AS select `ch`.`Id` AS `category`,`umg`.`user` AS `user`,`sale_shipping` ,`sale_credit_invoice`,`purchase_shipping`, `purchase_credit_invoice`,`stock_entry`, `stock_out`, `stock_mouvement`, `inventory`,`sale_order`,`purchase_order`,`sale_quotation`,`purchase_quotation`,`crm_opportunity`,`sale_invoice`,`purchase_invoice`,`need_expression`
  from (((((`commercial_category_hierarchy` `ch` left join
  `commercial_category_group` `cg` on((`cg`.`category` = `ch`.`parent`))) left join
   `commercial_category` `c` on((`c`.`Id` = `ch`.`Id`))) left join
   `atooerp_group` `ag` on((`ag`.`Id` = `cg`.`group`))) left join
    `atooerp_user_module_group` `umg` on((`umg`.`group` = `ag`.`Id`))) left join
    `commercial_category_group_type` `cgt` on((`cgt`.`Id` = `cg`.`type`)))
     where ((`cg`.`enabled` = 1) and (`cg`.`begin_date` <= now()) and (`cg`.`end_date` >= now()));
    ALTER TABLE `commercial_category_user_type` ADD INDEX idx_user (`user`);
    ALTER TABLE `commercial_category_user_type` ADD INDEX idx_category (`category`);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_fill_category_hierarchyByUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_fill_category_hierarchyByUser`(_user int)
BEGIN
  DECLARE done INT DEFAULT FALSE;
  DECLARE _id INT;
  DECLARE rowCount INT;
  DROP TEMPORARY TABLE IF EXISTS commercial_category_hierarchy;
  CREATE TEMPORARY TABLE commercial_category_hierarchy AS SELECT Id,parent FROM commercial_category WHERE parent > 0;
  CREATE TEMPORARY TABLE IF NOT EXISTS commercial_category_temp_2 AS SELECT Id,parent FROM commercial_category;
  CREATE TEMPORARY TABLE IF NOT EXISTS commercial_category_temp_1 (Id INT ,parent INT);
  INSERT INTO commercial_category_hierarchy (Id,parent)
  SELECT Id AS Id , Id AS parent FROM
  commercial_category;

  
  SET rowCount = 1;

  WHILE rowCount > 0 DO
      INSERT INTO commercial_category_temp_1 (Id,parent)
      SELECT c1.Id,c2.parent
      FROM commercial_category_temp_2 c1 LEFT OUTER JOIN
      commercial_category c2 ON c1.parent = c2.Id
      WHERE  c1.parent > 0;


    SET rowCount = (SELECT COUNT(*) FROM commercial_category_temp_1 WHERE parent <= 0);


    INSERT INTO commercial_category_hierarchy
    SELECT * FROM commercial_category_temp_1
    WHERE commercial_category_temp_1.parent > 0;

    DELETE FROM commercial_category_temp_2;

    INSERT INTO commercial_category_temp_2
    SELECT * FROM commercial_category_temp_1
    WHERE commercial_category_temp_1.parent > 0;

    DELETE FROM commercial_category_temp_1;

  END WHILE;
  INSERT INTO commercial_category_temp_1 (Id,parent)
    SELECT c1.Id,c2.parent
    FROM commercial_category_temp_2 c1 LEFT OUTER JOIN
    commercial_category c2 ON c1.parent = c2.Id
    WHERE  c1.parent > 0;
    INSERT INTO commercial_category_hierarchy
    SELECT * FROM commercial_category_temp_1
    WHERE commercial_category_temp_1.parent > 0;
  DROP TEMPORARY TABLE IF EXISTS `commercial_category_temp_1`;
  DROP TEMPORARY TABLE IF EXISTS `commercial_category_temp_2`;
  DROP TEMPORARY TABLE IF EXISTS `commercial_category_user_type`;
  CREATE TEMPORARY TABLE `commercial_category_user_type` AS select `ch`.`Id` AS `category`,`umg`.`user` AS `user`,`sale_shipping` ,`sale_credit_invoice`,`purchase_shipping`, `purchase_credit_invoice`,`stock_entry`, `stock_out`, `stock_mouvement`, `inventory`,`sale_order`,`purchase_order`,`sale_quotation`,`purchase_quotation`,`crm_opportunity`,`sale_invoice`,`purchase_invoice`,`need_expression`
  from (((((`commercial_category_hierarchy` `ch` left join
  `commercial_category_group` `cg` on((`cg`.`category` = `ch`.`parent`))) left join
   `commercial_category` `c` on((`c`.`Id` = `ch`.`Id`))) left join
   `atooerp_group` `ag` on((`ag`.`Id` = `cg`.`group`))) left join
    `atooerp_user_module_group` `umg` on((`umg`.`group` = `ag`.`Id`))) left join
    `commercial_category_group_type` `cgt` on((`cgt`.`Id` = `cg`.`type`)))
     where ((`user` = _user) and (`cg`.`enabled` = 1) and (`cg`.`begin_date` <= now()) and (`cg`.`end_date` >= now()));
    ALTER TABLE `commercial_category_user_type` ADD INDEX idx_user (`user`);
    ALTER TABLE `commercial_category_user_type` ADD INDEX idx_category (`category`);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_fill_partner_category_hierarchy` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_fill_partner_category_hierarchy`()
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE _id INT;
    DECLARE rowCount INT;
    DROP TEMPORARY TABLE IF EXISTS commercial_partner_category_hierarchy;
    CREATE TEMPORARY TABLE commercial_partner_category_hierarchy AS SELECT Id,parent FROM commercial_partner_category WHERE parent > 0;
    CREATE TEMPORARY TABLE IF NOT EXISTS commercial_partner_category_temp_2 AS SELECT Id,parent FROM commercial_partner_category;
    CREATE TEMPORARY TABLE IF NOT EXISTS commercial_partner_category_temp_1 (Id INT ,parent INT);
    INSERT INTO commercial_partner_category_hierarchy (Id,parent)
    SELECT Id AS Id , Id AS parent FROM
    commercial_partner_category;

    
    SET rowCount = 1;
    
    WHILE rowCount > 0 DO
        INSERT INTO commercial_partner_category_temp_1 (Id,parent)
        SELECT c1.Id,c2.parent
        FROM commercial_partner_category_temp_2 c1 LEFT OUTER JOIN
        commercial_partner_category c2 ON c1.parent = c2.Id
        WHERE  c1.parent > 0;

        
        SET rowCount = (SELECT COUNT(*) FROM commercial_partner_category_temp_1 WHERE parent <= 0);


        INSERT INTO commercial_partner_category_hierarchy
        SELECT * FROM commercial_partner_category_temp_1
        WHERE commercial_partner_category_temp_1.parent > 0;

        DELETE FROM commercial_partner_category_temp_2;

        INSERT INTO commercial_partner_category_temp_2
        SELECT * FROM commercial_partner_category_temp_1
        WHERE commercial_partner_category_temp_1.parent > 0;

        DELETE FROM commercial_partner_category_temp_1;

    END WHILE;
    INSERT INTO commercial_partner_category_temp_1 (Id,parent)
        SELECT c1.Id,c2.parent
        FROM commercial_partner_category_temp_2 c1 LEFT OUTER JOIN
        commercial_partner_category c2 ON c1.parent = c2.Id
        WHERE  c1.parent > 0;
        INSERT INTO commercial_partner_category_hierarchy
        SELECT * FROM commercial_partner_category_temp_1
        WHERE commercial_partner_category_temp_1.parent > 0;
    DROP TEMPORARY TABLE IF EXISTS `commercial_partner_category_temp_1`;
    DROP TEMPORARY TABLE IF EXISTS `commercial_partner_category_temp_2`;
    DROP TEMPORARY TABLE IF EXISTS `commercial_partner_category_user_type`;
    CREATE TEMPORARY TABLE `commercial_partner_category_user_type` AS select `cgt`.`Id` As `type`, `ch`.`Id` AS `category`,`umg`.`user` AS `user`,`sale_shipping_consult`,`sale_shipping_save`,`sale_shipping_validate` ,`sale_credit_invoice_consult`,`sale_credit_invoice_save`,`sale_credit_invoice_validate`,`purchase_shipping_consult`,`purchase_shipping_save`,`purchase_shipping_validate`, `purchase_credit_invoice_consult`,`purchase_credit_invoice_save`,`purchase_credit_invoice_validate`,`sale_quotation_consult`,`sale_quotation_save`,`sale_quotation_validate` ,`sale_order_consult`,`sale_order_save`,`sale_order_validate`,`purchase_quotation_consult`,`purchase_quotation_save`,`purchase_quotation_validate`, `purchase_order_consult`,`purchase_order_save`,`purchase_order_validate`,`crm_opportunity_consult`,`crm_opportunity_save`,`crm_opportunity_validate`,`purchase_invoice_consult`,`purchase_invoice_save`,`purchase_invoice_validate`,`sale_invoice_consult`,`sale_invoice_save`,`sale_invoice_validate`,`need_expression_consult`,`need_expression_save`,`need_expression_validate`
  from (((((`commercial_partner_category_hierarchy` `ch` left join
  `commercial_partner_category_group` `cg` on((`cg`.`category` = `ch`.`parent`))) left join
   `commercial_partner_category` `c` on((`c`.`Id` = `ch`.`Id`))) left join
   `atooerp_group` `ag` on((`ag`.`Id` = `cg`.`group`))) left join
    `atooerp_user_module_group` `umg` on((`umg`.`group` = `ag`.`Id`))) left join
    `commercial_partner_category_group_type` `cgt` on((`cgt`.`Id` = `cg`.`type`)))
     where ((`cg`.`enabled` = 1) and (`cg`.`begin_date` <= now()) and (`cg`.`end_date` >= now()));
    ALTER TABLE `commercial_partner_category_user_type` ADD INDEX idx_user (`user`);
    ALTER TABLE `commercial_partner_category_user_type` ADD INDEX idx_category (`category`);
    END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_init_due_date` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_init_due_date`()
BEGIN
update purchase_order set due_date=(case payment_condition
when 2 then (`date` + interval 15 day)
when 3 then last_day((`date` + interval 30 day))
when 4 then (`date` + interval 30 day)
when 5 then last_day(`date`)
when 6 then coalesce((select `x`.`date` AS `date` from `purchase_order` `x` where
((`x`.`Id` = (`purchase_order`.`Id` + 1)) and (`x`.`validated` = 1))),(`purchase_order`.`date` + interval 90 day))
else `date` end)
where due_date is not null;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_insert_product_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_insert_product_stock`(IdProduct int, Idwarehouse int)
BEGIN
declare quantity decimal;
SELECT        Id, piece_line, piece_type, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse
FROM            commercial_product_stock
WHERE        (product = IdProduct) AND (warehouse = Idwarehouse) AND (Id =
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (product = IdProduct) AND (warehouse = Idwarehouse)));
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_inventoryValidate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_inventoryValidate`(IdInventory INT)
BEGIN
    -- Update inventory lines with current stock information and pricing data
    UPDATE commercial_inventory i 
    JOIN commercial_inventory_line line ON i.Id = line.inventory
    JOIN commercial_product_stock_warehouse psw ON psw.product = line.product AND psw.warehouse = i.warehouse
    LEFT OUTER JOIN commercial_batch_warehouse bsw ON bsw.batch = line.batch AND bsw.warehouse = i.warehouse
    JOIN commercial_product ON commercial_product.Id = line.product 
    SET 
        theorical_real_stock = COALESCE(bsw.quantity, psw.actual_stock, 0),
        price = IF(psw.cump > 0, psw.cump, price_purchase),
        line.average_cost = psw.average_cost,
        line.last_price_cost = psw.last_price_cost,
        line.standard_cost = psw.standard_cost,
        line.by_batch_cost = psw.by_batch_cost,
        line.batch_average_cost = COALESCE(bsw.average_cost, 0),
        line.batch_last_price_cost = COALESCE(bsw.last_price_cost, 0),
        line.batch_standard_cost = COALESCE(bsw.standard_cost, 0),
        line.batch_first_price_cost = COALESCE(bsw.first_price_cost, 0)
    WHERE i.Id = IdInventory;

    -- Calculate and update stock value and gap value in the inventory header
    UPDATE commercial_inventory ci 
    JOIN (
        SELECT 
            SUM(real_stock * price) AS stockValue,
            SUM((real_stock - theorical_real_stock) * price) AS gapValue
        FROM commercial_inventory_line
        WHERE inventory = IdInventory
    ) s ON ci.Id = IdInventory
    SET 
        ci.stock_value = s.stockValue,
        ci.gap_value = s.gapValue;

    -- Insert product stock records based on the inventory
    INSERT INTO commercial_product_stock (
        piece_line, piece_type, quantity, actual_stock, theoretical_stock, 
        product, `date`, piece, `action`, warehouse, cump, average_cost, last_price_cost, standard_cost, by_batch_cost
    )
    SELECT 
        commercial_inventory_line.Id, 'Inventory', 
        SUM(real_stock), 
        SUM(real_stock), 
        SUM(real_stock + 
            (SELECT COALESCE(SUM(quantity), 0) 
             FROM purchase_order_line 
             LEFT OUTER JOIN purchase_order ON piece = purchase_order.Id AND delivred = 0 AND validated = 1 
             WHERE delivred = 0 AND validated = 1 AND purchase_order_line.product = commercial_inventory_line.product) - 
            (SELECT COALESCE(SUM(quantity), 0) 
             FROM sale_order_line 
             LEFT OUTER JOIN sale_order ON piece = sale_order.Id AND delivred = 0 AND validated = 1 
             WHERE delivred = 0 AND validated = 1 AND sale_order_line.product = commercial_inventory_line.product)
        ), 
        commercial_inventory_line.product, 
        NOW(), 
        IdInventory, 
        'insert', 
        warehouse, 
        price,
        commercial_inventory_line.average_cost,
        commercial_inventory_line.last_price_cost,
        commercial_inventory_line.standard_cost,
        commercial_inventory_line.by_batch_cost

    FROM commercial_inventory 
    JOIN commercial_inventory_line ON inventory = commercial_inventory.Id
    WHERE inventory = IdInventory
    GROUP BY commercial_inventory_line.product;

    -- Insert batch stock log records for inventory items with batches
    INSERT INTO commercial_batch_stock_log (
        date, cump, batch, warehouse, product, piece_type, piece_line, 
        quantity, stock, piece_id, `action`, average_cost, 
        first_price_cost, last_price_cost, standard_cost
    )
    SELECT 
        NOW(), 
        commercial_inventory_line.price, 
        commercial_inventory_line.batch, 
        commercial_inventory.warehouse, 
        commercial_inventory_line.product, 
        'Inventory', 
        commercial_inventory_line.Id, 
        commercial_inventory_line.real_stock, 
        commercial_inventory_line.real_stock, 
        IdInventory, 
        'insert', 
        batch_average_cost, 
        batch_first_price_cost, 
        batch_last_price_cost, 
        batch_standard_cost
    FROM commercial_inventory 
    JOIN commercial_inventory_line ON inventory = commercial_inventory.Id
    WHERE inventory = IdInventory 
    AND commercial_inventory_line.batch IS NOT NULL;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_productUpdateStockAndCost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_productUpdateStockAndCost`(p_product int)
BEGIN
if((select `type` from commercial_product where Id = p_product) = 3) then
  update commercial_product
  set cost = (select max(cump) from commercial_product_stock_warehouse WHERE product = p_product)
  WHERE Id = p_product ;
else
  update commercial_product
  set stock = (select sum(actual_stock) from commercial_product_stock_warehouse WHERE product = p_product),
  cost = (select coalesce(sum(cump * GREATEST(0,actual_stock)) / sum(GREATEST(0,actual_stock)), max(cump)) from commercial_product_stock_warehouse WHERE product = p_product)
  WHERE Id = p_product;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_update_batch_standard_cost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_update_batch_standard_cost`(
    p_batch INT, 
    p_standard_cost DECIMAL(15,5)
)
BEGIN
    -- Declare variables
    DECLARE v_standard_cost DECIMAL(15,5);
    DECLARE v_cump DECIMAL(15,5);
    DECLARE v_product INT;
    DECLARE v_warehouse INT;
    DECLARE v_quantity DECIMAL(15,5);
    DECLARE v_average_cost DECIMAL(15,5);
    DECLARE v_first_price_cost DECIMAL(15,5);
    DECLARE v_last_price_cost DECIMAL(15,5);
    DECLARE done BOOLEAN DEFAULT FALSE;
    
    -- Cursor definition
    DECLARE batch_warehouse_cursor CURSOR FOR
        SELECT cbw.cump, cbw.product, cbw.warehouse, cbw.quantity, 
               cbw.average_cost, cbw.first_price_cost, cbw.last_price_cost, cbw.standard_cost
        FROM commercial_batch_warehouse cbw
        WHERE cbw.batch = p_batch;
    
    -- Handler for cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    -- Get current standard cost
    SELECT standard_cost
    INTO v_standard_cost
    FROM commercial_batch
    WHERE Id = p_batch;
    
    -- Only proceed if standard cost has changed
    IF (v_standard_cost <> p_standard_cost) THEN

        UPDATE commercial_batch
        SET standard_cost = p_standard_cost
        WHERE Id = p_batch;
        -- Open cursor and process each warehouse record
        OPEN batch_warehouse_cursor;
        
        cursor_loop: LOOP
            FETCH batch_warehouse_cursor INTO
                v_cump, v_product, v_warehouse, v_quantity, 
                v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost;
                
            -- Exit loop if no more records
            IF done THEN
                LEAVE cursor_loop;
            END IF;
            
            INSERT INTO commercial_batch_stock_log (
                date, cump, batch, warehouse, product,
                piece_type, piece_line, quantity, stock, piece_id, 
                `action`, average_cost, first_price_cost, last_price_cost, standard_cost
            )
            VALUES (
                NOW(), v_cump, p_batch,
                v_warehouse, v_product, '',
                0, 0, v_quantity, 0, 'update_standard_cost', 
                v_average_cost, v_first_price_cost, v_last_price_cost, p_standard_cost
            );
            
        END LOOP cursor_loop;
        
        CLOSE batch_warehouse_cursor;

    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_update_batch_type_cost_method` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_update_batch_type_cost_method`(
    p_batch_type INT, 
    p_cost_method INT
)
BEGIN
    -- Declare variables
    DECLARE v_standard_cost DECIMAL(15,5);
    DECLARE v_cump DECIMAL(15,5);
    DECLARE v_product INT;
    DECLARE v_cost_method INT;
    DECLARE v_warehouse INT;
    DECLARE v_quantity DECIMAL(15,5);
    DECLARE v_average_cost DECIMAL(15,5);
    DECLARE v_first_price_cost DECIMAL(15,5);
    DECLARE v_last_price_cost DECIMAL(15,5);
    DECLARE v_batch INT; -- Added batch variable
    DECLARE done BOOLEAN DEFAULT FALSE;
    
    -- Cursor definition
    DECLARE batch_warehouse_cursor CURSOR FOR
        SELECT cbw.cump, cbw.product, cbw.warehouse, cbw.quantity, 
               cbw.average_cost, cbw.first_price_cost, cbw.last_price_cost, cbw.standard_cost, 
               cbw.batch -- Added batch to the selection
        FROM commercial_batch_warehouse cbw LEFT OUTER JOIN 
        commercial_batch cb ON cb.Id = cbw.batch LEFT OUTER JOIN 
        commercial_batch_type ON commercial_batch_type.Id = cb.batch_type
        WHERE commercial_batch_type.Id = p_batch_type;
    
    -- Handler for cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    -- Get current cost_method
    SELECT cost_method
    INTO v_cost_method
    FROM commercial_batch_type
    WHERE Id = p_batch_type;
    
    -- Only proceed if standard cost has changed
    IF (v_cost_method <> p_cost_method) THEN

        UPDATE commercial_batch_type
        SET cost_method = p_cost_method
        WHERE Id = p_batch_type;

        UPDATE commercial_batch
        SET cost_method = p_cost_method
        WHERE batch_type = p_batch_type;
        -- Open cursor and process each warehouse record
        OPEN batch_warehouse_cursor;
        
        cursor_loop: LOOP
            FETCH batch_warehouse_cursor INTO
                v_cump, v_product, v_warehouse, v_quantity, 
                v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, 
                v_batch; -- Added batch to the fetch
                
            -- Exit loop if no more records
            IF done THEN
                LEAVE cursor_loop;
            END IF;
            
            INSERT INTO commercial_batch_stock_log (
                date, cump, batch, warehouse, product,
                piece_type, piece_line, quantity, stock, piece_id, 
                `action`, average_cost, first_price_cost, last_price_cost, standard_cost
            )
            VALUES (
                NOW(), v_cump, v_batch, -- Using v_batch instead of p_batch
                v_warehouse, v_product, '',
                0, 0, v_quantity, 0, 'update_cost_method', 
                v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost
            );
            
        END LOOP cursor_loop;
        
        CLOSE batch_warehouse_cursor;

    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_update_product_cost_method` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_update_product_cost_method`(
    p_product INT, 
    p_cost_method INT
)
BEGIN
    -- Declare variables
    DECLARE v_cost_method DECIMAL(15,5) DEFAULT 0;
    DECLARE done INT DEFAULT FALSE;
    DECLARE done_holder INT DEFAULT FALSE;
    
    -- Cursor variables
    DECLARE c_psw_warehouse INT;
    DECLARE c_psw_actual_stock DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_theoretical_stock DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_standard_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_average_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_last_price_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_by_batch_cost DECIMAL(15,5) DEFAULT 0;
    
    -- Define cursor for product stock warehouse data
    DECLARE c_psw CURSOR FOR
        SELECT 
            cpsw.warehouse, 
            cpsw.actual_stock, 
            cpsw.theoretical_stock, 
            cpsw.cump, 
            cpsw.standard_cost, 
            cpsw.average_cost, 
            cpsw.last_price_cost, 
            cpsw.by_batch_cost
        FROM commercial_product_stock_warehouse cpsw
        INNER JOIN commercial_product ON commercial_product.Id = cpsw.product
        WHERE cpsw.product = p_product;
    
    -- Declare continue handler for cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    -- Get current standard cost
    SELECT cost_method 
    INTO v_cost_method
    FROM commercial_product
    WHERE Id = p_product;
    
    -- Only proceed if standard cost has changed
    IF (v_cost_method <> p_cost_method) THEN

    
        UPDATE commercial_product
        SET cost_method = p_cost_method
        WHERE Id = p_product;
        -- Open cursor and process each warehouse record
        OPEN c_psw;
        
        cursor_loop: LOOP
            FETCH c_psw INTO 
                c_psw_warehouse, 
                c_psw_actual_stock, 
                c_psw_theoretical_stock, 
                c_psw_cost, 
                c_psw_standard_cost, 
                c_psw_average_cost, 
                c_psw_last_price_cost, 
                c_psw_by_batch_cost;
                
            -- Exit loop if no more records
            IF done THEN
                LEAVE cursor_loop;
            END IF;
            
            -- Insert record into stock history table
            INSERT INTO commercial_product_stock (
                piece_line, 
                piece_type, 
                quantity, 
                actual_stock, 
                theoretical_stock, 
                product, 
                `date`, 
                piece, 
                `action`, 
                warehouse, 
                cump, 
                standard_cost, 
                average_cost, 
                last_price_cost, 
                by_batch_cost
            ) VALUES (
                0, 
                NULL, 
                0, 
                c_psw_actual_stock, 
                c_psw_theoretical_stock, 
                p_product, 
                NOW(), 
                0, 
                'cost_method_update', 
                c_psw_warehouse, 
                c_psw_cost, 
                c_psw_standard_cost,
                c_psw_average_cost, 
                c_psw_last_price_cost, 
                c_psw_by_batch_cost
            );
            
        END LOOP cursor_loop;
        
        CLOSE c_psw;

        
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `commercial_update_product_standard_cost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `commercial_update_product_standard_cost`(p_product INT, p_standard_cost DECIMAL(15,5))
BEGIN
    -- Declare variables
    DECLARE v_standard_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE done INT DEFAULT FALSE;
    DECLARE done_holder INT DEFAULT FALSE;
    
    -- Cursor variables
    DECLARE c_psw_warehouse INT;
    DECLARE c_psw_actual_stock DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_theoretical_stock DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_standard_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_average_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_last_price_cost DECIMAL(15,5) DEFAULT 0;
    DECLARE c_psw_by_batch_cost DECIMAL(15,5) DEFAULT 0;
    
    -- Define cursor for product stock warehouse data
    DECLARE c_psw CURSOR FOR
        SELECT 
            cpsw.warehouse, 
            cpsw.actual_stock, 
            cpsw.theoretical_stock, 
            cpsw.cump, 
            cpsw.standard_cost, 
            cpsw.average_cost, 
            cpsw.last_price_cost, 
            cpsw.by_batch_cost
        FROM commercial_product_stock_warehouse cpsw
        INNER JOIN commercial_product ON commercial_product.Id = cpsw.product
        WHERE cpsw.product = p_product;
    
    -- Declare continue handler for cursor
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
    
    -- Get current standard cost
    SELECT standard_cost 
    INTO v_standard_cost
    FROM commercial_product
    WHERE Id = p_product;
    
    -- Only proceed if standard cost has changed
    IF (v_standard_cost <> p_standard_cost) THEN

    
        UPDATE commercial_product
        SET standard_cost = p_standard_cost
        WHERE Id = p_product;
        -- Open cursor and process each warehouse record
        OPEN c_psw;
        
        cursor_loop: LOOP
            FETCH c_psw INTO 
                c_psw_warehouse, 
                c_psw_actual_stock, 
                c_psw_theoretical_stock, 
                c_psw_cost, 
                c_psw_standard_cost, 
                c_psw_average_cost, 
                c_psw_last_price_cost, 
                c_psw_by_batch_cost;
                
            -- Exit loop if no more records
            IF done THEN
                LEAVE cursor_loop;
            END IF;
            
            -- Insert record into stock history table
            INSERT INTO commercial_product_stock (
                piece_line, 
                piece_type, 
                quantity, 
                actual_stock, 
                theoretical_stock, 
                product, 
                `date`, 
                piece, 
                `action`, 
                warehouse, 
                cump, 
                standard_cost, 
                average_cost, 
                last_price_cost, 
                by_batch_cost
            ) VALUES (
                0, 
                NULL, 
                0, 
                c_psw_actual_stock, 
                c_psw_theoretical_stock, 
                p_product, 
                NOW(), 
                0, 
                'standard_cost_update', 
                c_psw_warehouse, 
                c_psw_cost, 
                p_standard_cost,  -- Use new standard cost here
                c_psw_average_cost, 
                c_psw_last_price_cost, 
                c_psw_by_batch_cost
            );
            
        END LOOP cursor_loop;
        
        CLOSE c_psw;

        
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `delete_commercial_product_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `delete_commercial_product_stock`(f_IdPiece int, f_piece_type varchar(255))
BEGIN
declare  done int default 0;
declare  p_Id int default 0;
declare  done_holder int;
declare  p_piece_line int default 0;
declare  p_piece_type varchar(255);
declare  p_quantity decimal(15,5) default 0;
declare  p_actual_stock decimal(15,5) default 0;
declare  p_theoretical_stock decimal(15,5) default 0;
declare  p_product int default 0;
declare  p_date date;
declare  p_piece int default 0;
declare  p_warehouse int default 0;
declare  p_action varchar(255);
declare s_commercial_product_stock cursor for
SELECT        Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse, `action`
FROM                        commercial_product_stock
WHERE(piece = f_IdPiece) and (piece_type = f_piece_type);
declare continue handler for sqlstate '02000' set done=1;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into p_Id, p_piece_line, p_piece_type, p_quantity, p_actual_stock, p_theoretical_stock, p_product, p_date, p_piece, p_warehouse, p_action;
if not done then
set done_holder=done;
if (p_action<>'correction' and p_action<>'delete') then
call update_product_stock_on_delete(p_piece_line , p_piece_type, p_product, p_quantity, p_piece, p_warehouse);
end if;
delete from commercial_product_stock where Id=p_Id ;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeNullifiedEmpty` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `DeNullifiedEmpty`()
BEGIN
UPDATE agriculture_operation_data
SET          count_empty = 0
WHERE  (count_empty IS NULL);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeNullifiedMachine` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `DeNullifiedMachine`()
BEGIN
UPDATE agriculture_operation_data
SET          count_machine = 0
WHERE  (count_machine IS NULL);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `DeNullifiedVehicle` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `DeNullifiedVehicle`()
BEGIN
UPDATE agriculture_operation_data
SET          count_vehicle = 0
WHERE  (count_vehicle IS NULL);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `detectsInfiniteLoop_atooerp_activity_next` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `detectsInfiniteLoop_atooerp_activity_next`(p_type int , p_next int, out p_res bool)
BEGIN
declare d_next int default 0;
declare d_res bool default false;
declare done int default 0;
declare done_holder int;
declare c cursor for
select next_activity_type from atooerp_activity_next
where activity_type =p_next;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set p_res=false;
open c;
repeat
fetch c into d_next;
if not done then
set done_holder=done;
if(d_next=p_type) then
set p_res=true;
else
call detectsInfiniteLoop_atooerp_activity_next(p_type, d_next, p_res);
end if;
set done=done_holder;
end if;
until done OR p_res end repeat;
close c;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `detectsInfiniteLoop_production_composition` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `detectsInfiniteLoop_production_composition`(p_Id int , p_child int, out p_res bool)
BEGIN
declare d_child int default 0;
declare d_res bool default false;
declare done int default 0;
declare done_holder int;
declare c cursor for
select production_compsition.component from production_compsition
where production_compsition.composite=p_child;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set p_res=false;
open c;
repeat
fetch c into d_child;
if not done then
set done_holder=done;
if(d_child=p_Id) then
set p_res=true;
else
call detectsInfiniteLoop_production_composition(p_Id, d_child, p_res);
end if;
set done=done_holder;
end if;
until done end repeat;
close c;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `FullOperationData` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `FullOperationData`()
BEGIN
declare id_operation INT;
declare code_operation varchar(45);
declare type_operation varchar(45);
declare num_empty numeric;
declare num_machine numeric;
declare num_vehicle numeric;
declare num_stock_in numeric;
declare num_stock_out numeric;
declare count_empty numeric;
declare count_machine numeric;
declare count_vehicle numeric;
declare exploitation varchar (45);
declare l_done int default 0;
declare id_data INT;
declare id_curs cursor for
SELECT Id FROM agriculture_operation a;
declare continue handler for not found set l_done=1;
set id_data:=0;
open id_curs;
delete from `agriculture_operation_data`;
id_loop:LOOP
fetch id_curs into id_operation;
if l_done=1 then
leave id_loop;
end if;
set id_data:=id_data+1;
set code_operation:=(SELECT GetDescription(id_operation));
set type_operation:=(SELECT GetTypeOperation(id_operation));
set num_empty:=(SELECT CalculNbreEmployee(id_operation));
set num_machine:=(SELECT CalculNbreMachine(id_operation));
set num_vehicle:=(SELECT CalculNbreVehicule(id_operation));
set num_stock_in:=(SELECT CalculNbreStockIn(id_operation));
set num_stock_out:=(SELECT CalculNbreStockOut(id_operation));
set count_empty:=(SELECT CalculCoutEmployee(id_operation));
set count_machine:=(SELECT CalculCoutMachine(id_operation));
set count_vehicle:=(SELECT CalculCoutVehicule(id_operation));
set exploitation:=(SELECT GetExploitationName(id_operation));
INSERT INTO `agriculture_operation_data` (`Id`, `code_operation`, `type_operation`, `num_empty`, `num_machine`, `num_vehicle`, `num_stock_in`, `num_stock_out`, `count_empty`, `count_machine`, `count_vehicle`,`exploitation`)
VALUES (id_data, code_operation, type_operation, num_empty, num_machine, num_vehicle, num_stock_in, num_stock_out, count_empty, count_machine, count_vehicle, exploitation);
end loop;
close id_curs;
CALL DeNullifiedEmpty();
CALL DeNullifiedMachine();
CALL DeNullifiedVehicle();
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetOrderLinesWithMaterials` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `GetOrderLinesWithMaterials`(
    IN SaleOrderList VARCHAR(255), 
    IN NeedExpressionList VARCHAR(255)
)
BEGIN
  -- All DECLARES must come first
  DECLARE done INT DEFAULT 0;
  DECLARE v_PieceId, v_PieceLineId, v_ProductId INT;
  DECLARE v_Quantity DECIMAL(15,5);
  DECLARE v_PieceType VARCHAR(255);
  DECLARE v_DueDate DATETIME;
  DECLARE row_count INT;
  DECLARE v_index INT;
  DECLARE v_parent_index INT;

  -- Cursor declaration must come before handlers
  DECLARE cur CURSOR FOR
  SELECT PieceId, PieceLineId, ProductId, Quantity, PieceType, DueDate
  FROM (
    SELECT 
      so.Id AS PieceId,
      sol.Id AS PieceLineId,
      sol.product AS ProductId,
      sol.quantity AS Quantity,
      'Sale.Order' AS PieceType,
      so.due_date AS DueDate
    FROM sale_order so
    LEFT JOIN sale_order_line sol ON so.Id = sol.piece
    WHERE so.validated = 1 AND so.delivred = 0 AND FIND_IN_SET(so.Id , SaleOrderList)
    UNION
    SELECT 
      ne.Id AS PieceId,
      nel.Id AS PieceLineId,
      nel.product AS ProductId,
      nel.quantity AS Quantity,
      'Commercial.Need_expression' AS PieceType,
      ne.deadline_date AS DueDate
    FROM commercial_need_expression ne
    LEFT JOIN commercial_need_expression_line nel ON ne.Id = nel.piece
    WHERE ne.validated = 1 AND FIND_IN_SET(ne.Id , NeedExpressionList)
  ) AS PieceLineData;

  DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

  -- Now create temporary tables after declarations
  CREATE TEMPORARY TABLE IF NOT EXISTS temp_raw_materials_output (
    raw_material_id INT,
    total_quantity_required DECIMAL(15,5)
  ) ENGINE=Memory;

  CREATE TEMPORARY TABLE IF NOT EXISTS final_output (
    `INDEX` INT,
    Parent INT,
    PieceId INT,
    PieceLineId INT,
    ProductId INT,
    Quantity DECIMAL(15,5),
    PieceType VARCHAR(255),
    DueDate DATETIME
  ) ENGINE=Memory;
  
  SET v_index = 0;

  OPEN cur;

  read_loop: LOOP
    FETCH cur INTO v_PieceId, v_PieceLineId, v_ProductId, v_Quantity, v_PieceType, v_DueDate;
    IF done THEN
      LEAVE read_loop;
    END IF;

    -- Reset temp table
    TRUNCATE TABLE temp_raw_materials_output;

    -- Get materials for current product
    CALL GetRawMaterials(v_ProductId, v_Quantity);
    
    -- Increment index for parent row
    SET v_index = v_index + 1;
    SET v_parent_index = v_index;
    
    -- Insert base line with parent index
    INSERT INTO final_output VALUES (
      v_parent_index, NULL, v_PieceId, v_PieceLineId, v_ProductId, v_Quantity,
      v_PieceType, v_DueDate
    );
      
    -- Insert all material components with incrementing index values
    INSERT INTO final_output
    SELECT 
      (@row_number := @row_number + 1) AS `INDEX`,
      v_parent_index, 
      v_PieceId, 
      v_PieceLineId, 
      raw_material_id, 
      total_quantity_required,
      v_PieceType, 
      v_DueDate
    FROM temp_raw_materials_output, (SELECT @row_number := v_index) AS t;
    
    -- Update v_index to the last used index value
    SELECT MAX(`INDEX`) INTO v_index FROM final_output;
  END LOOP;

  CLOSE cur;

  -- Return final results
  SELECT final_output.*,cp.name AS ProductName,commercial_unite.name AS UnitName, cp.time_delivery AS SupplierLeadTime, cp.time_production AS ProductionLeadTime, cp.time_delivery + cp.time_production AS TotalLeadTime, cp.batch_units AS UnitPerBatch FROM final_output JOIN
  commercial_product cp ON cp.Id =  ProductId JOIN
  commercial_unite ON commercial_unite.Id = cp.unite;

  -- Cleanup
  DROP TEMPORARY TABLE IF EXISTS temp_raw_materials_output;
  DROP TEMPORARY TABLE IF EXISTS final_output;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `GetRawMaterials` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `GetRawMaterials`(
  IN product_id INT,
  IN required_quantity DECIMAL(15,5)
)
BEGIN
  DECLARE rows_affected INT DEFAULT 1;

  -- Temporary tables for BOM processing
  CREATE TEMPORARY TABLE IF NOT EXISTS temp_bom (
    component INT,
    quantity DECIMAL(15,5)
  ) ENGINE=Memory;

  CREATE TEMPORARY TABLE IF NOT EXISTS temp_composites (
    component INT,
    quantity DECIMAL(15,5)
  ) ENGINE=Memory;

  CREATE TEMPORARY TABLE IF NOT EXISTS temp_raw_materials_output (
    raw_material_id INT,
    total_quantity_required DECIMAL(15,5)
  ) ENGINE=Memory;

  TRUNCATE TABLE temp_bom;
  TRUNCATE TABLE temp_composites;

  -- Initial components
  INSERT INTO temp_bom
  SELECT component, quantity * required_quantity
  FROM production_compsition
  WHERE composite = product_id;

  -- Expand composites
  WHILE rows_affected > 0 DO
    INSERT INTO temp_composites
    SELECT component, quantity
    FROM temp_bom
    WHERE component IN (SELECT composite FROM production_compsition);

    DELETE FROM temp_bom
    WHERE component IN (SELECT component FROM temp_composites);

    INSERT INTO temp_bom
    SELECT pc.component, tc.quantity * pc.quantity
    FROM temp_composites tc
    JOIN production_compsition pc ON tc.component = pc.composite;

    SET rows_affected = ROW_COUNT();
    TRUNCATE TABLE temp_composites;
  END WHILE;

  -- Store results in output temp table
  INSERT INTO temp_raw_materials_output
  SELECT 
    component AS raw_material_id,
    SUM(quantity) AS total_quantity_required
  FROM temp_bom
  GROUP BY component;
  -- Cleanup
  DROP TEMPORARY TABLE IF EXISTS temp_bom;
  DROP TEMPORARY TABLE IF EXISTS temp_composites;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `get_all_stock_by_warehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `get_all_stock_by_warehouse`(p_product int, p_warehouse int,
OUT p_actual_stock decimal(15,3), OUT p_th_stock decimal(15,3), OUT p_cump decimal(15,3))
BEGIN
SELECT        COALESCE(actual_stock,0), COALESCE(theoretical_stock,0), COALESCE(cump,0)
into p_actual_stock, p_th_stock, p_cump
FROM            commercial_product_stock_warehouse
WHERE        (product = p_product) and (warehouse=p_warehouse)
Limit 1;
SET p_actual_stock=COALESCE(p_actual_stock,0);
SET p_th_stock=COALESCE(p_th_stock,0);
set p_cump= COALESCE(p_cump,0);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `init_commercial_product_stock_warehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `init_commercial_product_stock_warehouse`()
BEGIN
declare done_holder int;
declare done int default 0;
declare p_warehouse int default 0;
declare p_product int default 0;
declare p_product_stock int default 0;
declare p_actual_stock decimal default 0;
declare p_th_stock decimal default 0;
declare c_commercial_product_stock_warehouse cursor for
SELECT        product, warehouse
FROM            commercial_product_stock_warehouse;
declare continue handler for sqlstate '02000' set done=1;
delete from commercial_product_stock_warehouse;
insert into commercial_product_stock_warehouse (actual_stock, theoretical_stock, product, product_stock, warehouse)
(select 0, 0, Id, 0, IdWarehouse
from (select commercial_warehouse1.*, commercial_product.Id, commercial_product.`type`  from
(select 0 as IdWarehouse, 'Depot central' as name
union
select Id as IdWarehouse, name from commercial_warehouse ) commercial_warehouse1 inner join
commercial_product) list_all
where list_all.`type`<>3);
set done=0;
open c_commercial_product_stock_warehouse;
repeat
fetch c_commercial_product_stock_warehouse into p_product, p_warehouse;
if not done then
set done_holder=done;
set p_product_stock=0; set p_actual_stock=0; set p_th_stock=0;
SELECT       Id, COALESCE(actual_stock,0), COALESCE(theoretical_stock,0)
into p_product_stock, p_actual_stock, p_th_stock
FROM            commercial_product_stock
WHERE        (commercial_product_stock.product = p_product) and (commercial_product_stock.warehouse=p_warehouse)
order by Id desc
limit 1;
update commercial_product_stock_warehouse set actual_stock=p_actual_stock,
theoretical_stock=p_th_stock, product_stock=p_product_stock
where warehouse=p_warehouse and product=p_product;
set done=done_holder;
end if;
until done end repeat;
close c_commercial_product_stock_warehouse;
SET done=0;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_batch_product_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_batch_product_stock`(
    IN p_range INT,
    IN p_piece_type VARCHAR(255),
    IN p_product INT,
    IN p_quantity DECIMAL(15,5),
    IN p_piece INT,
    IN p_warehouse INT,
    IN p_action VARCHAR(255)
)
BEGIN
    DECLARE v_batch_id INT;
    DECLARE v_available_qty DECIMAL(15,5);
    DECLARE v_deduct_qty DECIMAL(15,5);
    DECLARE v_remaining DECIMAL(15,5);
    DECLARE v_component_id INT;
    DECLARE v_component_ratio DECIMAL(15,5);
    DECLARE v_is_composite BOOLEAN;
    DECLARE v_cump, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost DECIMAL(15,5);
    DECLARE v_current_stock DECIMAL(15,5);
    DECLARE done INT DEFAULT 0;
    DECLARE v_auto_deep_composition TINYINT(1);
    DECLARE v_has_batch_lines BOOLEAN DEFAULT FALSE;
    DECLARE v_retrieval_method INT;
    DECLARE v_index INT;
    -- Cursors
    DECLARE batch_warehouse_cursor CURSOR FOR 
    SELECT COALESCE(cbw.cump, 0), COALESCE(cbw.quantity, 0), COALESCE(average_cost, 0), COALESCE(first_price_cost, 0), COALESCE(last_price_cost, 0), COALESCE(standard_cost, 0), COALESCE(production_cost, 0)
    FROM (SELECT 1 as dummy) d
    LEFT JOIN commercial_batch_warehouse cbw ON
        cbw.batch = v_batch_id 
        AND cbw.product = p_product 
        AND cbw.warehouse = p_warehouse;
    
    -- Define cursors for different strategies
    -- FIFO cursor (oldest batch first)
DECLARE fifo_cursor CURSOR FOR 
    SELECT numbered_results.*
    FROM (
        SELECT 
            (@row_number:=@row_number + 1) AS `index`,
            batch, 
            quantity 
        FROM commercial_batch_warehouse,
            (SELECT @row_number:=0) r
        WHERE product = p_product
        AND warehouse = p_warehouse 
        ORDER BY batch DESC
    ) AS numbered_results
    CROSS JOIN (
        SELECT COUNT(*) AS has_positive
        FROM commercial_batch_warehouse
        WHERE product = p_product
        AND warehouse = p_warehouse
        AND quantity > 0
    ) AS check_positive
    WHERE (check_positive.has_positive > 0 AND numbered_results.quantity > 0)
       OR (check_positive.has_positive = 0 AND numbered_results.`index` = 1);

-- LIFO cursor (newest batch first)
DECLARE lifo_cursor CURSOR FOR 
    SELECT lifo_results.*
    FROM (
        SELECT 
            (@row_number:=@row_number + 1) AS `index`,
            batch, 
            quantity 
        FROM commercial_batch_warehouse,
            (SELECT @row_number:=0) r
        WHERE product = p_product
        AND warehouse = p_warehouse 
        ORDER BY batch ASC
    ) AS lifo_results
    CROSS JOIN (
        SELECT COUNT(*) AS has_positive
        FROM commercial_batch_warehouse
        WHERE product = p_product
        AND warehouse = p_warehouse
        AND quantity > 0
    ) AS check_positive
    WHERE (check_positive.has_positive > 0 AND lifo_results.quantity > 0)
       OR (check_positive.has_positive = 0 AND lifo_results.`index` = 1);

-- FEFO cursor (earliest expiration first)
DECLARE fefo_cursor CURSOR FOR 
    SELECT fefo_results.*
    FROM (
        SELECT 
            (@row_number:=@row_number + 1) AS `index`,
            cbw.batch, 
            cbw.quantity 
        FROM commercial_batch_warehouse cbw
        INNER JOIN commercial_batch cb ON cb.Id = cbw.batch,
            (SELECT @row_number:=0) r
        WHERE cbw.product = p_product 
        AND cbw.warehouse = p_warehouse 
        ORDER BY cb.expiration_date ASC, cb.Id ASC
    ) AS fefo_results
    CROSS JOIN (
        SELECT COUNT(*) AS has_positive
        FROM commercial_batch_warehouse
        WHERE product = p_product
        AND warehouse = p_warehouse
        AND quantity > 0
    ) AS check_positive
    WHERE (check_positive.has_positive > 0 AND fefo_results.quantity > 0)
       OR (check_positive.has_positive = 0 AND fefo_results.`index` = 1);

-- Least Packages cursor (smallest quantities first)
DECLARE packages_cursor CURSOR FOR 
    SELECT packages_results.*
    FROM (
        SELECT 
            (@row_number:=@row_number + 1) AS `index`,
            batch, 
            quantity 
        FROM commercial_batch_warehouse,
            (SELECT @row_number:=0) r
        WHERE product = p_product
        AND warehouse = p_warehouse 
        ORDER BY quantity ASC, batch ASC
    ) AS packages_results
    CROSS JOIN (
        SELECT COUNT(*) AS has_positive
        FROM commercial_batch_warehouse
        WHERE product = p_product
        AND warehouse = p_warehouse
        AND quantity > 0
    ) AS check_positive
    WHERE (check_positive.has_positive > 0 AND packages_results.quantity > 0)
       OR (check_positive.has_positive = 0 AND packages_results.`index` = 1);
    DECLARE batch_cursor CURSOR FOR 
        SELECT batch, quantity 
        FROM commercial_batch_piece 
        WHERE product = p_product AND
            (
                (p_piece_type LIKE '%Purchase.Shipping%' AND purchase_shipping = p_piece AND purchase_shipping_line = p_range) OR
                (p_piece_type LIKE '%Sale.Shipping_return%' AND sale_shipping_return = p_piece AND sale_shipping_return_line = p_range) OR
                (p_piece_type LIKE '%Commercial.Stock_entry%' AND stock_entry = p_piece AND stock_entry_line = p_range) OR
                (p_piece_type LIKE '%Commercial.Stock_out%' AND stock_out = p_piece AND stock_out_line = p_range) OR
                (p_piece_type LIKE '%Commercial.Stock_mouvement%' AND stock_mouvement = p_piece AND stock_mouvement_line = p_range) OR
                (p_piece_type LIKE '%Purchase.Shipping_return%' AND purchase_shipping_return = p_piece AND purchase_shipping_return_line = p_range) OR
                (p_piece_type LIKE '%Sale.Shipping%' AND sale_shipping = p_piece AND sale_shipping_line = p_range)
            );

    DECLARE component_cursor CURSOR FOR 
        SELECT component, quantity 
        FROM production_compsition 
        WHERE composite = p_product;

    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;
    SET SESSION max_sp_recursion_depth=255;
    -- Check if batch managed
    SELECT EXISTS(SELECT 1 FROM commercial_product WHERE Id = p_product AND batch_type IS NOT NULL)
    INTO @is_batch_product;
    IF @is_batch_product THEN
        SELECT auto_deep_composition
        INTO v_auto_deep_composition
        FROM commercial_product_stock_warehouse
        WHERE (product = p_product) AND (warehouse = p_warehouse)
        LIMIT 1;

        IF p_quantity > 0 THEN -- Stock increase
            -- Process each batch separately using cursor
            OPEN batch_cursor;
            batch_increase_loop: LOOP
                FETCH batch_cursor INTO v_batch_id, v_deduct_qty;
                IF done THEN LEAVE batch_increase_loop; END IF;
                
                -- Reset done flag for inner cursor
                SET done = 0;
                
                -- Get current stock and CUMP using cursor
                SET v_cump = 0;
                SET v_current_stock = 0;
                
                OPEN batch_warehouse_cursor;
                FETCH batch_warehouse_cursor INTO v_cump, v_current_stock, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                CLOSE batch_warehouse_cursor;
                
                -- Insert stock log
                INSERT INTO commercial_batch_stock_log (
                    date, cump, batch, warehouse, product, 
                    piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost, production_cost
                )
                VALUES (
                    NOW(), COALESCE(v_cump, 0), v_batch_id, 
                    p_warehouse, p_product, p_piece_type, 
                    p_range, v_deduct_qty, 
                    v_current_stock + v_deduct_qty, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                );
            END LOOP;
            CLOSE batch_cursor;

        ELSE
            SET v_remaining = ABS(p_quantity);
            SET done = 0;

            -- Process specified batches first
            OPEN batch_cursor;
            batch_loop: LOOP
                FETCH batch_cursor INTO v_batch_id, v_deduct_qty;
                IF done THEN LEAVE batch_loop; END IF;
                SET v_has_batch_lines = TRUE;
                -- Get current stock using cursor
                SET v_cump = 0;
                SET v_current_stock = 0;
                
                OPEN batch_warehouse_cursor;
                FETCH batch_warehouse_cursor INTO v_cump, v_available_qty, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                CLOSE batch_warehouse_cursor;

                SET v_deduct_qty = LEAST(v_available_qty, v_deduct_qty);

                INSERT INTO commercial_batch_stock_log (
                    date, cump, batch, warehouse, product, 
                    piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost, production_cost
                )
                VALUES (
                    NOW(), v_cump, v_batch_id, p_warehouse, 
                    p_product, p_piece_type, p_range, 
                    -v_deduct_qty, v_available_qty - v_deduct_qty, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                );

                SET v_remaining = v_remaining - v_deduct_qty;
                IF v_remaining <= 0 THEN LEAVE batch_loop; END IF;
            END LOOP;
            CLOSE batch_cursor;
            
            SELECT COALESCE(retrieval_method, 1) INTO v_retrieval_method
            FROM commercial_batch_type LEFT OUTER JOIN 
            commercial_product ON commercial_product.batch_type = commercial_batch_type.Id 
            AND commercial_product.Id = p_product
            LIMIT 1;
            -- Handle remaining quantity based on retrieval method
            IF v_remaining > 0 AND v_has_batch_lines = FALSE THEN
                SET done = 0;
                CASE v_retrieval_method
                    WHEN 1 THEN -- FIFO
                        OPEN fifo_cursor;
                        retrieval_loop: LOOP
                            FETCH fifo_cursor INTO v_index, v_batch_id, v_available_qty;
                            IF done THEN 
                                CLOSE fifo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                            
                            -- Get current CUMP for the batch
                            SET v_cump = 0;
                            SET v_current_stock = 0;
                            
                            OPEN batch_warehouse_cursor;
                            FETCH batch_warehouse_cursor INTO v_cump, v_current_stock, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                            CLOSE batch_warehouse_cursor;
                            
                            -- Calculate deduction quantity
                            SET v_deduct_qty = LEAST(v_available_qty, v_remaining);
                            
                            -- Insert stock log
                            INSERT INTO commercial_batch_stock_log (
                                date, cump, batch, warehouse, product, 
                                piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost, production_cost
                            )
                            VALUES (
                                NOW(), v_cump, v_batch_id, p_warehouse, 
                                p_product, p_piece_type, p_range, 
                                -v_deduct_qty, v_available_qty - v_deduct_qty, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                            );
                            
                            -- Update remaining quantity
                            SET v_remaining = v_remaining - v_deduct_qty;
                            
                            IF v_remaining <= 0 THEN 
                                CLOSE fifo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                        END LOOP;

                    WHEN 2 THEN -- LIFO
                        OPEN lifo_cursor;
                        retrieval_loop: LOOP
                            FETCH lifo_cursor INTO v_index, v_batch_id, v_available_qty;
                            IF done THEN 
                                CLOSE lifo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                            
                            -- Get current CUMP for the batch
                            SET v_cump = 0;
                            SET v_current_stock = 0;
                            
                            OPEN batch_warehouse_cursor;
                            FETCH batch_warehouse_cursor INTO v_cump, v_current_stock, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                            CLOSE batch_warehouse_cursor;
                            
                            -- Calculate deduction quantity
                            SET v_deduct_qty = LEAST(v_available_qty, v_remaining);
                            
                            -- Insert stock log
                            INSERT INTO commercial_batch_stock_log (
                                date, cump, batch, warehouse, product, 
                                piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost,  production_cost
                            )
                            VALUES (
                                NOW(), v_cump, v_batch_id, p_warehouse, 
                                p_product, p_piece_type, p_range, 
                                -v_deduct_qty, v_available_qty - v_deduct_qty, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                            );
                            
                            -- Update remaining quantity
                            SET v_remaining = v_remaining - v_deduct_qty;
                            
                            IF v_remaining <= 0 THEN 
                                CLOSE lifo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                        END LOOP;

                    WHEN 3 THEN -- FEFO
                        OPEN fefo_cursor;
                        retrieval_loop: LOOP
                            FETCH fefo_cursor INTO v_index, v_batch_id, v_available_qty;
                            IF done THEN 
                                CLOSE fefo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                            
                            -- Get current CUMP for the batch
                            SET v_cump = 0;
                            SET v_current_stock = 0;
                            
                            OPEN batch_warehouse_cursor;
                            FETCH batch_warehouse_cursor INTO v_cump, v_current_stock, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                            CLOSE batch_warehouse_cursor;
                            
                            -- Calculate deduction quantity
                            SET v_deduct_qty = LEAST(v_available_qty, v_remaining);
                            
                            -- Insert stock log
                            INSERT INTO commercial_batch_stock_log (
                                date, cump, batch, warehouse, product, 
                                piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost, production_cost
                            )
                            VALUES (
                                NOW(), v_cump, v_batch_id, p_warehouse, 
                                p_product, p_piece_type, p_range, 
                                -v_deduct_qty, v_available_qty - v_deduct_qty, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                            );
                            
                            -- Update remaining quantity
                            SET v_remaining = v_remaining - v_deduct_qty;
                            
                            IF v_remaining <= 0 THEN 
                                CLOSE fefo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                        END LOOP;

                    WHEN 4 THEN -- Least Packages
                        OPEN packages_cursor;
                        retrieval_loop: LOOP
                            FETCH packages_cursor INTO v_index, v_batch_id, v_available_qty;
                            IF done THEN 
                                CLOSE packages_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                            
                            -- Get current CUMP for the batch
                            SET v_cump = 0;
                            SET v_current_stock = 0;
                            
                            OPEN batch_warehouse_cursor;
                            FETCH batch_warehouse_cursor INTO v_cump, v_current_stock, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                            CLOSE batch_warehouse_cursor;
                            
                            -- Calculate deduction quantity
                            SET v_deduct_qty = LEAST(v_available_qty, v_remaining);
                            
                            -- Insert stock log
                            INSERT INTO commercial_batch_stock_log (
                                date, cump, batch, warehouse, product, 
                                piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost, production_cost
                            )
                            VALUES (
                                NOW(), v_cump, v_batch_id, p_warehouse, 
                                p_product, p_piece_type, p_range, 
                                -v_deduct_qty, v_available_qty - v_deduct_qty, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                            );
                            
                            -- Update remaining quantity
                            SET v_remaining = v_remaining - v_deduct_qty;
                            
                            IF v_remaining <= 0 THEN 
                                CLOSE packages_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                        END LOOP;

                    ELSE -- Default to FIFO
                        OPEN fifo_cursor;
                        retrieval_loop: LOOP
                            FETCH fifo_cursor INTO v_index, v_batch_id, v_available_qty;
                            IF done THEN 
                                CLOSE fifo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                            
                            -- Get current CUMP for the batch
                            SET v_cump = 0;
                            SET v_current_stock = 0;
                            
                            OPEN batch_warehouse_cursor;
                            FETCH batch_warehouse_cursor INTO v_cump, v_current_stock, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                            CLOSE batch_warehouse_cursor;
                            
                            -- Calculate deduction quantity
                            SET v_deduct_qty = LEAST(v_available_qty, v_remaining);
                            
                            -- Insert stock log
                            INSERT INTO commercial_batch_stock_log (
                                date, cump, batch, warehouse, product, 
                                piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost, production_cost
                            )
                            VALUES (
                                NOW(), v_cump, v_batch_id, p_warehouse, 
                                p_product, p_piece_type, p_range, 
                                -v_deduct_qty, v_available_qty - v_deduct_qty, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                            );
                            
                            -- Update remaining quantity
                            SET v_remaining = v_remaining - v_deduct_qty;
                            
                            IF v_remaining <= 0 THEN 
                                CLOSE fifo_cursor;
                                LEAVE retrieval_loop; 
                            END IF;
                        END LOOP;
                END CASE;
            END IF;

            -- 3. Handle composite products if still remaining
            IF v_remaining > 0 THEN
                SELECT EXISTS(SELECT 1 FROM production_compsition WHERE composite = p_product)
                INTO v_is_composite;

                IF NOT v_is_composite OR NOT v_auto_deep_composition THEN
                    -- Get current CUMP using cursor for the last batch
                    SET v_cump = 0;
                    OPEN batch_warehouse_cursor;
                    FETCH batch_warehouse_cursor INTO v_cump, v_current_stock, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost;
                    CLOSE batch_warehouse_cursor;

                    INSERT INTO commercial_batch_stock_log (
                        date, cump, batch, warehouse, product, 
                        piece_type, piece_line, quantity, stock, piece_id, `action`, average_cost, first_price_cost, last_price_cost, standard_cost, production_cost
                    )
                    VALUES (
                        NOW(), v_cump, v_batch_id, p_warehouse, 
                        p_product, p_piece_type, p_range, 
                        -v_remaining, v_current_stock - v_remaining, p_piece, p_action, v_average_cost, v_first_price_cost, v_last_price_cost, v_standard_cost, v_production_cost
                    );
                /*ELSE
                    -- Reset the done flag before entering the component loop
                    SET done = 0;
                    
                    OPEN component_cursor;
                    component_loop: LOOP
                        FETCH component_cursor INTO v_component_id, v_component_ratio;
                        IF done THEN LEAVE component_loop; END IF;

                        SET v_deduct_qty = v_remaining * v_component_ratio;

                        IF (SELECT batch_type FROM commercial_product WHERE Id = v_component_id) IS NOT NULL THEN
                            CALL insert_batch_product_stock(
                                p_range,
                                p_piece_type,
                                v_component_id,
                                -v_deduct_qty,
                                p_piece,
                                p_warehouse,
                                p_action
                            );
                        END IF;
                    END LOOP;
                    CLOSE component_cursor;*/
                END IF;
            END IF;
        END IF;
    END IF;
    END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_category_in_inventory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_category_in_inventory`(p_idcategory int, p_idinventory int)
BEGIN
declare done int default 0;
declare done_holder int;
declare c_Id_product int default 0;
declare p_theorical_real_stock decimal(15,5) default 0;
declare c_price decimal(15,5) default 0;
declare product  int default 0;
declare p_warehouse int default 0;
declare c_product cursor for
SELECT        commercial_product.Id, commercial_product.price_purchase
FROM            commercial_product
WHERE        (commercial_product.category = p_idcategory);
declare continue handler for sqlstate '02000' set done=1;
select commercial_inventory.warehouse into p_warehouse
from commercial_inventory where commercial_inventory.Id=p_idinventory;
set done=0;
open c_product;
repeat
fetch c_product into c_Id_product, c_price;
if not done then
set done_holder=done;
SELECT COALESCE(actual_stock,0) into p_theorical_real_stock
FROM            commercial_product_stock
WHERE (commercial_product_stock.product = c_Id_product) and (commercial_product_stock.warehouse=p_warehouse)
order by Id desc
Limit 1;
insert into commercial_inventory_line (real_stock, theorical_real_stock,`range`, inventory, product,price)
values (0, p_theorical_real_stock,1, p_idinventory, c_Id_product, c_price);
set done=done_holder;
end if;
until done end repeat;
close c_product;
SET done=0;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_init_commercial_product_stock_warehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_init_commercial_product_stock_warehouse`()
BEGIN
declare done int default 0;
declare done_holder int;
declare p_product int;
declare p_actual_stock decimal(15,5);
declare p_theoretical_stock decimal(15,5);
declare p_product_stock int;
declare p_warehouse int;
declare c_product_warehouse_actual_stock cursor for
select actual_stock, theoretical_stock, product, Id, warehouse from product_warehouse_actual_stock;
declare c_commercial_product cursor for
select Id from commercial_product;
declare continue handler for sqlstate '02000' set done=1;
set done=0;
open c_commercial_product;
repeat
fetch c_commercial_product into p_product;
if not done then
set done_holder=done;
call insert_warehouse_on_insert_product(p_product);
set done=done_holder;
end if;
until done end repeat;
close c_commercial_product;
SET done=0;
set done=0;
open c_product_warehouse_actual_stock;
repeat
fetch c_product_warehouse_actual_stock into p_actual_stock, p_theoretical_stock, p_product, p_product_stock, p_warehouse;
if not done then
set done_holder=done;
update commercial_product_stock_warehouse set actual_stock=p_actual_stock, theoretical_stock=p_theoretical_stock,
product_stock=p_product_stock where product=p_product and warehouse=p_warehouse;
set done=done_holder;
end if;
until done end repeat;
close c_product_warehouse_actual_stock;
SET done=0;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_in_commercial_product_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_in_commercial_product_stock`(p_Id_piece_line int, piece_type varchar(255),
p_quantity decimal(15,5), p_th_quantity decimal(15,5), p_product int ,piece int, p_warehouse int)
BEGIN
INSERT INTO commercial_product_stock
(piece_line, piece_type, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse)
(select p_Id_piece_line,piece_type,p_quantity, p_th_quantity, p_product,now() ,piece, 'insert 1', p_warehouse);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_new_language_translations` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`%`*/ /*!50003 PROCEDURE `insert_new_language_translations`(IN new_language_id VARCHAR(50))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_table VARCHAR(255);
    DECLARE v_column VARCHAR(255);
    DECLARE existing_language_id VARCHAR(50);
    
    
    DECLARE cur CURSOR FOR 
        SELECT DISTINCT `table`, `column`
        FROM atooerp_language_struct;
    
    
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    
    SELECT Id INTO existing_language_id 
    FROM atooerp_language 
    WHERE Id != new_language_id 
    LIMIT 1;

    
    OPEN cur;
    
    
    read_loop: LOOP
        FETCH cur INTO v_table, v_column;
        IF done THEN
            LEAVE read_loop;
        END IF;
        
        
        INSERT INTO atooerp_language_struct (`table`, `column`, `row`, `language`, `translation`)
        SELECT 
            `table`,
            `column`,
            `row`,
            new_language_id,
            `translation`
        FROM atooerp_language_struct
        WHERE `table` = v_table
        AND `column` = v_column
        AND `language` = existing_language_id;
    END LOOP;
    
    
    CLOSE cur;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_product_in_inventoryByIdCategory` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_product_in_inventoryByIdCategory`(p_IdCategory int, p_IdInventory int)
BEGIN
insert into commercial_inventory_line (inventory, product)
select p_IdInventory, product
FROM commercial_product_stock_warehouse inner join
commercial_product on commercial_product.Id = commercial_product_stock_warehouse.product INNER JOIN
commercial_inventory ON commercial_product_stock_warehouse.warehouse = commercial_inventory.warehouse
WHERE  category = p_IdCategory and available = 1 and commercial_inventory.Id = p_IdInventory;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_product_on_insert_warehouse` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_product_on_insert_warehouse`(p_warehouse int)
BEGIN
insert into commercial_product_stock_warehouse (product, warehouse)
(select Id,  p_warehouse from commercial_product);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_product_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_product_stock`(p_Id_piece_line int,piece_type varchar(255), p_product int, quantity decimal(15,5), piece int, actual bool, theorical bool, p_warehouse int, p_action varchar(255))
BEGIN
declare p_stock decimal(15,5) default 0;
declare p_th_stock decimal(15,5) default 0;
declare p_cump decimal(15,5) default 0;
declare c_product int;
declare done int default 0;
declare done_holder int;
DECLARE p_quantity decimal(15,5) default 0;
DECLARE p_th_quantity decimal(15,5) default 0;
DECLARE p_production_compsition_quantity decimal(15,5) default 0;
DECLARE is_service bool default 0;

declare c_psw_actual_stock decimal(15,5) default 0;
declare c_psw_theoretical_stock decimal(15,5) default 0;
declare c_psw_cost decimal(15,5) default 0;
declare c_psw_warehouse int;
declare p_available, p_auto_deep_composition TINYINT(1);
declare p_last_price , p_standard_cost, p_by_batch_cost, p_cost, p_production_cost decimal(15,5) default 0;


declare c_psw cursor for
SELECT commercial_product_stock_warehouse.warehouse, commercial_product_stock_warehouse.actual_stock, commercial_product_stock_warehouse.theoretical_stock, commercial_product_stock_warehouse.cump
        from commercial_product_stock_warehouse inner join
             commercial_product on commercial_product.Id = product
        where commercial_product_stock_warehouse.actual_stock <= 0 and product = p_product;

declare c cursor for
select production_compsition.component, production_compsition.quantity from production_compsition
where production_compsition.composite=p_product;
declare continue handler for sqlstate '02000' set done=1;


SELECT        COALESCE(actual_stock,0), COALESCE(theoretical_stock,0), COALESCE(cump,0), available, auto_deep_composition, last_price_cost, standard_cost, by_batch_cost, average_cost, production_cost
into p_stock, p_th_stock, p_cump, p_available, p_auto_deep_composition, p_last_price , p_standard_cost, p_by_batch_cost, p_cost, p_production_cost
FROM            commercial_product_stock_warehouse
WHERE        (product = p_product) and (warehouse=p_warehouse)
Limit 1;


SET max_sp_recursion_depth=255;
/*call get_all_stock_by_warehouse(p_product, p_warehouse, @p_stock, @p_th_stock, @p_cump, @p_available, @p_auto_deep_composition);
set p_stock=@p_stock;
set p_th_stock=@p_th_stock;
set p_cump=@p_cump;
set p_available=@p_available;
set p_auto_deep_composition=@p_auto_deep_composition;*/

if ((select `type` from commercial_product where Id=p_product)=3) then
  set is_service=1;
end if;
if (quantity>0) then
  if (actual) then
    SET p_quantity=p_stock-quantity;
  else
    SET p_quantity=p_stock;
  end if;
  /*if (theorical) then
    SET p_th_quantity=p_th_stock-quantity;
  else
    SET p_th_quantity=p_th_stock;
  end if;*/
  if not is_composite(p_product) or not(p_auto_deep_composition) then
    if(not is_service) then
      INSERT INTO commercial_product_stock
        (piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump, last_price_cost, standard_cost, by_batch_cost, average_cost, production_cost)
        (select p_Id_piece_line,piece_type, quantity, p_quantity, p_th_quantity, p_product,now() ,piece, p_action, p_warehouse, p_cump, p_last_price , p_standard_cost, p_by_batch_cost, p_cost, p_production_cost);
    end if;
  else
    if (p_stock>=quantity) then
      if(not is_service) then
        INSERT INTO commercial_product_stock
          (piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`,warehouse, cump, last_price_cost, standard_cost, by_batch_cost, average_cost, production_cost)
          (select p_Id_piece_line,piece_type, quantity, p_quantity, p_th_quantity, p_product,now(),piece, p_action,p_warehouse, p_cump, p_last_price , p_standard_cost, p_by_batch_cost, p_cost, p_production_cost);
      end if;
    else
      if((SELECT COUNT(Id) FROM production_product_charging_station where product = p_product)>0) then
        if(not is_service) then
          INSERT INTO commercial_product_stock
            (piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump, last_price_cost, standard_cost, by_batch_cost, average_cost, production_cost)
            (select p_Id_piece_line,piece_type, quantity, p_quantity, p_th_quantity, p_product,now() ,piece, p_action, p_warehouse, p_cump, p_last_price , p_standard_cost, p_by_batch_cost, p_cost, p_production_cost);
        end if;
      else
        if(not is_service) then
          INSERT INTO commercial_product_stock
            (piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`,warehouse, cump, last_price_cost, standard_cost, by_batch_cost, average_cost, production_cost)
            (select p_Id_piece_line, piece_type, IF(p_stock>= 0, p_stock, 0), IF(p_stock>= 0, 0, p_stock), 0, p_product,now(),piece, p_action,p_warehouse, p_cump, p_last_price , p_standard_cost, p_by_batch_cost, p_cost, p_production_cost);
        end if;
        set done=0;
        open c;
        repeat
        fetch c into c_product, p_production_compsition_quantity;
          if not done then
            set done_holder=done;
            set p_quantity=(quantity - IF(p_stock>= 0, p_stock, 0))*p_production_compsition_quantity;
            call insert_product_stock(p_Id_piece_line, piece_type, c_product, p_quantity, piece, actual, theorical, p_warehouse, 'insert');
            set done=done_holder;
          end if;
        until done end repeat;
        close c;
      end if;
    end if;
  end if;
else
  if (actual) then
    SET p_quantity=p_stock-quantity;
  else
    SET p_quantity=p_stock;
  end if;
  if (theorical) then
    SET p_th_quantity=p_th_stock-quantity;
  else
    SET p_th_quantity=p_th_stock;
  end if;
  if(not is_service) then
    INSERT INTO commercial_product_stock
      (piece_line, piece_type, quantity,  actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump, last_price_cost, standard_cost, by_batch_cost, average_cost, production_cost)
      (select p_Id_piece_line,piece_type, quantity, p_quantity, p_th_quantity, p_product,now() ,piece, p_action, p_warehouse, p_cump, p_last_price , p_standard_cost, p_by_batch_cost, p_cost, p_production_cost);


    set done=0;
    open c_psw;
    repeat
      fetch c_psw into c_psw_warehouse, c_psw_actual_stock, c_psw_theoretical_stock, c_psw_cost;
      if not done then
        set done_holder=done;
          INSERT INTO commercial_product_stock (piece_line, piece_type, quantity,  actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
          (SELECT p_Id_piece_line, null, 0, c_psw_actual_stock, c_psw_theoretical_stock, p_product,now() ,piece, p_action, c_psw_warehouse, c_psw_cost);
        set done=done_holder;
      end if;
    until done end repeat;
    close c_psw;
    SET done=0;

  end if;
end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_product_stock_2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_product_stock_2`(p_Id_piece_line int,piece_type varchar(255), p_product int, quantity decimal, piece int, actual bool, theorical bool, p_warehouse int)
BEGIN
declare p_stock decimal default 0;
declare c_product int;
declare done int default 0;
declare done_holder int;
DECLARE p_quantity decimal default 0;
declare c cursor for
select production_compsition.component from production_compsition
where production_compsition.composite=p_product;
declare continue handler for sqlstate '02000' set done=1;
set p_stock=get_stock_by_warehouse(p_product, p_warehouse);
SET p_quantity=p_stock-quantity;
if not is_composite(p_product) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse)
(select p_Id_piece_line,piece_type,p_quantity, p_quantity, p_product,now() ,piece, 'insert', p_warehouse);
else
if (p_stock>=quantity) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, actual_stock, theoretical_stock, product, `date`, piece, `action`,warehouse)
(select p_Id_piece_line,piece_type, p_quantity, p_quantity, p_product,now(),piece, 'insert',p_warehouse);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, actual_stock, theoretical_stock, product, `date`, piece, `action`,warehose)
(select p_Id_piece_line, piece_type, 0, 0, p_product,now(),piece, 'insert',p_warehouse);
set done=0;
open c;
repeat
fetch c into c_product;
if not done then
set done_holder=done;
set p_quantity=quantity-p_stock;
call insert_product_stock_2(p_Id_piece_line, piece_type, c_product, p_quantity, piece,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c;
end if;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_product_stock_purchase` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_product_stock_purchase`(p_Id_piece_line int,piece_type varchar(255), p_product int, quantity decimal, piece int)
BEGIN
declare p_stock decimal default 0;
declare c_product int;
declare done int default 0;
declare done_holder int;
DECLARE p_quantity decimal default 0;
set p_stock=get_stock(p_product);
SET p_quantity=p_stock-quantity;
INSERT INTO commercial_product_stock
(piece_line, piece_type, actual_stock, theoretical_stock, product, `date`, piece, `action`)
(select p_Id_piece_line,piece_type,p_quantity, p_quantity, p_product,now() ,piece, 'test');
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_stock_notification` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_stock_notification`(p_actual_stock decimal(15,5), p_product int)
BEGIN
declare c_name varchar(255) default '';
declare c_min_stock decimal(15,5) default 0;
select name, min_stock into c_name, c_min_stock from commercial_product where Id=p_product;
if(p_actual_stock<0) then
insert into atooerp_notification (create_date, treatment_date, seen, treated, object, object_name, `type`, treatment_user)
values (now(), '0001-01-01 00:00:00', 0, 0, p_product, c_name, 1, 0);
else
if (p_actual_stock<c_min_stock) then
insert into atooerp_notification (create_date, treatment_date, seen, treated, object, object_name, `type`, treatment_user)
values (now(), '0001-01-01 00:00:00', 0, 0, p_product, c_name, 2, 0);
end if;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `insert_warehouse_on_insert_product` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `insert_warehouse_on_insert_product`(p_product int)
BEGIN


insert into commercial_product_stock_warehouse (product, warehouse)
(select p_product, Id from commercial_warehouse);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Marketing_get_all_attributes` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `Marketing_get_all_attributes`(IN profile_id INT)
BEGIN

  DECLARE parent_id INT DEFAULT NULL;

    CREATE TEMPORARY TABLE IF NOT EXISTS temp_table
    AS SELECT
    Id, attribut_rank, attribut_type, create_date, editor, label, memo, name, profile,is_null
    FROM
    marketing_profile_attribut
    where profile=   profile_id
    group by Id
    ;


    SET @@max_sp_recursion_depth = 100;

  
  INSERT INTO temp_table (Id, attribut_rank, attribut_type, create_date, editor, `label`, memo, name, profile,is_null)

  SELECT
    Id, attribut_rank, attribut_type, create_date, editor, label, memo, name, profile,is_null
  FROM
    marketing_profile_attribut
  WHERE
    profile = profile_id
  ORDER BY
    Id;

  
  SELECT 
    parent
  INTO
    parent_id
  FROM
    marketing_profile
  WHERE 
    Id = profile_id;

  
  IF parent_id IS NOT NULL THEN
    CALL Marketing_get_all_attributes(parent_id);
  else

      select * from temp_table group by Id
      order by profile  , attribut_rank  ;

           drop table temp_table;
    end if;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Marketing_get_all_temp_values` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `Marketing_get_all_temp_values`(IN partner_Id INT, IN profile_id INT)
BEGIN

  DECLARE parent_id INT DEFAULT NULL;

  SET @partner_Id = partner_Id;
  SET @profile_id = profile_id;

  -- Étape 1 : Création manuelle de la table temporaire avec types explicites
  CREATE TEMPORARY TABLE IF NOT EXISTS temp_table (
    Id INT,
    name VARCHAR(255),
    create_date DATETIME,
    memo TEXT,
    blob_value BLOB,
    Etat VARCHAR(100),
    valeur VARCHAR(1000),
    utilisateur VARCHAR(255),
    Attribut VARCHAR(255)
  );

  -- Étape 2 : Insertion des données
  INSERT INTO temp_table (Id, name, create_date, memo, blob_value, Etat, valeur, utilisateur, Attribut)
  SELECT
    marketing_profile_attribut_value_temp.Id,
    marketing_profile_attribut_value_temp.name,
    marketing_profile_attribut_value_temp.create_date,
    marketing_profile_attribut_value_temp.memo,
    marketing_profile_attribut_value_temp.blob_value,
    marketing_profile_state.name AS Etat,
    CONVERT(COALESCE(
      atooerp_type_element.name,
      marketing_profile_attribut_value_temp.int_value,
      marketing_profile_attribut_value_temp.date_value,
      marketing_profile_attribut_value_temp.decimal_value,
      marketing_profile_attribut_value_temp.boolean_value,
      marketing_profile_attribut_value_temp.string_value
    ), CHAR(1000)) AS valeur,
    CONCAT(atooerp_user.first_name, atooerp_user.last_name) AS utilisateur,
    marketing_profile_attribut.label AS Attribut
  FROM
    marketing_profile_attribut_value_temp
    LEFT JOIN atooerp_user ON marketing_profile_attribut_value_temp.`user` = atooerp_user.Id
    LEFT JOIN marketing_profile_attribut_value ON marketing_profile_attribut_value_temp.attribut_value = marketing_profile_attribut_value.Id
    LEFT JOIN marketing_profile_instances ON marketing_profile_attribut_value.profile_instance = marketing_profile_instances.Id
    LEFT JOIN marketing_profile_attribut ON marketing_profile_attribut_value.attribut = marketing_profile_attribut.Id
    LEFT JOIN marketing_profile_state ON marketing_profile_attribut_value_temp.state = marketing_profile_state.Id
    LEFT JOIN atooerp_type_element ON marketing_profile_attribut_value_temp.type = atooerp_type_element.Id AND marketing_profile_attribut_value.type = atooerp_type_element.Id
  WHERE
    marketing_profile_instances.partner = @partner_Id
    AND marketing_profile_instances.profil = @profile_id
    AND marketing_profile_attribut_value_temp.state = 1
    AND marketing_profile_attribut_value_temp.profile_instance_temp IS NULL
    AND marketing_profile_attribut_value_temp.partner_temp IS NULL;

  -- Étape 3 : Récupération du parent
  SELECT parent INTO parent_id
  FROM marketing_profile
  WHERE Id = profile_id;

  -- Étape 4 : Appel récursif ou affichage
  IF parent_id IS NOT NULL THEN
    CALL Marketing_get_all_temp_values(partner_Id, parent_id);
  ELSE
    SELECT * FROM temp_table GROUP BY Id ORDER BY create_date;
    DROP TEMPORARY TABLE IF EXISTS temp_table;
  END IF;

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `marketing_profile_instancesDisableDefault` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `marketing_profile_instancesDisableDefault`(
    IN partner_id INT,
    IN person_id INT, 
    IN product_id INT
)
BEGIN
    
    IF partner_id IS NOT NULL THEN
        UPDATE marketing_profile_instances
        SET `default` = 0
        WHERE partner = partner_id;

    
    ELSEIF person_id IS NOT NULL THEN
        UPDATE marketing_profile_instances
        SET `default` = 0
        WHERE person = person_id;
    
    
    ELSEIF product_id IS NOT NULL THEN
        UPDATE marketing_profile_instances
        SET `default` = 0
        WHERE product = product_id;
    
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `marketing_profile_instances_UpdateDefault` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `marketing_profile_instances_UpdateDefault`(
    IN profile_instance_Id INT,
    IN partner_Id INT,
    IN person_Id INT,
    IN product_Id INT
)
BEGIN
    
    IF partner_Id IS NOT NULL THEN
        UPDATE commercial_partner
        SET `profile_instance` = profile_instance_Id
        WHERE Id = partner_Id;
    
    
    ELSEIF person_Id IS NOT NULL THEN
        UPDATE atooerp_person
        SET profile_instance = profile_instance_Id
        WHERE Id = person_Id;

    
    ELSEIF product_Id IS NOT NULL THEN
        UPDATE commercial_product
        SET profile_instance = profile_instance_Id
        WHERE Id = product_Id;

    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `Marketing_UpdatePartner` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `Marketing_UpdatePartner`(In fieldName Varchar(100), In  Id INT, IN intValue Int, IN decimalValue DECIMAL(15,5), IN stringValue VARCHAR(100), IN dateValue DATETIME )
BEGIN
       DECLARE sql_st VARCHAR(2000);
   if (Id<>0) then
    IF (stringValue Is not NULL AND dateValue is null and intValue is null and decimalValue Is null ) then
     SET @sql_st = CONCAT('UPDATE commercial_partner SET `',fieldName,'`="',stringValue,'" WHERE Id=',Id);
      elseif(dateValue is not null and stringValue Is NULL  and intValue is null and decimalValue Is null ) then
     SET @sql_st = CONCAT('UPDATE commercial_partner SET `',fieldName,'`="',dateValue,'" WHERE Id=',Id);
       elseIF (intValue is not NULL and dateValue is  null and stringValue Is NULL  and decimalValue Is null )  then
            SET @sql_st = CONCAT('UPDATE commercial_partner SET `',fieldName,'`="',intValue,'" WHERE Id=',Id);
          elseif (decimalValue is not null  and dateValue is null and stringValue Is NULL  and intValue is null ) then
          SET @sql_st = CONCAT('UPDATE commercial_partner SET `',fieldName,'`="',decimalValue,'" WHERE Id=',Id);


        END IF;
   PREPARE stmt FROM @sql_st;


   EXECUTE stmt ;
   end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `notification_insert_credit_limit` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `notification_insert_credit_limit`(p_partner int)
BEGIN
declare c_rest_amount decimal(15,5) default 0;
declare c_credit_limit decimal(15,5) default 0;
declare c_partnerName varchar(255) default '';
SELECT       COALESCE(SUM(sale_balance.restAmount), 0), COALESCE(commercial_partner.credit_limit, 0), partnerName
into c_rest_amount, c_credit_limit, c_partnerName
FROM            sale_balance LEFT OUTER JOIN
commercial_partner ON sale_balance.IdPartner = commercial_partner.Id
WHERE        (FORMAT(sale_balance.restAmount, 3) > 0) AND (sale_balance.IdPartner = p_partner) AND
(sale_balance.piece_type <> 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
if(c_rest_amount>c_credit_limit) then
INSERT INTO `atooerp_notification` (`create_date`, `treatment_date`, `seen`, `treated`, `object`, `object_name`, `type`, `treatment_user`,`message`)
VALUES (now(), null, 0, 0, p_partner, c_partnerName, 3, 0,concat('Le client ',c_partnerName,' a depasse son plafond de credit (',c_credit_limit,')'));
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `notification_insert_daily` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `notification_insert_daily`(p_user int)
BEGIN
declare c_create_date DATE;
select create_date into c_create_date from atooerp_notification_date order by Id desc limit 1;
if(date(c_create_date)<date(NOW())) then
call notification_insert_purchase_undelivred();
call notification_insert_sale_undelivred();
call notification_insert_purchase_due_date();
call notification_insert_sale_due_date();
insert into atooerp_notification_date (create_date, `user`) values (now(), p_user);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `notification_insert_purchase_due_date` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `notification_insert_purchase_due_date`()
BEGIN
declare c_due_date_alert int default 0;
select `value` into c_due_date_alert from commercial_configuration where name='notification_due_date_alert';
INSERT INTO `atooerp_notification` (`create_date`, `treatment_date`, `seen`, `treated`, `object`, `object_name`, `type`, `treatment_user`, `message`)
(select now(), null, 0, 0, Id , code,
case piece_type
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then 8
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then 9
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then 10
else 0 end,
0,
case piece_type
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if (DATE(due_date) < CURDATE(), concat('Le BR ',code,' a atteint la date d echeance (',due_date,')'), concat('Le BR ',code,' atteindra la date d echeance le (',due_date+')'))
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if (DATE(due_date) < CURDATE(), concat('La facture d achat ',code,' a atteint la date d echeance (',due_date,')'), concat('La facture d achat ',code,' atteindra la date d echeance le (',due_date,')'))
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if (DATE(due_date) < CURDATE(), concat('Le Bon de commande d achat ',code,' a atteint la date d echeance (',due_date,')'), concat('Le Bon de commande d achat ',code,' atteindra la date d echeance le (',due_date,')'))
else '' end from purchase_balance WHERE        (purchase_balance.restAmount > 0) AND
DATE(purchase_balance.due_date)< (CURDATE()+c_due_date_alert)
);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `notification_insert_purchase_undelivred` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `notification_insert_purchase_undelivred`()
BEGIN
declare c_delivring_date_alert decimal(15,5) default 0;
select `value` into c_delivring_date_alert from commercial_configuration where name='notification_delivring_date_alert';
INSERT INTO `atooerp_notification` (`create_date`, `treatment_date`, `seen`, `treated`, `object`, `object_name`,
`type`, `treatment_user`, `message`)
(select now(), null, 0, 0, Id , code, 12, 0,
if (DATE(delivred_date) < DATE(NOW()),
concat('Le bon de commande ',code,' n a pas ete livre (',delivred_date,')'),
concat('Le Bon de commande ',code,' doit etre livre avant le le (',delivred_date,')'))
from purchase_order WHERE        (purchase_order.delivred =0) AND
DATE(purchase_order.delivred_date)< (DATE(NOW())+c_delivring_date_alert)
);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `notification_insert_sale_due_date` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `notification_insert_sale_due_date`()
BEGIN
declare c_due_date_alert int default 0;
select `value` into c_due_date_alert from commercial_configuration where name='notification_due_date_alert';
INSERT INTO `atooerp_notification` (`create_date`, `treatment_date`, `seen`, `treated`, `object`, `object_name`, `type`, `treatment_user`, `message`)
(select now(), null, 0, 0, Id , code,
case piece_type
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then 4
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then 5
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then 6
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then 7
else 0 end,
0,
case piece_type
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if (DATE(due_date) < CURDATE(), concat('Le BR ',code,' a atteint la date d echeance (',due_date,')'), concat('Le BR ',code,' atteindra la date d echeance le (',due_date+')'))
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if (DATE(due_date) < CURDATE(), concat('La facture de vente ',code,' a atteint la date d echeance (',due_date,')'), concat('La facture de vente ',code,' atteindra la date d echeance le (',due_date,')'))
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if (DATE(due_date) < CURDATE(), concat('Le Bon de commande de vente ',code,' a atteint la date d echeance (',due_date,')'), concat('Le Bon de commande de vente ',code,' atteindra la date d echeance le (',due_date,')'))
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if (DATE(due_date) < CURDATE(), concat('Le Ticket de caisse ',code,' a atteint la date d echeance (',due_date,')'), concat('Le Ticket de caisse ',code,' atteindra la date d echeance le (',due_date,')'))
else '' end from sale_balance WHERE        (sale_balance.restAmount > 0) AND
DATE(sale_balance.due_date)< (CURDATE()+c_due_date_alert)
);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `notification_insert_sale_undelivred` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `notification_insert_sale_undelivred`()
BEGIN
declare c_delivring_date_alert decimal(15,5) default 0;
select `value` into c_delivring_date_alert from commercial_configuration where name='notification_delivring_date_alert';
INSERT INTO `atooerp_notification` (`create_date`, `treatment_date`, `seen`, `treated`, `object`, `object_name`,
`type`, `treatment_user`, `message`)
(select now(), null, 0, 0, Id , code, 11, 0,
if (DATE(delivred_date) < DATE(NOW()),
concat('Le bon de commande ',code,' n a pas ete livre (',delivred_date,')'),
concat('Le Bon de commande ',code,' doit etre livre avant le le (',delivred_date,')'))
from sale_order WHERE        (sale_order.delivred =0) AND
DATE(sale_order.delivred_date)< (DATE(NOW())+c_delivring_date_alert)
);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `notification_insert_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `notification_insert_stock`(p_actual_stock decimal(15,5), p_product int)
BEGIN
declare c_name varchar(255) default '';
declare c_min_stock decimal(15,5) default 0;
select name, min_stock into c_name, c_min_stock from commercial_product where Id = p_product;
if(p_actual_stock<0) then
insert into atooerp_notification (create_date, treatment_date, seen, treated, object, object_name, `type`, treatment_user, `message`)
values (now(), Null, 0, 0, p_product, c_name, 1, 0, concat('Le produit ',c_name,' est passe en rupture de stock (',p_actual_stock,')'));
else
if (p_actual_stock<c_min_stock) then
insert into atooerp_notification (create_date, treatment_date, seen, treated, object, object_name, `type`, treatment_user, `message`)
values (now(), Null, 0, 0, p_product, c_name, 2, 0, concat('Le produit ',c_name,' a depasse son stock minimum (',c_min_stock,')'));
end if;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `populate_translation_table` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `populate_translation_table`(IN p_table_name VARCHAR(255), IN p_column_name VARCHAR(255))
BEGIN
    DECLARE done INT DEFAULT FALSE;
    DECLARE v_language VARCHAR(50);
    DECLARE lang_cursor CURSOR FOR SELECT DISTINCT Id FROM atooerp_language;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

    
    OPEN lang_cursor;

    
    lang_loop: LOOP
        FETCH lang_cursor INTO v_language;
        IF done THEN
            LEAVE lang_loop;
        END IF;

        
        DELETE FROM  atooerp_language_struct WHERE `table` = p_table_name AND `column`= p_column_name AND `language` = v_language ;
        SET @sql = CONCAT('INSERT INTO atooerp_language_struct (`table`, `column`, `row`, `language`, `translation`)
                           SELECT 
                               ''', p_table_name, ''' AS `table`,
                               ''', p_column_name, ''' AS `column`,
                               Id AS `row`,
                               ''', v_language, ''' AS `language`,
                               ', p_column_name, ' AS `translation`
                           FROM ', p_table_name);
        
        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;

    END LOOP;

    
    CLOSE lang_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pos_order_update_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `pos_order_update_stock`(IdPiece int, piece_type varchar(255))
BEGIN
declare done int default 0;
declare c_Id int;
declare c_product int;
declare c_quantity decimal(15,5) default 0;
declare done_holder int;
declare p_warehouse int default 0;
declare p_warehouse_out int default 0;
declare p_order int default 0;
declare p_invoice int default 0;
declare p_shipping int default 0;
declare p_pos_order int default 0;
declare p_delivred boolean default 0;
declare checFreind boolean default 0;
declare checThehorical boolean default 0;
declare c_pos_order cursor for
SELECT        pos_order_line.Id, pos_order_line.product, pos_order_line.quantity
FROM            pos_order_line
WHERE        (pos_order_line.piece = IdPiece);
declare c_pos_credit_order cursor for
SELECT        pos_credit_order_line.Id, pos_credit_order_line.product, pos_credit_order_line.quantity
FROM            pos_credit_order_line
WHERE        (pos_credit_order_line.piece = IdPiece);
declare c_purchase_shipping cursor for
SELECT        purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.quantity
FROM            purchase_shipping_line
WHERE        (purchase_shipping_line.piece = IdPiece);
declare c_sale_shipping cursor for
SELECT        sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.quantity
FROM            sale_shipping_line
WHERE        (sale_shipping_line.piece = IdPiece);
declare c_purchase_invoice cursor for
SELECT        purchase_invoice_line.Id, purchase_invoice_line.product, purchase_invoice_line.quantity
FROM            purchase_invoice_line
WHERE        (purchase_invoice_line.piece = IdPiece);
declare c_sale_invoice cursor for
SELECT        sale_invoice_line.Id, sale_invoice_line.product, sale_invoice_line.quantity
FROM            sale_invoice_line
WHERE        (sale_invoice_line.piece = IdPiece);
declare c_sale_credit_invoice cursor for
SELECT        sale_credit_invoice_line.Id, sale_credit_invoice_line.product, sale_credit_invoice_line.quantity
FROM            sale_credit_invoice_line
WHERE        (sale_credit_invoice_line.piece = IdPiece);
declare c_purchase_credit_invoice cursor for
SELECT        purchase_credit_invoice_line.Id, purchase_credit_invoice_line.product, purchase_credit_invoice_line.quantity
FROM            purchase_credit_invoice_line
WHERE        (purchase_credit_invoice_line.piece = IdPiece);
declare c_purchase_order cursor for
SELECT        purchase_order_line.Id, purchase_order_line.product, purchase_order_line.quantity
FROM            purchase_order_line
WHERE        (purchase_order_line.piece = IdPiece);
declare c_sale_order cursor for
SELECT        sale_order_line.Id, sale_order_line.product, sale_order_line.quantity
FROM            sale_order_line
WHERE        (sale_order_line.piece = IdPiece);
declare c_stock_entry cursor for
SELECT        commercial_stock_entry_line.Id, commercial_stock_entry_line.product, commercial_stock_entry_line.quantity
FROM            commercial_stock_entry_line
WHERE        (commercial_stock_entry_line.piece = IdPiece);
declare c_stock_out cursor for
SELECT        commercial_stock_out_line.Id, commercial_stock_out_line.product, commercial_stock_out_line.quantity
FROM            commercial_stock_out_line
WHERE        (commercial_stock_out_line.piece = IdPiece);
declare c_stock_mouvement cursor for
SELECT        commercial_stock_mouvement_line.Id, commercial_stock_mouvement_line.product, commercial_stock_mouvement_line.quantity
FROM            commercial_stock_mouvement_line
WHERE        (commercial_stock_mouvement_line.piece = IdPiece);
declare c_purchase_shipping_of_invoice cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.invoice = IdPiece);
declare c_purchase_shipping_of_order cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.`order` = IdPiece);
declare c_sale_shipping_of_invoice cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.invoice = IdPiece);
declare c_sale_shipping_of_order cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.`order` = IdPiece);
declare c_pos_order_of_invoice cursor for
SELECT        pos_order.Id
FROM            pos_order
WHERE        (pos_order.invoice = IdPiece);

declare c_purchase_shipping_return cursor for
SELECT        purchase_shipping_return_line.Id, purchase_shipping_return_line.product, purchase_shipping_return_line.quantity
FROM            purchase_shipping_return_line
WHERE        (purchase_shipping_return_line.piece = IdPiece);

declare c_sale_shipping_return cursor for
SELECT        sale_shipping_return_line.Id, sale_shipping_return_line.product, sale_shipping_return_line.quantity
FROM            sale_shipping_return_line
WHERE        (sale_shipping_return_line.piece = IdPiece);

declare continue handler for sqlstate '02000' set done=1;
case piece_type
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if((SELECT        COUNT(pos_order.Id)
FROM            pos_order INNER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id AND sale_invoice.validated = 1
WHERE        (pos_order.Id = IdPiece))=0)
then
set checThehorical=1;
end if;
set done=0;
open c_pos_order;
repeat
fetch c_pos_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
set p_warehouse= get_warehouse_by_piece_line(c_Id);
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, checThehorical, p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_pos_order;
SET done=0;
when 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set done=0;
open c_pos_credit_order;
repeat
fetch c_pos_credit_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
set p_warehouse= get_warehouse_by_credit_order_line(c_Id);
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true, p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_pos_credit_order;
SET done=0;
when 'Restoration.Consomation_table, Restoration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if((SELECT        COUNT(pos_order.Id)
FROM            pos_order INNER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id AND sale_invoice.validated = 1
WHERE        (pos_order.Id = IdPiece))=0)
then
set checThehorical=1;
end if;
set done=0;
open c_pos_order;
repeat
fetch c_pos_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
set p_warehouse= get_warehouse_by_piece_line(c_Id);
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, checThehorical, p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_pos_order;
SET done=0;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from sale_shipping where Id=IdPiece;
if not check_sale_shipping_freind(IdPiece) then
set done=0;
open c_sale_shipping;
repeat
fetch c_sale_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true, p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping;
SET done=0;
else
set done=0;
open c_sale_shipping;
repeat
fetch c_sale_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, false,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping;
SET done=0;
end if;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select sale_invoice.`order`, sale_order.delivred into p_order, p_delivred from sale_invoice left outer join
sale_order ON sale_invoice.`order`= sale_order.Id and sale_order.validated=1
where sale_invoice.Id=IdPiece;
if (p_order !=0 and !p_delivred) then
call delete_commercial_product_stock(p_order, 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
else
begin
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT        piece_line, commercial_product_stock.piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
sale_shipping ON commercial_product_stock.piece = sale_shipping.Id and
commercial_product_stock.piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND
sale_shipping.invoice = IdPiece
LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id LEFT OUTER JOIN
sale_invoice ON sale_order.Id = sale_invoice.`order` AND sale_invoice.Id = IdPiece LEFT OUTER JOIN
pos_order ON commercial_product_stock.piece = pos_order.Id and
commercial_product_stock.piece_type='Pos.Order, Pos, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND
pos_order.invoice = IdPiece
WHERE ((sale_shipping.invoice = IdPiece) OR (sale_invoice.Id = IdPiece) OR (pos_order.invoice = IdPiece)) and
commercial_product_stock.`action`<>'correction' and commercial_product_stock.`action`<>'delete';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'transfert', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
end if;
set done=0;
open c_sale_invoice;
repeat
fetch c_sale_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_invoice;
SET done=0;
when 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from sale_credit_invoice where Id=IdPiece;
set done=0;
open c_sale_credit_invoice;
repeat
fetch c_sale_credit_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_credit_invoice;
SET done=0;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select count(*) into p_invoice from sale_invoice
WHERE   (sale_invoice.`order` = IdPiece) and sale_invoice.validated = 1;
if (p_invoice=0) then
begin
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT        piece_line, commercial_product_stock.piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM      commercial_product_stock LEFT OUTER JOIN
sale_shipping ON commercial_product_stock.piece = sale_shipping.Id and
commercial_product_stock.piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id AND sale_invoice.validated = 0
WHERE        ((sale_shipping.`order` = IdPiece) OR
(sale_invoice.`order` = IdPiece)) and  commercial_product_stock.`action`<>'correction' and
commercial_product_stock.`action`<>'delete';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'transfert', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
set done=0;
open c_sale_order;
repeat
fetch c_sale_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_order;
SET done=0;
end if;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from purchase_shipping where Id=IdPiece;
if not check_Purchase_shipping_freind(IdPiece) then
set done=0;
open c_purchase_shipping;
repeat
fetch c_purchase_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping;
SET done=0;
else
set done=0;
open c_purchase_shipping;
repeat
fetch c_purchase_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, false,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping;
SET done=0;
end if;
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select purchase_invoice.`order`, purchase_order.delivred into p_order, p_delivred from purchase_invoice left outer join
purchase_order ON purchase_invoice.`order`= purchase_order.Id and purchase_order.validated=1
where purchase_invoice.Id=IdPiece;
if (p_order !=0 and !p_delivred) then
call delete_commercial_product_stock(p_order, 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
else
begin
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT        piece_line, commercial_product_stock.piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
purchase_shipping ON commercial_product_stock.piece = purchase_shipping.Id and
commercial_product_stock.piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AND  purchase_shipping.invoice = IdPiece
LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id LEFT OUTER JOIN
purchase_invoice ON purchase_order.Id = purchase_invoice.`order`  AND purchase_invoice.Id = IdPiece
WHERE(purchase_shipping.invoice = IdPiece) OR (purchase_invoice.Id = IdPiece) and
commercial_product_stock.`action`<>'correction' and commercial_product_stock.`action`<>'delete';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'transfert', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
end if;
set done=0;
open c_purchase_invoice;
repeat
fetch c_purchase_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_invoice;
SET done=0;
when 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from purchase_credit_invoice where Id=IdPiece;
set done=0;
open c_purchase_credit_invoice;
repeat
fetch c_purchase_credit_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_credit_invoice;
SET done=0;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select count(*) into p_invoice from purchase_invoice
WHERE   (purchase_invoice.`order` = IdPiece) and purchase_invoice.validated = 1;
if (p_invoice=0) then
begin
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT        piece_line, commercial_product_stock.piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM      commercial_product_stock LEFT OUTER JOIN
purchase_shipping ON commercial_product_stock.piece = purchase_shipping.Id and
commercial_product_stock.piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id AND purchase_invoice.validated = 0
WHERE       ( (purchase_shipping.`order` = IdPiece) OR
(purchase_invoice.`order` = IdPiece)) and
commercial_product_stock.`action`<>'correction' and commercial_product_stock.`action`<>'delete';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, s_quantity, s_reel_stock, s_th_stock+ s_quantity, s_product,now() ,s_piece, 'transfert', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
set done=0;
open c_purchase_order;
repeat
fetch c_purchase_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_order;
SET done=0;
end if;


when 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from commercial_stock_out where Id=IdPiece;
set done=0;
open c_stock_out;
repeat
fetch c_stock_out into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_stock_out;
SET done=0;
when 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from commercial_stock_entry where Id=IdPiece;
set done=0;
open c_stock_entry;
repeat
fetch c_stock_entry into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_stock_entry;
SET done=0;
when 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse_in, warehouse_out into p_warehouse, p_warehouse_out from commercial_stock_mouvement where Id=IdPiece;
set done=0;
open c_stock_mouvement;
repeat
fetch c_stock_mouvement into c_Id, c_product, c_quantity;
if not done then
  set done_holder=done;
  call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true, p_warehouse, 'insert');
  call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true, p_warehouse_out, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_stock_mouvement;
SET done=0;

when 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from purchase_shipping_return where Id=IdPiece;
set done=0;
open c_purchase_shipping_return;
repeat
fetch c_purchase_shipping_return into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping_return;
SET done=0;

when 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from sale_shipping_return where Id=IdPiece;
set done=0;
open c_sale_shipping_return;
repeat
fetch c_sale_shipping_return into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping_return;
SET done=0;

else set done=0 ;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pos_order_update_stock_2` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `pos_order_update_stock_2`(IdPiece int, piece_type varchar(255))
BEGIN
declare done int default 0;
declare c_Id int;
declare c_product int;
declare c_quantity decimal default 0;
declare done_holder int;
declare p_warehouse int default 0;
declare p_warehouse_out int default 0;
declare c cursor for
SELECT        pos_order_line.Id, pos_order_line.product, pos_order_line.quantity
FROM            pos_order_line
WHERE        (pos_order_line.piece = IdPiece);
declare c_purchase_shipping cursor for
SELECT        purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.quantity
FROM            purchase_shipping_line
WHERE        (purchase_shipping_line.piece = IdPiece);
declare c_sale_shipping cursor for
SELECT        sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.quantity
FROM            sale_shipping_line
WHERE        (sale_shipping_line.piece = IdPiece);
declare c_purchase_invoice cursor for
SELECT        purchase_invoice_line.Id, purchase_invoice_line.product, purchase_invoice_line.quantity
FROM            purchase_invoice_line
WHERE        (purchase_invoice_line.piece = IdPiece);
declare c_sale_invoice cursor for
SELECT        sale_invoice_line.Id, sale_invoice_line.product, sale_invoice_line.quantity
FROM            sale_invoice_line
WHERE        (sale_invoice_line.piece = IdPiece);
declare c_purchase_order cursor for
SELECT        purchase_order_line.Id, purchase_order_line.product, purchase_order_line.quantity
FROM            purchase_order_line
WHERE        (purchase_order_line.piece = IdPiece);
declare c_sale_order cursor for
SELECT        sale_order_line.Id, sale_order_line.product, sale_order_line.quantity
FROM            sale_order_line
WHERE        (sale_order_line.piece = IdPiece);
declare c_stock_entry cursor for
SELECT        commercial_stock_entry_line.Id, commercial_stock_entry_line.product, commercial_stock_entry_line.quantity
FROM            commercial_stock_entry_line
WHERE        (commercial_stock_entry_line.piece = IdPiece);
declare c_stock_out cursor for
SELECT        commercial_stock_out_line.Id, commercial_stock_out_line.product, commercial_stock_out_line.quantity
FROM            commercial_stock_out_line
WHERE        (commercial_stock_out_line.piece = IdPiece);
declare c_stock_mouvement cursor for
SELECT        commercial_stock_mouvement_line.Id, commercial_stock_mouvement_line.product, commercial_stock_mouvement_line.quantity
FROM            commercial_stock_mouvement_line
WHERE        (commercial_stock_mouvement_line.piece = IdPiece);
declare continue handler for sqlstate '02000' set done=1;
case piece_type
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set done=0;
open c;
repeat
fetch c into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
set p_warehouse= get_warehouse_by_piece_line(c_Id);
call insert_product_stock_2(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true, p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c;
SET done=0;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if not check_sale_shipping_freind(IdPiece) then
set done=0;
open c_sale_shipping;
repeat
fetch c_sale_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping;
SET done=0;
else
set done=0;
open c_sale_shipping;
repeat
fetch c into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, c_quantity, IdPiece, true, false,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping;
SET done=0;
end if;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if not check_sale_invoice_freind(IdPiece) then
set done=0;
open c_sale_invoice;
repeat
fetch c_sale_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, c_quantity, IdPiece, false, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_sale_invoice;
SET done=0;
end if;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if not check_sale_order_freind(IdPiece) then
set done=0;
open c_sale_order;
repeat
fetch c_sale_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, c_quantity, IdPiece, false, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_sale_order;
SET done=0;
end if;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if not check_Purchase_shipping_freind(IdPiece) then
set done=0;
open c_purchase_shipping;
repeat
fetch c_purchase_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping;
SET done=0;
else
set done=0;
open c_purchase_shipping;
repeat
fetch c_purchase_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, false,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping;
SET done=0;
end if;
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if not check_Purchase_invoice_freind(IdPiece) then
set done=0;
open c_purchase_invoice;
repeat
fetch c_purchase_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, -c_quantity, IdPiece, false, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_purchase_invoice;
SET done=0;
end if;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if not check_Purchase_order_freind(IdPiece) then
set done=0;
open c_purchase_order;
repeat
fetch c_purchase_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, -c_quantity, IdPiece, false, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_purchase_order;
SET done=0;
end if;
when 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from commercial_stock_out where Id=IdPiece;
set done=0;
open c_stock_out;
repeat
fetch c_stock_out into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_stock_out;
SET done=0;
when 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from commercial_stock_entry where Id=IdPiece;
set done=0;
open c_stock_entry;
repeat
fetch c_stock_entry into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse);
set done=done_holder;
end if;
until done end repeat;
close c_stock_entry;
SET done=0;
when 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse_in, warehouse_out into p_warehouse, p_warehouse_out from commercial_stock_mouvement where Id=IdPiece;
set done=0;
open c_stock_mouvement;
repeat
fetch c_stock_mouvement into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock_2(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true, p_warehouse);
call insert_product_stock_2(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true, p_warehouse_out);
set done=done_holder;
end if;
until done end repeat;
close c_stock_mouvement;
SET done=0;
else set done=0 ;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `pos_update_user_point_of_sale_group_by_user` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `pos_update_user_point_of_sale_group_by_user`(IdUser int)
BEGIN
declare done int default 0;
declare done_holder int;
declare userGroup int default 0;
declare newUserGroup int default 5;
declare cursorGroup int default 0;
declare c_pos_point_of_sale_user cursor for
SELECT        `group`
FROM   pos_point_of_sale_user
WHERE  `user` = IdUser;
declare continue handler for sqlstate '02000' set done=1;
SELECT `group` into userGroup FROM atooerp_user_module_group   where `user` = IdUser and module = 3;
if (userGroup <> 16) then
set done=0;
open c_pos_point_of_sale_user;
repeat
fetch c_pos_point_of_sale_user into cursorGroup;
if not done then
set done_holder=done;
if(cursorGroup = 6) then
set newUserGroup = 6;
else
if(cursorGroup = 7 and newUserGroup <> 6) then
set newUserGroup = 7;
end if;
end if;
set done=done_holder;
end if;
until done end repeat;
close c_pos_point_of_sale_user;
update atooerp_user_module_group set `group`= newUserGroup where `user` = IdUser and module = 3;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `productionUpdateCommercial_product_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `productionUpdateCommercial_product_stock`(piece_type varchar(255), p_product int, quantity decimal(15,5), piece int, p_warehouse int, p_action varchar(255))
BEGIN
declare p_stock decimal(15,5) default 0;
declare p_th_stock decimal(15,5) default 0;
declare p_cump decimal(15,5) default 0;
declare c_product int;
DECLARE p_quantity decimal(15,5) default 0;


call get_all_stock_by_warehouse(p_product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
set p_stock=@p_stock;
set p_cump=@p_cump;

SET p_quantity = p_stock+quantity;

INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select piece, piece_type, -quantity, p_quantity, p_quantity, p_product, now() ,piece, p_action, p_warehouse, p_cump);


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_insert_cump_product_stockOnCostChanged` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_insert_cump_product_stockOnCostChanged`(p_IdProduct_cost int, p_product int, p_warehouse int, p_cump decimal(15,5))
BEGIN
declare p_stock decimal(15,5) default 0;
declare p_th_stock decimal(15,5) default 0;
DECLARE is_service bool default 0;
call get_all_stock_by_warehouse(p_product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
set p_stock=@p_stock;
set p_th_stock=@p_th_stock;
if ((select `type` from commercial_product where Id=p_product)=3) then
set is_service=1;
end if;
if(not is_service) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, production_cost)
(select p_IdProduct_cost, 'production_product_cost', 0, p_stock, p_th_stock, p_product,now() , 0, 'trigger_production_product_costAfterInsert', p_warehouse, p_cump);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCost` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCost`(IdComponent int, p_piece_type varchar(100), p_piece int, p_piece_line int, p_note varchar(100))
BEGIN
declare c_IdWarehouse int;
declare c_IdComposite int;
declare lastId int;
declare c_cost decimal(15,5);
declare done int default 0;
declare done_holder int;
declare c cursor for
select Id
from commercial_warehouse;
declare composit_cursor cursor for
select composite
from production_compsition
where component = IdComponent;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
if(is_composite(IdComponent)) then
  
  set done=0;
  open c;
  repeat
    fetch c into c_IdWarehouse;
      if not done then
        set done_holder=done;
        set c_cost = coalesce((SELECT sum(cump * production_compsition.quantity) AS cost
                                FROM  commercial_product_stock_warehouse INNER JOIN
                                      production_compsition ON commercial_product_stock_warehouse.product = production_compsition.component
                                WHERE production_compsition.composite = IdComponent and warehouse =  c_IdWarehouse), 0);
        call production_insert_cump_product_stockOnCostChanged(null, IdComponent, c_IdWarehouse, c_cost);
        set done=done_holder;
      end if;
    until done end repeat;
  close c;

  INSERT INTO production_product_cost (product, `date`, cost, piece_type, piece, piece_line, note)
  VALUES (IdComponent, now(), c_cost, p_piece_type, p_piece, p_piece_line, p_note);
  
  
  set done=0;
  open c;
  repeat
    fetch c into c_IdWarehouse;
      if not done then
        set done_holder=done;
        call production_insert_cump_product_stockOnCostChanged(lastId, IdComponent, c_IdWarehouse, c_cost);
        set done=done_holder;
      end if;
    until done end repeat;
  close c;
end if;
set done=0;
open composit_cursor;
repeat
fetch composit_cursor into c_IdComposite;
if not done then
set done_holder=done;
call production_setProductCost(c_IdComposite, p_piece_type, p_piece, p_piece_line, p_note);
set done=done_holder;
end if;
until done end repeat;
close composit_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostByPOS_credit_order` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostByPOS_credit_order`(IdShipping int)
BEGIN
declare c_IdProduct int;
declare c_line int;
declare done int default 0;
declare done_holder int;
declare product_cursor cursor for
SELECT        production_compsition.composite AS product, pos_credit_order_line.Id
FROM            pos_credit_order_line INNER JOIN
production_compsition ON pos_credit_order_line.product = production_compsition.component
WHERE        (pos_credit_order_line.piece = IdShipping)
GROUP BY production_compsition.composite;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set done=0;
open product_cursor;
repeat
fetch product_cursor into c_IdProduct, c_line;
if not done then
set done_holder=done;
call production_setProductCost(c_IdProduct, 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdShipping, c_line, 'Entree Bon d Entree Matiere Premiere');
set done=done_holder;
end if;
until done end repeat;
close product_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostByPurchase_credit_invoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostByPurchase_credit_invoice`(IdShipping int)
BEGIN
declare c_IdProduct int;
declare c_line int;
declare done int default 0;
declare done_holder int;
declare product_cursor cursor for
SELECT        production_compsition.composite AS product, purchase_credit_invoice_line.Id
FROM            purchase_credit_invoice_line INNER JOIN
production_compsition ON purchase_credit_invoice_line.product = production_compsition.component
WHERE        (purchase_credit_invoice_line.piece = IdShipping)
GROUP BY production_compsition.composite;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set done=0;
open product_cursor;
repeat
fetch product_cursor into c_IdProduct, c_line;
if not done then
set done_holder=done;
call production_setProductCost(c_IdProduct, 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdShipping, c_line, 'Entree Bon d Entree Matiere Premiere');
set done=done_holder;
end if;
until done end repeat;
close product_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostByPurchase_shipping_return` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostByPurchase_shipping_return`(IdShipping int)
BEGIN
declare c_IdProduct int;
declare c_line int;
declare done int default 0;
declare done_holder int;
declare product_cursor cursor for
SELECT        production_compsition.composite AS product, purchase_shipping_return_line.Id
FROM            purchase_shipping_return_line INNER JOIN
production_compsition ON purchase_shipping_return_line.product = production_compsition.component
WHERE        (purchase_shipping_return_line.piece = IdShipping)
GROUP BY production_compsition.composite;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set done=0;
open product_cursor;
repeat
fetch product_cursor into c_IdProduct, c_line;
if not done then
set done_holder=done;
call production_setProductCost(c_IdProduct, 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdShipping, c_line, 'Entree Bon d Entree Matiere Premiere');
set done=done_holder;
end if;
until done end repeat;
close product_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostBySale_credit_invoice` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostBySale_credit_invoice`(IdShipping int)
BEGIN
declare c_IdProduct int;
declare c_line int;
declare done int default 0;
declare done_holder int;
declare product_cursor cursor for
SELECT        production_compsition.composite AS product, sale_credit_invoice_line.Id
FROM            sale_credit_invoice_line INNER JOIN
production_compsition ON sale_credit_invoice_line.product = production_compsition.component
WHERE        (sale_credit_invoice_line.piece = IdShipping)
GROUP BY production_compsition.composite;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set done=0;
open product_cursor;
repeat
fetch product_cursor into c_IdProduct, c_line;
if not done then
set done_holder=done;
call production_setProductCost(c_IdProduct, 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdShipping, c_line, 'Entree Bon d Entree Matiere Premiere');
set done=done_holder;
end if;
until done end repeat;
close product_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostBySale_shipping_return` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostBySale_shipping_return`(IdShipping int)
BEGIN
declare c_IdProduct int;
declare c_line int;
declare done int default 0;
declare done_holder int;
declare product_cursor cursor for
SELECT        production_compsition.composite AS product, sale_shipping_return_line.Id
FROM            sale_shipping_return_line INNER JOIN
production_compsition ON sale_shipping_return_line.product = production_compsition.component
WHERE        (sale_shipping_return_line.piece = IdShipping)
GROUP BY production_compsition.composite;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set done=0;
open product_cursor;
repeat
fetch product_cursor into c_IdProduct, c_line;
if not done then
set done_holder=done;
call production_setProductCost(c_IdProduct, 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdShipping, c_line, 'Entree Bon d Entree Matiere Premiere');
set done=done_holder;
end if;
until done end repeat;
close product_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostByShipping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostByShipping`(IdShipping int)
BEGIN
declare c_IdProduct int;
declare c_line int;
declare done int default 0;
declare done_holder int;
declare product_cursor cursor for
SELECT        production_compsition.composite AS product, purchase_shipping_line.Id
FROM            purchase_shipping_line INNER JOIN
production_compsition ON purchase_shipping_line.product = production_compsition.component
WHERE        (purchase_shipping_line.piece = IdShipping)
GROUP BY production_compsition.composite;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set done=0;
open product_cursor;
repeat
fetch product_cursor into c_IdProduct, c_line;
if not done then
set done_holder=done;
call production_setProductCost(c_IdProduct, 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdShipping, c_line, 'Entree Bon de Reception Matiere Premiere');
set done=done_holder;
end if;
until done end repeat;
close product_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostByStock_entry` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostByStock_entry`(IdShipping int)
BEGIN
declare c_IdProduct int;
declare c_line int;
declare done int default 0;
declare done_holder int;
declare product_cursor cursor for
SELECT        production_compsition.composite AS product, commercial_stock_entry_line.Id
FROM            commercial_stock_entry_line INNER JOIN
production_compsition ON commercial_stock_entry_line.product = production_compsition.component
WHERE        (commercial_stock_entry_line.piece = IdShipping)
GROUP BY production_compsition.composite;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
set done=0;
open product_cursor;
repeat
fetch product_cursor into c_IdProduct, c_line;
if not done then
set done_holder=done;
call production_setProductCost(c_IdProduct, 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdShipping, c_line, 'Entree Bon d Entree Matiere Premiere');
set done=done_holder;
end if;
until done end repeat;
close product_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `production_setProductCostOnChangeComposition` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `production_setProductCostOnChangeComposition`(IdComponent int, p_piece_type varchar(100), p_piece int, p_piece_line int, p_note varchar(100))
BEGIN
declare c_IdWarehouse int;
declare c_IdComposite int;
declare lastId int;
declare c_cost decimal(15,5);
declare done int default 0;
declare done_holder int;
declare c cursor for
select Id
from commercial_warehouse;
declare composit_cursor cursor for
select composite
from production_compsition
where component = IdComponent;
declare continue handler for sqlstate '02000' set done=1;
SET max_sp_recursion_depth=255;
if(is_composite(IdComponent)) then

  
  
  set done=0;
  open c;
  repeat
    fetch c into c_IdWarehouse;
      if not done then
        set done_holder=done;
        set c_cost = coalesce((SELECT sum(cump * production_compsition.quantity) AS cost
                                FROM  commercial_product_stock_warehouse INNER JOIN
                                      production_compsition ON commercial_product_stock_warehouse.product = production_compsition.component
                                WHERE production_compsition.composite = IdComponent and warehouse =  c_IdWarehouse), 0);
        call production_insert_cump_product_stockOnCostChanged(null, IdComponent, c_IdWarehouse, c_cost);
        set done=done_holder;
      end if;
    until done end repeat;
  close c;

  INSERT INTO production_product_cost (product, `date`, cost, piece_type, piece, piece_line, note)
  VALUES (IdComponent, now(), c_cost, p_piece_type, p_piece, p_piece_line, p_note);

end if;
set done=0;
open composit_cursor;
repeat
fetch composit_cursor into c_IdComposite;
if not done then
set done_holder=done;
call production_setProductCostOnChangeComposition(c_IdComposite, p_piece_type, p_piece, p_piece_line, p_note);
set done=done_holder;
end if;
until done end repeat;
close composit_cursor;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `product_stock_test` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `product_stock_test`(IdProduct int, Idwarehouse int, Quantity1 decimal)
BEGIN
declare quantity decimal default 0;
SELECT        actual_stock into quantity
FROM            commercial_product_stock
WHERE        (product = IdProduct) AND (warehouse = Idwarehouse) AND (Id =
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (product = IdProduct) AND (warehouse = Idwarehouse)));
insert into commercial_product_stock (piece_line, actual_stock, product,piece_type , piece, `action`, warehouse)
values (1,quantity+Quantity1, IdProduct, 'test_type',1,'test2', IdWarehouse);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `setDefaultUser_module_group` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `setDefaultUser_module_group`()
BEGIN
DECLARE done INT DEFAULT FALSE;
declare c_User int;
declare cursorUser cursor for
SELECT        Id
FROM            atooerp_user;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
open cursorUser;
read_loop: LOOP
fetch cursorUser into c_User;
IF done THEN
LEAVE read_loop;
END IF;
call setDefaultUser_module_group_byUser(c_User);
END LOOP;
close cursorUser;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SetDefaultUser_module_group_byUser` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `SetDefaultUser_module_group_byUser`(c_User int)
BEGIN
DECLARE done INT DEFAULT FALSE;
declare c_Module int;
declare counter int default 0;
declare c_Group int default 0;
declare cursorModule cursor for
SELECT        Id
FROM            atooerp_module;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
open cursorModule;
read_loop: LOOP
fetch cursorModule into c_Module;
IF done THEN
LEAVE read_loop;
END IF;
set counter= (select count(Id) from atooerp_user_module_group
where `user`=c_User and module=c_Module);
if (counter=0) then
set c_Group=(select Id from atooerp_group where module=c_Module limit 1);
insert into atooerp_user_module_group (`user`, module,`group`) values (c_User,c_Module,c_Group);
end if;
END LOOP;
close cursorModule;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `setDelivred` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `setDelivred`(pieceType varchar(255), IdPiece int)
BEGIN
declare delivredStatus bool default false;
declare lineCount int default 0;
declare IdOrder int default 0;
declare IdInvoice int default 0;
declare IdCredit_invoice int default 0;
SET max_sp_recursion_depth=255;

case pieceType
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set lineCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT purchase_invoice_line.Id, purchase_invoice_line.product, purchase_invoice_line.description, purchase_invoice_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 purchase_invoice_line.tax1, purchase_invoice_line.tax2, purchase_invoice_line.tax3, purchase_invoice_line.tax4, purchase_invoice_line.tax5
                  FROM      purchase_invoice LEFT OUTER JOIN
                                    purchase_invoice_line ON purchase_invoice.Id = purchase_invoice_line.piece
                  WHERE   (purchase_invoice.Id = IdPiece)
union
SELECT purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.description, 0 as quantity, -purchase_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_line.tax1, purchase_shipping_line.tax2, purchase_shipping_line.tax3, purchase_shipping_line.tax4,
                                    purchase_shipping_line.tax5
                  FROM      purchase_shipping LEFT OUTER JOIN
                                    purchase_shipping_line ON purchase_shipping.Id = purchase_shipping_line.piece
                  WHERE   (purchase_shipping.invoice = IdPiece)
union
SELECT purchase_shipping_return_line.Id, purchase_shipping_return_line.product, purchase_shipping_return_line.description, 0 as quantity, purchase_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_return_line.tax1, purchase_shipping_return_line.tax2, purchase_shipping_return_line.tax3, purchase_shipping_return_line.tax4,
                                    purchase_shipping_return_line.tax5
                  FROM      purchase_shipping_return LEFT OUTER JOIN
                                    purchase_shipping_return_line ON purchase_shipping_return.Id = purchase_shipping_return_line.piece
                  WHERE   (purchase_shipping_return.invoice = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );

if (lineCount>0) then
update purchase_invoice set delivred = 0 where Id=IdPiece;
else
update purchase_invoice set delivred = 1 where Id=IdPiece;
end if;

when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set lineCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT purchase_order_line.Id, purchase_order_line.product, purchase_order_line.description, purchase_order_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 purchase_order_line.tax1, purchase_order_line.tax2, purchase_order_line.tax3, purchase_order_line.tax4, purchase_order_line.tax5
                  FROM      purchase_order LEFT OUTER JOIN
                                    purchase_order_line ON purchase_order.Id = purchase_order_line.piece
                  WHERE   (purchase_order.Id = IdPiece)
union
SELECT purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.description, 0 as quantity, -purchase_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_line.tax1, purchase_shipping_line.tax2, purchase_shipping_line.tax3, purchase_shipping_line.tax4,
                                    purchase_shipping_line.tax5
                  FROM      purchase_shipping LEFT OUTER JOIN
                                    purchase_shipping_line ON purchase_shipping.Id = purchase_shipping_line.piece
                  WHERE   (purchase_shipping.`order` = IdPiece)
union
SELECT purchase_shipping_return_line.Id, purchase_shipping_return_line.product, purchase_shipping_return_line.description, 0 as quantity, purchase_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_return_line.tax1, purchase_shipping_return_line.tax2, purchase_shipping_return_line.tax3, purchase_shipping_return_line.tax4,
                                    purchase_shipping_return_line.tax5
                  FROM      purchase_shipping_return LEFT OUTER JOIN
                                    purchase_shipping_return_line ON purchase_shipping_return.Id = purchase_shipping_return_line.piece
                  WHERE   (purchase_shipping_return.`order` = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );

if (lineCount>0) then
update purchase_order set delivred = 0 where Id=IdPiece;
else
update purchase_order set delivred = 1 where Id=IdPiece;
end if;

when 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set lineCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT purchase_credit_invoice_line.Id, purchase_credit_invoice_line.product, purchase_credit_invoice_line.description, purchase_credit_invoice_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 purchase_credit_invoice_line.tax1, purchase_credit_invoice_line.tax2, purchase_credit_invoice_line.tax3, purchase_credit_invoice_line.tax4, purchase_credit_invoice_line.tax5
                  FROM      purchase_credit_invoice LEFT OUTER JOIN
                                    purchase_credit_invoice_line ON purchase_credit_invoice.Id = purchase_credit_invoice_line.piece
                  WHERE   (purchase_credit_invoice.Id = IdPiece)
union
SELECT purchase_shipping_return_line.Id, purchase_shipping_return_line.product, purchase_shipping_return_line.description, 0 as quantity, -purchase_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, purchase_shipping_return_line.tax1, purchase_shipping_return_line.tax2, purchase_shipping_return_line.tax3, purchase_shipping_return_line.tax4,
                                    purchase_shipping_return_line.tax5
                  FROM      purchase_shipping_return LEFT OUTER JOIN
                                    purchase_shipping_return_line ON purchase_shipping_return.Id = purchase_shipping_return_line.piece
                  WHERE   (purchase_shipping_return.credit_invoice = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );

if (lineCount>0) then
update purchase_credit_invoice set delivred = 0 where Id=IdPiece;
else
update purchase_credit_invoice set delivred = 1 where Id=IdPiece;
end if;

when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then

select `order`, invoice into IdOrder, IdInvoice
from purchase_shipping
where Id = IdPiece;

if(IdOrder > 0) then
  call setDelivred('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
end if;

if(IdInvoice > 0) then
  call setDelivred('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdInvoice);
end if;


when 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then

select `order`, invoice, credit_invoice into IdOrder, IdInvoice, IdCredit_invoice
from purchase_shipping_return
where Id = IdPiece;

if(IdOrder > 0) then
  call setDelivred('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
end if;

if(IdInvoice > 0) then
  call setDelivred('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdInvoice);
end if;

if(IdCredit_invoice > 0) then
  call setDelivred('Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdCredit_invoice);
end if;



when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set lineCount = (select count(*) from (  select product, description, commercial_product.Id, sum(quantity) as quantity, sum(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + sum(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT sale_invoice_line.Id, sale_invoice_line.product, sale_invoice_line.description, sale_invoice_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 sale_invoice_line.tax1, sale_invoice_line.tax2, sale_invoice_line.tax3, sale_invoice_line.tax4, sale_invoice_line.tax5
                  FROM      sale_invoice LEFT OUTER JOIN
                                    sale_invoice_line ON sale_invoice.Id = sale_invoice_line.piece
                  WHERE   (sale_invoice.Id = IdPiece)
union
SELECT sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.description, 0 as quantity, -sale_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_line.tax1, sale_shipping_line.tax2, sale_shipping_line.tax3, sale_shipping_line.tax4,
                                    sale_shipping_line.tax5
                  FROM      sale_shipping LEFT OUTER JOIN
                                    sale_shipping_line ON sale_shipping.Id = sale_shipping_line.piece
                  WHERE   (sale_shipping.invoice = IdPiece)
union
SELECT pos_order_line.Id, pos_order_line.product, pos_order_line.description, 0 as quantity, -pos_order_line.quantity as delivredQuantity,
price, discount, tax1_base, pos_order_line.tax1, pos_order_line.tax2, pos_order_line.tax3, pos_order_line.tax4,
                                    pos_order_line.tax5
                  FROM      pos_order LEFT OUTER JOIN
                                    pos_order_line ON pos_order.Id = pos_order_line.piece
                  WHERE   (pos_order.invoice = IdPiece)
union
SELECT sale_shipping_return_line.Id, sale_shipping_return_line.product, sale_shipping_return_line.description, 0 as quantity, sale_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_return_line.tax1, sale_shipping_return_line.tax2, sale_shipping_return_line.tax3, sale_shipping_return_line.tax4,
                                    sale_shipping_return_line.tax5
                  FROM      sale_shipping_return LEFT OUTER JOIN
                                    sale_shipping_return_line ON sale_shipping_return.Id = sale_shipping_return_line.piece
                  WHERE   (sale_shipping_return.invoice = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0)
) tab );


if (lineCount>0) then
update sale_invoice set delivred = 0 where Id=IdPiece;
else
update sale_invoice set delivred = 1 where Id=IdPiece;
end if;


when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


set lineCount = (select count(*) from ( select product, description, commercial_product.Id, sum(quantity) as quantity, SUM(shipping.delivredQuantity) AS delivredQuantity, sum(quantity) + SUM(shipping.delivredQuantity) AS unDelivredQuantity,
price, discount, tax1_base, tax1, tax2, tax3, tax4, tax5, commercial_unite.name AS uniteName, commercial_product.tare, commercial_product_tare.weight AS tare_weight
from
(SELECT sale_order_line.Id, sale_order_line.product, sale_order_line.description, sale_order_line.quantity, 0 as delivredQuantity,
price, discount, tax1_base,
 sale_order_line.tax1, sale_order_line.tax2, sale_order_line.tax3, sale_order_line.tax4, sale_order_line.tax5
                  FROM      sale_order LEFT OUTER JOIN
                                    sale_order_line ON sale_order.Id = sale_order_line.piece
                  WHERE   (sale_order.Id = IdPiece)
union
SELECT sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.description, 0 as quantity, -sale_shipping_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_line.tax1, sale_shipping_line.tax2, sale_shipping_line.tax3, sale_shipping_line.tax4,
                                    sale_shipping_line.tax5
                  FROM      sale_shipping LEFT OUTER JOIN
                                    sale_shipping_line ON sale_shipping.Id = sale_shipping_line.piece
                  WHERE   (sale_shipping.`order` = IdPiece)
union
SELECT pos_order_line.Id, pos_order_line.product, pos_order_line.description, 0 as quantity, -pos_order_line.quantity as delivredQuantity,
price, discount, tax1_base, pos_order_line.tax1, pos_order_line.tax2, pos_order_line.tax3, pos_order_line.tax4,
                                    pos_order_line.tax5
                  FROM      pos_order LEFT OUTER JOIN
                                    pos_order_line ON pos_order.Id = pos_order_line.piece left join
                                   sale_invoice on sale_invoice.Id = invoice
                  WHERE   (sale_invoice.`order` = IdPiece)
union
SELECT sale_shipping_return_line.Id, sale_shipping_return_line.product, sale_shipping_return_line.description, 0 as quantity, sale_shipping_return_line.quantity as delivredQuantity,
price, discount, tax1_base, sale_shipping_return_line.tax1, sale_shipping_return_line.tax2, sale_shipping_return_line.tax3, sale_shipping_return_line.tax4,
                                    sale_shipping_return_line.tax5
                  FROM      sale_shipping_return LEFT OUTER JOIN
                                    sale_shipping_return_line ON sale_shipping_return.Id = sale_shipping_return_line.piece
                  WHERE   (sale_shipping_return.`order` = IdPiece)) shipping left join
 commercial_product ON commercial_product.Id = product LEFT OUTER JOIN
                  commercial_unite ON commercial_unite.Id = commercial_product.unite LEFT OUTER JOIN
                  commercial_product_tare ON commercial_product_tare.Id = commercial_product.tare
GROUP BY CONCAT(product, tax1_base)
HAVING (unDelivredQuantity <> 0) ) tab );


if (lineCount>0) then
update sale_order set delivred = 0 where Id=IdPiece;
else
update sale_order set delivred = 1 where Id=IdPiece;
end if;


when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


select `order`, invoice into IdOrder, IdInvoice
from sale_shipping
where Id = IdPiece;

if(IdOrder > 0) then
  call setDelivred('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
end if;

if(IdInvoice > 0) then
  call setDelivred('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdInvoice);
end if;


when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then


select invoice into IdInvoice
from pos_order
where Id = IdPiece;

if(IdOrder > 0) then
  call setDelivred('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
end if;

if(IdInvoice > 0) then
  call setDelivred('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdInvoice);
  select `order` into IdOrder  from sale_invoice where Id = IdInvoice;
  if(IdOrder > 0) then
    call setDelivred('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
  end if;
end if;



when 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then

select `order`, invoice, credit_invoice into IdOrder, IdInvoice, IdCredit_invoice
from sale_shipping_return
where Id = IdPiece;

if(IdOrder > 0) then
  call setDelivred('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
end if;

if(IdInvoice > 0) then
  call setDelivred('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdInvoice);
end if;

if(IdCredit_invoice > 0) then
  call setDelivred('Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdCredit_invoice);
end if;



else
set delivredStatus =0;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SetPaymentToPieceByPiece` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `SetPaymentToPieceByPiece`(pieceType varchar(255),  IdPiece int)
BEGIN
declare amountByShipping decimal(15,5) default 0;
DECLARE done INT DEFAULT FALSE;
declare c_Id int;
declare c_total_amount decimal(15,5) default 0;
declare c_paied_amount decimal(15,5) default 0;
declare c_invoice_paied_amount decimal(15,5) default 0;
declare c_shipping_paied_amount decimal(15,5) default 0;
declare c_rest_amount decimal(15,5) default 0;

DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
SET max_sp_recursion_depth=255;

case pieceType
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece IN (select Id from purchase_order where invoice = IdPiece) and piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where invoice = IdPiece) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping_return where invoice = IdPiece) and piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where `order` = (select `order` from purchase_invoice where Id = IdPiece and `order`<>0)) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
update purchase_invoice set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;
update purchase_order set paied_amount = c_invoice_paied_amount where Id = (select `order` from purchase_invoice where Id = IdPiece) and validated = 1;
call SetPayment_pieceToShipping(pieceType , IdPiece);
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set amountByShipping = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = (select invoice from purchase_shipping where Id = IdPiece) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from purchase_shipping where Id = IdPiece) and (piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from purchase_invoice where (Id = (select invoice from purchase_shipping where Id = IdPiece and invoice<>0)) and `order`<>0) and (piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from purchase_invoice where (`order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<>0))) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = (select coalesce(sum(amount), 0.00000) from commercial_payment_piece
where ((piece = IdPiece)
or (piece IN (select Id from purchase_shipping where invoice = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0)))
or (piece IN (select Id from purchase_shipping where invoice = (select Id from purchase_invoice where `order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<> 0))))
or (piece IN (select Id from purchase_shipping where `order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<> 0)))
or (piece IN (select Id from purchase_shipping where `order` = (select `order` from purchase_invoice where Id = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0) and `order`<>0))))
and (piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
and (select validated from commercial_payment where Id = payment) = 1);
update purchase_invoice set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0))
or ((`order` = (select `order` from purchase_shipping where Id = IdPiece and `order`<>0))) and validated = 1;
update purchase_order set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select `order` from purchase_shipping where Id = IdPiece and `order`<> 0))
or (Id = (select `order` from purchase_invoice where Id = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0) and `order`<>0)) and validated = 1;
call SetPayment_pieceToShipping(pieceType , IdPiece);
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select Id from purchase_invoice where `order` = IdPiece) and piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping_return where `order` = IdPiece) and piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where `order` = IdPiece) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from purchase_shipping where invoice = (select Id from purchase_invoice where `Order` = IdPiece)) and piece_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
update purchase_order set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;
update purchase_invoice set paied_amount = c_invoice_paied_amount where `order` = IdPiece and validated = 1;
call SetPayment_pieceToShipping(pieceType , IdPiece);
when 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType)
and (select validated from commercial_payment where Id = payment) = 1);
update purchase_shipping_return set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;

begin
  declare IdInvoice int default 0;
  declare IdOrder int default 0;
  select invoice, `order` into IdInvoice, IdOrder from purchase_shipping_return where Id = IdPiece;
  if(IdOrder>0) then
    call SetPaymentToPieceByPiece('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
  end if;
  if(IdInvoice>0) then
    call SetPaymentToPieceByPiece('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdInvoice);
  end if;
end;


when 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece IN (select Id from purchase_shipping_return where credit_invoice = IdPiece) and piece_type = 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
update purchase_credit_invoice set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;

when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece in (select Id from sale_order where invoice = IdPiece) and piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping_return where invoice = IdPiece) and piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where invoice = IdPiece) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where `order` = (select `order` from sale_invoice where Id = IdPiece and `order`<>0)) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from pos_order where invoice = IdPiece) and piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = c_invoice_paied_amount +  (select coalesce(sum(amount),0.00000) from pos_offer
where (piece IN (select Id from pos_order where invoice = IdPiece)));
update sale_invoice set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;
update sale_order set paied_amount = c_invoice_paied_amount where Id = (select `order` from sale_invoice where Id = IdPiece and `order` <> 0) and validated = 1;
call SetPayment_pieceToShipping(pieceType , IdPiece);
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set amountByShipping = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = (select invoice from sale_shipping where Id = IdPiece) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from sale_shipping where Id = IdPiece) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from sale_invoice where (Id = (select invoice from sale_shipping where Id = IdPiece and invoice<>0)) and `order`<>0) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from sale_invoice where (`order` = (select `order` from sale_shipping where Id = IdPiece and `order`<>0))) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select invoice from pos_order where (invoice = ((select invoice from sale_shipping where Id = IdPiece and invoice <> 0) or (select Id from sale_invoice where `order` IN (select `order` from sale_shipping where Id = IdPiece and `order` <> 0))))) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((((piece = IdPiece)
or (piece IN (select Id from sale_shipping where invoice = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0)))
or (piece IN (select Id from sale_shipping where invoice = (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order`<> 0))))
or (piece IN (select Id from sale_shipping where `order` = (select `order` from sale_shipping where Id = IdPiece and `order`<> 0)))
or (piece IN (select Id from sale_shipping where `order` = (select `order` from sale_invoice where Id = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0) and `order`<>0))))
and (piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (
(piece IN (select Id from pos_order where invoice = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0)))
or (piece IN (select Id from pos_order where invoice = (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0))))
and (piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = c_invoice_paied_amount + (select coalesce(sum(amount),0.00000) from pos_offer
where (piece IN (select Id from pos_order where (invoice = ((select invoice from sale_shipping where Id = IdPiece and invoice <> 0) or (select Id from pos_order where invoice = (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0))))))));
update sale_invoice set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0))
or ((`order` = (select `order` from sale_shipping where Id = IdPiece and `order`<>0))) and validated = 1;
update sale_order set paied_amount = amountByShipping + c_invoice_paied_amount
where (Id = (select `order` from sale_shipping where Id = IdPiece and `order`<> 0))
or (Id = (select `order` from sale_invoice where Id = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0) and `order`<>0)) and validated = 1;
call SetPayment_pieceToShipping(pieceType , IdPiece);
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select Id from sale_invoice where `order` = IdPiece) and piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping_return where `order` = IdPiece) and piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where `order` = IdPiece) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from sale_shipping where invoice = (select Id from sale_invoice where `order` = IdPiece)) and piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')
or (piece IN (select Id from pos_order where invoice = (select Id from sale_invoice where `order` = IdPiece)) and piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = c_invoice_paied_amount + (select coalesce(sum(amount),0.00000) from pos_offer
where (piece IN (select Id from pos_order where invoice = (select Id from sale_invoice where `order` = IdPiece))));
update sale_order set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;
update sale_invoice set paied_amount = c_invoice_paied_amount where `order` = IdPiece and validated = 1;
call SetPayment_pieceToShipping(pieceType , IdPiece);
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if( select count(*) from pos_order where Id = IdPiece and invoice > 0 ) then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = (select invoice from pos_order where Id = IdPiece and invoice<>0) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select `order` from sale_invoice where (Id = (select invoice from pos_order where Id = IdPiece and invoice <> 0)) and `order`<> 0) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece IN (select Id from pos_order where invoice = (select invoice from pos_order where Id = IdPiece and invoice <> 0)) and (piece_type = 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece IN (select Id from sale_shipping where invoice = (select invoice from pos_order where Id = IdPiece and invoice <> 0) or `order` = (select `order` from sale_invoice where Id = (select invoice from pos_order where Id = IdPiece and invoice<>0)and `order` <> 0)) and (piece_type = 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
set c_invoice_paied_amount = c_invoice_paied_amount + (select coalesce(sum(amount),0.00000) from pos_offer where piece = IdPiece);
update sale_order set paied_amount = c_invoice_paied_amount where Id = (select `order` from sale_invoice where Id = (select invoice from pos_order where Id = IdPiece and invoice <> 0)) and validated = 1;
update sale_invoice set paied_amount = c_invoice_paied_amount where Id = (select invoice from pos_order where Id = IdPiece and invoice <> 0) and validated = 1;
call SetPayment_pieceToShipping(pieceType , IdPiece);
else
set c_invoice_paied_amount = (select coalesce(sum(commercial_payment_piece.amount),0)
                              from commercial_payment_piece JOIN
                              commercial_payment on commercial_payment.Id = payment
                              where validated = 1 and piece = IdPiece  and commercial_payment_piece.piece_type = pieceType);
update pos_order set paied_amount = c_invoice_paied_amount WHERE Id = IdPiece;
end if;
when 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType)
and (select validated from commercial_payment where Id = payment) = 1);
update sale_shipping_return set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;

begin
  declare IdInvoice int default 0;
  declare IdOrder int default 0;
  select invoice, `order` into IdInvoice, IdOrder from sale_shipping_return where Id = IdPiece;
  if(IdOrder>0) then
    call SetPaymentToPieceByPiece('Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdOrder);
  end if;
  if(IdInvoice>0) then
    call SetPaymentToPieceByPiece('Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', IdInvoice);
  end if;
end;
when 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece IN (select Id from sale_shipping_return where credit_invoice = IdPiece) and piece_type = 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and (select validated from commercial_payment where Id = payment) = 1);
update sale_credit_invoice set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;

when 'HR.Deposit, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType));
update hr_deposit set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;
when 'HR.Pay_slip, HR, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType));
update hr_pay_slip set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;
when 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(-sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType));
update sale_credit_invoice set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;
when 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set c_invoice_paied_amount = (select coalesce(-sum(amount),0.00000) from commercial_payment_piece
where (piece = IdPiece and piece_type = pieceType));
update purchase_credit_invoice set paied_amount = c_invoice_paied_amount where Id = IdPiece and validated = 1;


else set done=0 ;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SetPaymentToPieces` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `SetPaymentToPieces`(newId int)
BEGIN
DECLARE done INT DEFAULT FALSE;
declare c_Id int;
declare c_amount decimal(15,5) default 0;
declare c_piece_type varchar(255);
declare c_piece int;
declare shipping_count int default 0;
declare pos_order_count int default 0;
declare cursorPayment_piece cursor for
SELECT        Id, amount,  piece_type, piece
FROM            commercial_payment_piece
WHERE        (commercial_payment_piece.payment = newId);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
open cursorPayment_piece;
read_loop: LOOP
fetch cursorPayment_piece into c_Id, c_amount, c_piece_type, c_piece;
IF done THEN
LEAVE read_loop;
END IF;
call SetPaymentToPieceByPiece(c_piece_type, c_piece);
END LOOP;
close cursorPayment_piece;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SetPaymentToPiecesByRange` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `SetPaymentToPiecesByRange`(minId int, maxId int)
BEGIN
DECLARE done INT DEFAULT FALSE;
declare c_Id int;
declare c_amount decimal(15,5) default 0;
declare c_piece_type varchar(255);
declare c_piece int;
declare shipping_count int default 0;
declare pos_order_count int default 0;
declare cursorPayment_piece cursor for
SELECT        Id, amount,  piece_type, piece
FROM            commercial_payment_piece
WHERE        (commercial_payment_piece.payment >= minId and commercial_payment_piece.payment <= maxId);
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
open cursorPayment_piece;
read_loop: LOOP
fetch cursorPayment_piece into c_Id, c_amount, c_piece_type, c_piece;
IF done THEN
LEAVE read_loop;
END IF;
call SetPaymentToPieceByPiece(c_piece_type, c_piece);
END LOOP;
close cursorPayment_piece;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `SetPayment_pieceToShipping` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `SetPayment_pieceToShipping`(pieceType varchar(255), IdPiece int)
BEGIN
DECLARE done INT DEFAULT FALSE;
declare c_Id int;
declare paymentAmount decimal(15,5) default 0;
declare c_total_amount decimal(15,5) default 0;
declare c_paied_amount decimal(15,5) default 0;
declare c_rest_amount decimal(15,5) default 0;
declare cursorShipping_purchase_invoice cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            purchase_shipping
where (invoice = IdPiece or((`order`=(select `order` from purchase_invoice where Id=IdPiece and `order`<>0)))) and purchase_shipping.validated=1
order by `date`;
declare cursorShipping_purchase_order cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            purchase_shipping
where (`order` = IdPiece or ((invoice = (select Id from purchase_invoice where `order` = IdPiece)))) and purchase_shipping.validated=1
order by `date`;
declare cursorShipping_purchase_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            purchase_shipping
where ((invoice = (select invoice from purchase_shipping where Id = IdPiece and invoice <> 0))
or (`order` = (select `order` from purchase_shipping where Id = IdPiece and `order` <> 0))
or (Id = IdPiece))
and purchase_shipping.validated=1
order by `date`;
declare cursorShipping_sale_invoice cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            sale_shipping
where (invoice = IdPiece or((`order`=(select `order` from sale_invoice where Id=IdPiece and `order`<>0)))) and sale_shipping.validated=1
order by `date`;
declare cursorShipping_sale_order cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            sale_shipping
where (`order` = IdPiece or ((invoice = (select Id from sale_invoice where `order` = IdPiece)))) and sale_shipping.validated=1
order by `date`;
declare cursorShipping_sale_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            sale_shipping
where ((invoice = (select invoice from sale_shipping where Id = IdPiece and invoice <> 0))
or (`order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0))
or (Id = IdPiece))
and sale_shipping.validated=1
order by `date`;
declare cursorShipping_pos_order cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            sale_shipping
where ((invoice = (select invoice from pos_order where Id = IdPiece and invoice <> 0)))
and sale_shipping.validated=1
order by `date`;
declare cursorPos_order_sale_invoice cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            pos_order
where (invoice = IdPiece) and validated=1
order by `date`;
declare cursorPos_order_sale_order cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            pos_order
where (invoice = (select Id from sale_invoice where `order` = IdPiece)) and validated=1
order by `date`;
declare cursorPos_order_Pos_order cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            pos_order
where (invoice = (select invoice from pos_order where Id = IdPiece and invoice <> 0) or Id = IdPiece) 
order by `date`;
declare cursorPos_order_sale_shipping cursor for
SELECT        Id, total_amount, paied_amount, total_amount-paied_amount as restAmount
FROM            pos_order
where (invoice = ((select invoice from sale_shipping where Id = IdPiece and invoice <> 0) or (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0)))) and validated=1
order by `date`;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
case pieceType
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set paymentAmount = (select coalesce(sum(amount),0) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select `order` from purchase_invoice where Id = IdPiece  and `order` <> 0) and piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and ((select validated from commercial_payment where Id = payment) = 1));
open cursorShipping_purchase_invoice;
read_loop: LOOP
fetch cursorShipping_purchase_invoice into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set c_rest_amount = c_total_amount - c_paied_amount;
update purchase_shipping set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update purchase_shipping set paied_amount = purchase_shipping.paied_amount + paymentAmount  where (purchase_shipping.Id = c_Id);
set paymentAmount=0;
ELSE
update purchase_shipping set paied_amount = purchase_shipping.paied_amount + c_rest_amount  where (purchase_shipping.Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorShipping_purchase_invoice;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set paymentAmount = (select coalesce(sum(amount),0) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select Id from purchase_invoice where `order` = IdPiece and `order` <> 0) and piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and ((select validated from commercial_payment where Id = payment) = 1));
open cursorShipping_purchase_order;
read_loop: LOOP
fetch cursorShipping_purchase_order into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set c_rest_amount = c_total_amount - c_paied_amount;
update purchase_shipping set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update purchase_shipping set paied_amount = purchase_shipping.paied_amount + paymentAmount  where (purchase_shipping.Id = c_Id);
set paymentAmount=0;
ELSE
update purchase_shipping set paied_amount = purchase_shipping.paied_amount + c_rest_amount  where (purchase_shipping.Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorShipping_purchase_order;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set paymentAmount = (select coalesce(sum(amount),0) from commercial_payment_piece
where ((piece = (select `order` from purchase_shipping where Id = IdPiece and `order` <>0) and (piece_type = 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select invoice from purchase_shipping where Id = IdPiece and invoice <>0) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from purchase_invoice where `order` = (select `order` from purchase_shipping where Id = IdPiece and `order` <> 0)) and (piece_type = 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
open cursorShipping_purchase_shipping;
read_loop: LOOP
fetch cursorShipping_purchase_shipping into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set c_rest_amount = c_total_amount - c_paied_amount;
update purchase_shipping set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update purchase_shipping set paied_amount = purchase_shipping.paied_amount + paymentAmount  where (purchase_shipping.Id = c_Id);
set paymentAmount=0;
ELSE
update purchase_shipping set paied_amount = purchase_shipping.paied_amount + c_rest_amount  where (purchase_shipping.Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorShipping_purchase_shipping;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set paymentAmount = (select coalesce(sum(amount),0) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select `order` from sale_invoice where Id = IdPiece  and `order` <> 0) and piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and ((select validated from commercial_payment where Id = payment) = 1));
open cursorShipping_sale_invoice;
read_loop: LOOP
fetch cursorShipping_sale_invoice into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set c_rest_amount = c_total_amount - c_paied_amount;
update sale_shipping set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update sale_shipping set paied_amount = sale_shipping.paied_amount + paymentAmount  where (sale_shipping.Id = c_Id);
set paymentAmount=0;
ELSE
update sale_shipping set paied_amount = sale_shipping.paied_amount + c_rest_amount  where (sale_shipping.Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorShipping_sale_invoice;
open cursorPos_order_sale_invoice;
read_loop: LOOP
fetch cursorPos_order_sale_invoice into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
+ (select coalesce(sum(amount),0) from pos_offer
where (piece = c_Id));
set c_rest_amount = c_total_amount - c_paied_amount;
update pos_order set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update pos_order set paied_amount = paied_amount + paymentAmount  where (Id = c_Id);
set paymentAmount=0;
ELSE
update pos_order set paied_amount = paied_amount + c_rest_amount  where (Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorPos_order_sale_invoice;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set paymentAmount = (select coalesce(sum(amount),0) from commercial_payment_piece
where ((piece = IdPiece and piece_type = pieceType)
or (piece = (select Id from sale_invoice where `order` = IdPiece and `order` <> 0) and piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
and ((select validated from commercial_payment where Id = payment) = 1));
open cursorShipping_sale_order;
read_loop: LOOP
fetch cursorShipping_sale_order into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set c_rest_amount = c_total_amount - c_paied_amount;
update sale_shipping set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update sale_shipping set paied_amount = sale_shipping.paied_amount + paymentAmount  where (sale_shipping.Id = c_Id);
set paymentAmount=0;
ELSE
update sale_shipping set paied_amount = sale_shipping.paied_amount + c_rest_amount  where (sale_shipping.Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorShipping_sale_order;
open cursorPos_order_sale_order;
read_loop: LOOP
fetch cursorPos_order_sale_order into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
+ (select coalesce(sum(amount),0) from pos_offer
where (piece = c_Id));
set c_rest_amount = c_total_amount - c_paied_amount;
update pos_order set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update pos_order set paied_amount = paied_amount + paymentAmount  where (Id = c_Id);
set paymentAmount=0;
ELSE
update pos_order set paied_amount = paied_amount + c_rest_amount  where (Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorPos_order_sale_order;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set paymentAmount = (select coalesce(sum(amount),0) from commercial_payment_piece
where ((piece = (select `order` from sale_shipping where Id = IdPiece and `order` <>0) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select invoice from sale_shipping where Id = IdPiece and invoice <>0) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select Id from sale_invoice where `order` = (select `order` from sale_shipping where Id = IdPiece and `order` <> 0)) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
open cursorShipping_sale_shipping;
read_loop: LOOP
fetch cursorShipping_sale_shipping into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set c_rest_amount = c_total_amount - c_paied_amount;
update sale_shipping set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update sale_shipping set paied_amount = sale_shipping.paied_amount + paymentAmount  where (sale_shipping.Id = c_Id);
set paymentAmount=0;
ELSE
update sale_shipping set paied_amount = sale_shipping.paied_amount + c_rest_amount  where (sale_shipping.Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorShipping_sale_shipping;
open cursorPos_order_sale_shipping;
read_loop: LOOP
fetch cursorPos_order_sale_shipping into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
update pos_order set paied_amount = (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
where (Id = c_Id);
update pos_order set paied_amount = paied_amount + (select coalesce(sum(amount),0) from pos_offer
where (piece = c_Id))
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update pos_order set paied_amount = paied_amount + paymentAmount  where (Id = c_Id);
set paymentAmount=0;
ELSE
update pos_order set paied_amount = paied_amount + c_rest_amount  where (Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorPos_order_sale_shipping;
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set paymentAmount = (select coalesce(sum(amount),0) from commercial_payment_piece
where ((piece = (select `order` from sale_invoice where Id = (select invoice from pos_order where Id = IdPiece and invoice <> 0)) and (piece_type = 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
or (piece = (select invoice from pos_order where Id = IdPiece and invoice <> 0) and (piece_type = 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null')))
and (select validated from commercial_payment where Id = payment) = 1);
open cursorShipping_pos_order;
read_loop: LOOP
fetch cursorShipping_pos_order into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'));
set c_rest_amount = c_total_amount - c_paied_amount;
update purchase_shipping set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update sale_shipping set paied_amount = sale_shipping.paied_amount + paymentAmount  where (sale_shipping.Id = c_Id);
set paymentAmount=0;
ELSE
update sale_shipping set paied_amount = sale_shipping.paied_amount + c_rest_amount  where (sale_shipping.Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorShipping_pos_order;
begin
DECLARE done1 INT DEFAULT FALSE;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done1 = TRUE;
open cursorPos_order_Pos_order;
read_loop: LOOP
fetch cursorPos_order_Pos_order into c_Id, c_total_amount, c_paied_amount, c_rest_amount;
IF done1 THEN
LEAVE read_loop;
END IF;
set c_paied_amount= (select coalesce(sum(amount),0) from commercial_payment_piece
where (piece = c_Id) and (piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'))
+ (select coalesce(sum(amount),0) from pos_offer
where (piece = c_Id));
set c_rest_amount = c_total_amount - c_paied_amount;
update pos_order set paied_amount = c_paied_amount
where (Id = c_Id);
If(paymentAmount>0)then
IF(c_rest_amount >= paymentAmount) THEN
update pos_order set paied_amount = paied_amount + paymentAmount  where (Id = c_Id);
set paymentAmount=0;
ELSE
update pos_order set paied_amount = paied_amount + c_rest_amount  where (Id = c_Id);
set paymentAmount=paymentAmount-c_rest_amount;
END IF;
END IF;
END LOOP;
close cursorPos_order_Pos_order;
end;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `set_stock_to_commercial_product_by_commercial_product_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `set_stock_to_commercial_product_by_commercial_product_stock`(p_product int)
BEGIN
declare p_stock decimal(15,5) default 0;
declare p_th_stock decimal(15,5) default 0;
SELECT   sum(actual_stock) , sum(theoretical_stock) into p_stock, p_th_stock
FROM         commercial_product_stock
where  (commercial_product_stock.product = p_product)  AND (commercial_product_stock.Id in
(SELECT        MAX(Id) AS Expr1
FROM            commercial_product_stock commercial_product_stock_1
WHERE        (commercial_product_stock_1.product = p_product)
group by warehouse
order by warehouse DESC));
update commercial_product set actual_stock=p_stock, theoretical_stock=p_th_stock where Id=p_product;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeoCalculateGMQ` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeoCalculateGMQ`(IdPoids int, IdOvin int,  datePesee datetime,  pesee decimal(15,5))
BEGIN

declare lastPesee decimal(15,5) default null;
declare lastDate datetime  default null;
declare daysNumber int ;
declare gmqExist bool;

declare nextIdPoids int default null;
declare nextPesee decimal(15,5) default null;
declare nextDate datetime  default null;
declare daysNumberNext int ;
declare cpt int default 0;
declare newval decimal default 0;


select Id, date_pesee, pese into nextIdPoids, nextDate, nextPesee
 from sigeo_poids where date_pesee > datePesee and ovin = IdOvin
 order by date_pesee
 limit 1;

if(nextPesee is not null and  nextDate is not null) then
  SELECT DATEDIFF(nextDate, datePesee) into daysNumberNext;

  if(daysNumberNext = 0) then set  daysNumberNext=1; end if;
  select count(poids) into cpt from sigeo_poids_gmq where poids=nextIdPoids;
  set newval =((nextPesee - pesee) / daysNumberNext)*1000;
  if (cpt !=0) then
    update sigeo_poids_gmq set val = newval where poids = nextIdPoids;
  else
    insert into sigeo_poids_gmq (poids, val) values (nextIdPoids, newval);
  end if;
end if;

select date_pesee, pese into lastDate, lastPesee
 from sigeo_poids where date_pesee < datePesee and ovin = IdOvin
 order by date_pesee desc
 limit 1;

if (lastPesee is not null and  lastDate is not null) then
  SELECT DATEDIFF(datePesee,lastDate) into daysNumber;

  if(daysNumber = 0) then set  daysNumber=1; end if;
  select count(poids) into cpt from sigeo_poids_gmq where poids=IdPoids;
  set newval =((pesee-lastPesee)/daysNumber)*1000;
  if (cpt !=0) then
    update sigeo_poids_gmq set val = newval where poids=IdPoids;
  else
    insert into sigeo_poids_gmq (poids, val) values (IdPoids,newval) ;
  end if;
end if;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeoOvinUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeoOvinUpdate`()
BEGIN


update sigeo_ovin set statut = (select Id from sigeo_ovin_statut where ovin = sigeo_ovin.Id order by date_affectation desc limit 1);
update sigeo_ovin set poids = (select Id from sigeo_poids where ovin = sigeo_ovin.Id order by date_pesee desc limit 1);
update sigeo_ovin set boucle = (select Id from sigeo_boucle where ovin = sigeo_ovin.Id and perdu=0 order by date_pose desc limit 1);

END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeoSetBrebis` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeoSetBrebis`()
BEGIN

DECLARE done int DEFAULT 0;
declare done_holder int;
declare c_Id int;
declare c_code varchar(255);
declare c_date datetime DEFAULT null;


declare Ovin_cursor cursor for
  SELECT        Id
  FROM   sigeo_ovin   where  sexe =1 and  statut <> 7;

declare continue handler for sqlstate '02000' set done=1;



  set done=0;
  open Ovin_cursor;
  repeat
    fetch Ovin_cursor into c_Id;
      if not done then
        set done_holder=done;


 select date_naissance into c_date from sigeo_ovin where mere = c_Id order by date_naissance limit 1;


    if(c_date is not NULL) then
      INSERT INTO sigeo_ovin_statut (date_ajout, date_affectation, ovin,statut) value (now(),c_date,c_Id,7);
    end if;
    set c_date = NULL;


       set done=done_holder;
      end if;
    until done end repeat;
  close Ovin_cursor;
  SET done=0;







END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeoUpdate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeoUpdate`()
BEGIN


DECLARE done INT DEFAULT FALSE;
declare c_Id, c_IdMere int;
declare c_sortie bool default 0;
declare c_Lutte, IdPere, c_race int default 0;
declare c_date_naissance, c_date_sortie datetime  default null;
declare eleveurCode, c_sexe, passportCode, c_code_troupeau varchar(45) default null;


declare cursorOvin cursor for
  SELECT        sigeo_ovin.Id, mere, date_naissance, sigeo_sexe.designation, sigeo_troupeau.code, race, c_sortie, c_date_sortie
  FROM            sigeo_ovin left join
  sigeo_sexe on sigeo_sexe.Id = sigeo_ovin.sexe left join
  sigeo_troupeau on sigeo_troupeau.Id = sigeo_ovin.troupeau;

      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

 set eleveurCode = (SELECT sigeo_eleveur.code FROM  sigeo_eleveur limit 1);


delete from sigeo_ovin_statut;
  open cursorOvin;
  read_loop: LOOP
    fetch cursorOvin into c_Id, c_IdMere, c_date_naissance, c_sexe, c_code_troupeau, c_race, c_sortie, c_date_sortie;
      IF done THEN
      LEAVE read_loop;
    END IF;
        call sigeo_set_statut(c_Id);

 set c_Lutte =  (SELECT        coalesce(MAX(sigeo_lutte_ovin.IdLutte), 0)
FROM            sigeo_lutte_ovin INNER JOIN
                         sigeo_ovin ON sigeo_lutte_ovin.IdOvin = sigeo_ovin.Id
WHERE        (sigeo_lutte_ovin.IdOvin = c_IdMere) AND (TIMESTAMPDIFF(DAY, sigeo_lutte_ovin.date_entree, c_date_naissance) >= 148) AND (TIMESTAMPDIFF(DAY,
                         sigeo_lutte_ovin.date_sortie, c_date_naissance) <= 148));

if((SELECT       count(sigeo_lutte_ovin.IdOvin)
FROM            sigeo_lutte_ovin INNER JOIN
                         sigeo_ovin ON sigeo_lutte_ovin.IdOvin = sigeo_ovin.Id
WHERE        (sigeo_ovin.sexe = 2) AND (sigeo_lutte_ovin.IdLutte = c_Lutte)) = 1) then

SELECT        sigeo_lutte_ovin.IdOvin as IdPere
FROM            sigeo_lutte_ovin INNER JOIN
                         sigeo_ovin ON sigeo_lutte_ovin.IdOvin = sigeo_ovin.Id
WHERE        (sigeo_ovin.sexe = 2) AND (sigeo_lutte_ovin.IdLutte = c_Lutte);
end if;

set passportCode = CONCAT(eleveurCode, c_code_troupeau ,'OV0', CONVERT(c_race, CHAR(2)), c_sexe, CONVERT(c_Id, CHAR(5)));

update sigeo_ovin set code = passportCode, lutte = c_Lutte, pere = IdPere where Id = c_Id;

delete from sigeo_ovin_statut where date_affectation > c_date_sortie and c_sortie = 1 and ovin = c_Id;

  END LOOP;
  close cursorOvin;

update sigeo_ovin set sevrage = 1 , date_sevrage = DATE_ADD(date_naissance, INTERVAL 105 DAY)
where now() > DATE_ADD(date_naissance, INTERVAL 105 DAY) and sevrage = 0 and (sortie = 0 or date_sortie <= DATE_ADD(date_naissance, INTERVAL 105 DAY));

update sigeo_ovin set statut = (select Id from sigeo_ovin_statut where ovin = sigeo_ovin.Id order by date_affectation desc limit 1);



begin
declare c_IdOvin, c_LastIdOvin, c_IdPoids int;
declare c_pese, c_LastPese, c_gmq decimal(15,5);
declare c_date_pesee, c_LastDate_pesee datetime;
DECLARE done INT DEFAULT FALSE;
declare done_holder int;

declare cursorPoids cursor for
 SELECT Id, date_pesee, pese, ovin FROM sigeo_poids  order by date_pesee;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;




set done=0;
  open cursorPoids;
  repeat
    fetch cursorPoids into c_IdPoids, c_date_pesee, c_pese, c_IdOvin;
      if not done then
        set done_holder = done;

set c_LastDate_pesee = null;
set c_LastPese = null;
SELECT        date_pesee, pese into c_LastDate_pesee, c_LastPese
FROM            sigeo_poids
WHERE        (ovin = c_IdOvin) AND (date_pesee =
                             (SELECT        MAX(date_pesee) AS Expr1
                               FROM            sigeo_poids sigeo_poids_1
                               WHERE        (date_pesee < c_date_pesee) AND (ovin = c_IdOvin))) limit 1;


set c_gmq = ((c_pese - c_LastPese) / (select DATEDIFF(c_date_pesee, c_LastDate_pesee)));
update sigeo_poids set gmq = c_gmq where Id = c_IdPoids;



        set done=done_holder;
      end if;
    until done end repeat;
  close cursorPoids;
  SET done=0;
end;












END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeo_calculatePoidsAuAgeType` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeo_calculatePoidsAuAgeType`(IdOvin int)
BEGIN


declare Pat10 decimal(15,5) default null;
declare Pat30 decimal(15,5) default null;
declare Pat70 decimal(15,5) default null;
declare datePesee, date1, date2, dateNaissance datetime  default null;
declare PoidNaissance, Pesee, Pat1, Pat2, gmq1030, gmq3070, gmq0030 decimal(15,5) default null;

SELECT        date_naissance into dateNaissance
  FROM            sigeo_ovin
where Id= IdOvin;


SELECT        pese into PoidNaissance
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee = dateNaissance
order by date_pesee desc
limit 1;




set Pat1 = null;
set date1 = null;
set Pat2 = null;
set date2 = null;




SELECT        date_pesee, pese into date1, Pat1
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee<= (select DATE_ADD(dateNaissance, INTERVAL 10 DAY)) and pese is not null and pese <>0
order by date_pesee desc
limit 1;

if(date1 is not null) then
SELECT        date_pesee, pese into date2, Pat2
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee>= (select DATE_ADD(dateNaissance, INTERVAL 10 DAY)) and pese is not null and pese <>0
order by date_pesee asc
limit 1;

if(DATEDIFF(date2, date1)<=23) then
  set Pat10 = Pat1+(Pat2-Pat1)/(DATEDIFF(date2,date1))*(10-DATEDIFF(date1, dateNaissance));
end if;
end if;


set Pat1 = null;
set date1 = null;
set Pat2 = null;
set date2 = null;


if(Pat10 is null) then

SELECT        date_pesee, pese into date1, Pat1
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee<= (select DATE_ADD(dateNaissance, INTERVAL 22 DAY)) and date_pesee>= (select DATE_ADD(dateNaissance, INTERVAL 10 DAY)) and pese is not null and pese <>0
order by date_pesee
limit 1;

if(date1 is not null) then
SELECT        date_pesee, pese into date2, Pat2
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee > date1
order by date_pesee
limit 1;

 if(date2 is not null) then
set Pat10 = Pat1+(Pat2-Pat1)/(DATEDIFF(date2,date1))*(10-DATEDIFF(date1, dateNaissance));
end if;
end if;
end if;




set Pat1 = null;
set date1 = null;
set Pat2 = null;
set date2 = null;




SELECT        date_pesee, pese into date1, Pat1
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee<= (select DATE_ADD(dateNaissance, INTERVAL 30 DAY)) and pese is not null and pese <>0
order by date_pesee desc
limit 1;

if(date1 is not null) then
SELECT        date_pesee, pese into date2, Pat2
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee>= (select DATE_ADD(dateNaissance, INTERVAL 30 DAY)) and pese is not null and pese <>0
order by date_pesee
limit 1;

if(DATEDIFF(date2, date1)<=44) then
set Pat30 = Pat1+(Pat2-Pat1)/(DATEDIFF(date2,date1))*(30-DATEDIFF(date1, dateNaissance));

end if;
end if;


set Pat1 = null;
set date1 = null;
set Pat2 = null;
set date2 = null;


if(Pat30 is null) then

SELECT        date_pesee, pese into date2, Pat2
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee <= (select DATE_ADD(dateNaissance, INTERVAL 30 DAY)) and date_pesee>= (select DATE_ADD(dateNaissance, INTERVAL 20 DAY)) and pese is not null and pese <>0
order by date_pesee desc
limit 1;


if(date2 is not null) then
SELECT        date_pesee, pese into date1, Pat1
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee < date2
order by date_pesee desc
limit 1;

if(date1 is not null) then
set Pat30 = Pat1+(Pat2-Pat1)/(DATEDIFF(date2,date1))*(30-DATEDIFF(date1, dateNaissance));
end if;
end if;
end if;




set Pat1 = null;
set date1 = null;
set Pat2 = null;
set date2 = null;




SELECT        date_pesee, pese into date1, Pat1
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee<= (select DATE_ADD(dateNaissance, INTERVAL 70 DAY)) and pese is not null and pese <>0
order by date_pesee desc
limit 1;

if(date1 is not null) then
SELECT        date_pesee, pese into date2, Pat2
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee>= (select DATE_ADD(dateNaissance, INTERVAL 70 DAY)) and pese is not null and pese <>0
order by date_pesee
limit 1;

if(DATEDIFF(date2, date1)<=23) then
set Pat70 = Pat1+(Pat2-Pat1)/(DATEDIFF(date2,date1))*(70-DATEDIFF(date1, dateNaissance));


end if;
end if;


set Pat1 = null;
set date1 = null;
set Pat2 = null;
set date2 = null;


if(Pat70 is null) then

SELECT        date_pesee, pese into date2, Pat2
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee<= (select DATE_ADD(dateNaissance, INTERVAL 70 DAY)) and date_pesee>= (select DATE_ADD(dateNaissance, INTERVAL 62 DAY)) and pese is not null and pese <>0
order by date_pesee
limit 1;

if(date2 is not null) then
SELECT        date_pesee, pese into date1, Pat1
  FROM            sigeo_poids
where ovin= IdOvin and date_pesee < date2
order by date_pesee desc
limit 1;

if(date1 is not null) then
set Pat70 = Pat1+(Pat2-Pat1)/(DATEDIFF(date2,date1))*(70-DATEDIFF(date1, dateNaissance));

end if;
end if;
end if;



if(Pat10 is not null and Pat30 is not null) then
set gmq1030 = (Pat30-Pat10)/20;
end if;
if(Pat70 is not null and Pat30 is not null) then
set gmq3070 = (Pat70-Pat30)/40;
end if;
if(poidNaissance is not null and Pat30 is not null) then
set gmq0030 = (Pat30-poidNaissance)/30;
end if;


delete from sigeo_poids_gmq_genetique where ovin = IdOvin;
insert into sigeo_poids_gmq_genetique (ovin, poids_naissance, poids10, poids30, poids70, gmq1030, gmq3070, gmq0030)
       values (IdOvin, poidNaissance, Pat10, Pat30, Pat70, gmq1030, gmq3070, gmq0030);


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeo_calculatePoidsAuAgeTypeAndGMQ` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeo_calculatePoidsAuAgeTypeAndGMQ`()
BEGIN
DECLARE done INT DEFAULT FALSE;
declare c_Id int;
declare c_dateNaissance datetime default 0;


declare cursorOvin cursor for
  SELECT        Id, date_naissance
  FROM            sigeo_ovin;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

delete from sigeo_poids_gmq_genetique;
  open cursorOvin;
  read_loop: LOOP
    fetch cursorOvin into c_Id, c_dateNaissance;
      IF done THEN
      LEAVE read_loop;
    END IF;
        call sigeo_calculatePoidsAuAgeType(c_Id);

  END LOOP;
  close cursorOvin;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeo_insertFlow` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeo_insertFlow`(codeBoucle varchar(255), dateES datetime)
BEGIN

DECLARE entreeSortie int default 1;
Declare p_ovin int default 0;

 select ovin into p_ovin from sigeo_boucle where code = codeBoucle;

 set entreeSortie = ( select coalesce( ccc.in_out,0) from (SELECT       *
FROM            sigeo_flow
WHERE        (sigeo_flow.in_out = 1) OR
                         (sigeo_flow.in_out = 2)
group by concat(ovin, `date`)
ORDER BY sigeo_flow.Id DESC) as ccc group by ovin having ovin = p_ovin );
if(entreeSortie <> 0) then
if(entreeSortie = 1) then
set entreeSortie = 2; else
set entreeSortie = 1;
end if;
else
set entreeSortie = 1;
end if;

if(p_ovin<>0)then
INSERT INTO sigeo_flow
          (ovin, `date`, in_out)
          (select p_ovin, dateES, entreeSortie);
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeo_set_statut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeo_set_statut`(IdOvin int)
BEGIN

declare datePesee, dateNaissance, dateChangementStatut, dateAs365Days, datePremiereMiseBas, datePremiereLutte, dateDeuxiemeLutte, dateEleveBelier, dateSortie datetime  default null;
declare sexe, statut, nbrDescendant, nbrLutte, IdMere, statutMere int  default null;
declare pesee decimal(15,5) default null;
declare IdStatutBrebis int  default 7;
declare Sevrage, Sortie bool default false;



select sigeo_ovin.date_naissance, sigeo_ovin.sexe, sigeo_ovin_statut.statut, sigeo_ovin_statut.date_affectation, mere, sevrage, sortie, date_sortie  into
dateNaissance, sexe, statut, dateChangementStatut, IdMere, Sevrage, Sortie, dateSortie
from sigeo_ovin  left outer join
sigeo_ovin_statut on sigeo_ovin_statut.Id = sigeo_ovin.statut
where sigeo_ovin.Id=IdOvin;


if(Sevrage = 0) then
select coalesce(sigeo_poids.pese,0), sigeo_poids.date_pesee into pesee, datePesee
from sigeo_poids
where pese>=27 and ovin = IdOvin
order by pese asc
limit 1;

if(pesee >= 27 ) then
update sigeo_ovin set sevrage = 1, date_sevrage = datePesee where Id = IdOvin;
end if;
set pesee = null;
set datePesee = null;


end if;



select coalesce(sigeo_poids.pese,0), sigeo_poids.date_pesee into pesee, datePesee
from sigeo_poids
where pese>=36 and ovin=IdOvin
order by pese asc
limit 1;

delete from sigeo_ovin_statut where (ovin = IdOvin);




  if(sexe=1) then
    insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), dateNaissance, IdOvin, 2);
    set statut=2;
  else
    insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), dateNaissance, IdOvin, 1);
    set statut=1;
  end if;
  set dateChangementStatut=dateNaissance;






set dateAs365Days = (select DATE_ADD(dateNaissance, INTERVAL 365 DAY));

if(sexe=1) then
 
    if(pesee>=36 and datePesee< dateAs365Days) then
      insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), datePesee, IdOvin, 4);
    else if (now()>= dateAs365Days and (sortie = 0 or dateSortie <= dateAs365Days)) then
          insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), dateAs365Days, IdOvin, 4);
         end if;
    end if;
 
    
 
else
  
    if(pesee>=36 and datePesee< dateAs365Days) then
      insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), datePesee, IdOvin, 3);
    else if (now()>= dateAs365Days and (sortie = 0 or dateSortie <= dateAs365Days)) then
          insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), dateAs365Days, IdOvin, 3);
         end if;
    end if;
 
    
 
end if;





set IdStatutBrebis = 7;

select sigeo_ovin_statut.statut into statutMere
from sigeo_ovin  left outer join
sigeo_ovin_statut on sigeo_ovin_statut.Id = sigeo_ovin.statut
where sigeo_ovin.Id=IdMere;



  SELECT        date_naissance into datePremiereMiseBas
  FROM            sigeo_ovin
  where mere = IdMere
  order by date_naissance asc
  limit 1;
 
    delete from sigeo_ovin_statut
    where   (sigeo_ovin_statut.statut = IdStatutBrebis and ovin = IdMere);
    insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), datePremiereMiseBas, IdMere, 7);
 









if(sexe= 2) then
  select count(*) into nbrLutte from sigeo_lutte_ovin where sigeo_lutte_ovin.IdOvin = IdOvin;

  if(nbrLutte>=1) then
    select date_entree into datePremiereLutte
    from sigeo_lutte_ovin
    where  sigeo_lutte_ovin.IdOvin = IdOvin
    order by date_entree asc
    limit 1;

   
      insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), datePremiereLutte, IdOvin, 5);
   
  

    if(nbrLutte>1) then
      select date_entree into dateDeuxiemeLutte
      from sigeo_lutte_ovin
      where  sigeo_lutte_ovin.IdOvin = IdOvin and date_entree>datePremiereLutte
      order by date_entree asc
      limit 1;

     
        insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut) values (now(), dateDeuxiemeLutte, IdOvin, 6);
    

    end if;

  end if;

end if;





END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeo_update_all_statut` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeo_update_all_statut`()
BEGIN

DECLARE done INT DEFAULT FALSE;
declare c_Id int;


declare cursorOvin cursor for
  SELECT        Id
  FROM            sigeo_ovin;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

delete from sigeo_ovin_statut;
  open cursorOvin;
  read_loop: LOOP
    fetch cursorOvin into c_Id;
      IF done THEN
      LEAVE read_loop;
    END IF;
        call sigeo_set_statut(c_Id);

  END LOOP;
  close cursorOvin;



END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `sigeo_update_statut_evry_day` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `sigeo_update_statut_evry_day`()
BEGIN

DECLARE done INT DEFAULT FALSE;
declare c_Id, c_sexe int;
declare c_date_naissance datetime  default null;


declare cursorOvin cursor for
  SELECT        sigeo_ovin.Id, sexe, date_naissance
  FROM            sigeo_ovin left join
  sigeo_ovin_statut on sigeo_ovin.statut= sigeo_ovin_statut.Id
  where now() > DATE_ADD(date_naissance, INTERVAL 365 DAY) and (sortie = 0 or date_sortie <= DATE_ADD(date_naissance, INTERVAL 365 DAY)) and sigeo_ovin_statut.statut<3;
      DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;

  open cursorOvin;
  read_loop: LOOP
    fetch cursorOvin into c_Id, c_sexe, c_date_naissance ;
      IF done THEN
      LEAVE read_loop;
    END IF;
        if(c_sexe=1) then
      insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut)
             values (now(), DATE_ADD(c_date_naissance, INTERVAL 365 DAY), c_Id, 4);
    else
      insert into sigeo_ovin_statut (date_ajout, date_affectation, ovin, statut)
             values (now(), DATE_ADD(c_date_naissance, INTERVAL 365 DAY), c_Id, 3);
    end if;
  END LOOP;
  close cursorOvin;

update sigeo_ovin set sevrage = 1 , date_sevrage = DATE_ADD(date_naissance, INTERVAL 105 DAY)
where now() > DATE_ADD(date_naissance, INTERVAL 105 DAY) and sevrage = 0 and (sortie = 0 or date_sortie <= DATE_ADD(date_naissance, INTERVAL 105 DAY));


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `temp_update_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `temp_update_stock`()
BEGIN
declare done int default 0;
declare c_Id int;
declare c_product int;
declare c_piece int;
declare c_quantity decimal(15,5) default 0;
declare done_holder int;
declare c_piece_type varchar(255);
declare c_pos_order_line cursor for
select  Id, product, quantity, piece
from
(select  pos_order_line.Id, pos_order_line.product, pos_order_line.quantity, commercial_product_stock.quantity as qte , commercial_product_stock.`date`, pos_order_line.piece
from (select pos_order_line.Id, pos_order_line.quantity, pos_order_line.piece, pos_order_line.product from
pos_order_line left join
pos_order on pos_order.Id=pos_order_line.piece where pos_order.`date`>'2016-02-17 08:35:47') pos_order_line
left  join
(select * from commercial_product_stock where commercial_product_stock.`date`>'2016-02-17 08:35:47' and
piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' and (`action`='insert TRIGGER' or
`action`='insert'))
commercial_product_stock on
commercial_product_stock.piece=pos_order_line.piece
and commercial_product_stock.product=pos_order_line.product) requette where (COALESCE(qte,0)=0);
set c_piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
set done=0;
open c_pos_order_line;
repeat
fetch c_pos_order_line into c_Id, c_product, c_quantity, c_piece;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, c_piece_type, c_product, c_quantity, c_piece, true, true, 0, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_pos_order_line;
SET done=0;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `testcorrection` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `testcorrection`(oldProduct int, newProduct int)
BEGIN

update purchase_quotation_line set product = newProduct where product = oldProduct;
update purchase_order_line set product = newProduct where product = oldProduct;
update purchase_shipping_line set product = newProduct where product = oldProduct;
update purchase_invoice_line set product = newProduct where product = oldProduct;
update purchase_credit_invoice_line set product = newProduct where product = oldProduct;

update sale_quotation_line set product = newProduct where product = oldProduct;
update sale_order_line set product = newProduct where product = oldProduct;
update sale_shipping_line set product = newProduct where product = oldProduct;
update sale_invoice_line set product = newProduct where product = oldProduct;
update sale_credit_invoice_line set product = newProduct where product = oldProduct;

update commercial_stock_entry_line set product = newProduct where product = oldProduct;
update commercial_stock_out_line set product = newProduct where product = oldProduct;
update commercial_stock_mouvement_line set product = newProduct where product = oldProduct;



update production_compsition set component = newProduct where component = oldProduct;
delete from commercial_product_stock_warehouse where  product = oldProduct;
delete from commercial_inventory_line where  product = oldProduct;
delete from production_compsition where composite = oldProduct;


END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `updatePayment` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `updatePayment`()
BEGIN
DECLARE done INT DEFAULT FALSE;
declare c_Id int;
declare c_amount decimal default 0;
declare c_piece_type varchar(255);
declare c_piece int;
declare shipping_count int default 0;
declare pos_order_count int default 0;
declare c_Partner int default 0;
declare cursorPayment_piece cursor for
SELECT        Id, amount,  piece_type, piece
FROM            commercial_payment_piece;
declare cursorPartner_customer cursor for
SELECT        Id
FROM            commercial_partner where customer=1;
DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = TRUE;
open cursorPayment_piece;
read_loop: LOOP
fetch cursorPayment_piece into c_Id, c_amount, c_piece_type, c_piece;
IF done THEN
LEAVE read_loop;
END IF;
call SetPaymentToPieceByPiece(c_piece_type, c_piece);
END LOOP;
close cursorPayment_piece;
open cursorPartner_customer;
read_loop: LOOP
fetch cursorPartner_customer into c_Partner;
IF done THEN
LEAVE read_loop;
END IF;
call update_sale_rest_amount(c_Partner);
END LOOP;
close cursorPartner_customer;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `updateSockByDate` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `updateSockByDate`()
BEGIN
declare done int default 0;
declare c_Id int;
declare c_product int;
declare c_quantity decimal(15,5);
declare c_piece int;
declare c_type varchar(255);
declare c_create_date datetime;
declare done_holder int;
declare lineCursor cursor for
SELECT        Id,  'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `type`
FROM            pos_order
where           validated=1
union
SELECT        Id, 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `type`
FROM            sale_shipping
WHERE         validated=1
union
SELECT        Id, 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `type`
from              purchase_shipping
WHERE         validated=1
union
SELECT        Id, 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `type`
FROM            commercial_stock_out
WHERE         validated=1
union
SELECT        Id, 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `type`
FROM          commercial_stock_entry
WHERE         validated=1;
declare continue handler for sqlstate '02000' set done=1;
delete from commercial_product_stock;
ALTER TABLE commercial_product_stock AUTO_INCREMENT = 1;
update commercial_product_stock_warehouse set actual_stock=0, theoretical_stock =0, cump =null;
delete from production_product_cost;
ALTER TABLE production_product_cost AUTO_INCREMENT = 1;
update production_cost set product_cost=0, cost =null;
set done=0;
open lineCursor;
repeat
fetch lineCursor into c_Id,  c_type;
if not done then
set done_holder=done;
call pos_order_update_stock(c_Id,c_type);
if(c_type = 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null') then
call production_setProductCostByShipping(c_Id);
end if;
set done=done_holder;
end if;
until done end repeat;
close lineCursor;
SET done=0;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `updateTotal_amount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `updateTotal_amount`()
BEGIN
update purchase_invoice as p set total_amount=
(
SELECT        SUM((((purchase_invoice_line.price * purchase_invoice_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - purchase_invoice_line.discount))+COALESCE(commercial_revenue_stamp.value,0)
FROM
(select * from purchase_invoice) as i LEFT OUTER JOIN
purchase_invoice_line ON purchase_invoice_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = purchase_invoice_line.vat LEFT OUTER JOIN
commercial_revenue_stamp ON i.revenue_stamp = commercial_revenue_stamp.Id
where i.Id=p.Id
);
update purchase_order as p set total_amount=
(
SELECT        SUM((((purchase_order_line.price * purchase_order_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - purchase_order_line.discount))
FROM
(select * from purchase_order) as i LEFT OUTER JOIN
purchase_order_line ON purchase_order_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = purchase_order_line.vat
where i.Id=p.Id
);
update purchase_shipping as p set total_amount=
(
SELECT        SUM((((purchase_shipping_line.price * purchase_shipping_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - purchase_shipping_line.discount))
FROM
(select * from purchase_shipping) as i LEFT OUTER JOIN
purchase_shipping_line ON purchase_shipping_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = purchase_shipping_line.vat
where i.Id=p.Id
);
update purchase_quotation as p set total_amount=
(
SELECT        SUM((((purchase_quotation_line.price * purchase_quotation_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - purchase_quotation_line.discount))
FROM
(select * from purchase_quotation) as i LEFT OUTER JOIN
purchase_quotation_line ON purchase_quotation_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = purchase_quotation_line.vat
where i.Id=p.Id
);
update purchase_credit_invoice as p set total_amount=
(
SELECT        SUM((((purchase_credit_invoice_line.price * purchase_credit_invoice_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - purchase_credit_invoice_line.discount))
FROM
(select * from purchase_credit_invoice) as i LEFT OUTER JOIN
purchase_credit_invoice_line ON purchase_credit_invoice_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = purchase_credit_invoice_line.vat
where i.Id=p.Id
);
update sale_invoice as p set total_amount=
(
SELECT        SUM((((sale_invoice_line.price * sale_invoice_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - sale_invoice_line.discount))+COALESCE(commercial_revenue_stamp.value,0)
FROM
(select * from sale_invoice) as i LEFT OUTER JOIN
sale_invoice_line ON sale_invoice_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = sale_invoice_line.vat LEFT OUTER JOIN
commercial_revenue_stamp ON i.revenue_stamp = commercial_revenue_stamp.Id
where i.Id=p.Id
);
update sale_order as p set total_amount=
(
SELECT        SUM((((sale_order_line.price * sale_order_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - sale_order_line.discount))
FROM
(select * from sale_order) as i LEFT OUTER JOIN
sale_order_line ON sale_order_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = sale_order_line.vat
where i.Id=p.Id
);
update sale_shipping as p set total_amount=
(
SELECT        SUM((((sale_shipping_line.price * sale_shipping_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - sale_shipping_line.discount))
FROM
(select * from sale_shipping) as i LEFT OUTER JOIN
sale_shipping_line ON sale_shipping_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = sale_shipping_line.vat
where i.Id=p.Id
);
update sale_quotation as p set total_amount=
(
SELECT        SUM((((sale_quotation_line.price * sale_quotation_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - sale_quotation_line.discount))
FROM
(select * from sale_quotation) as i LEFT OUTER JOIN
sale_quotation_line ON sale_quotation_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = sale_quotation_line.vat
where i.Id=p.Id
);
update sale_credit_invoice as p set total_amount=
(
SELECT        SUM((((sale_credit_invoice_line.price * sale_credit_invoice_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - sale_credit_invoice_line.discount))
FROM
(select * from sale_credit_invoice) as i LEFT OUTER JOIN
sale_credit_invoice_line ON sale_credit_invoice_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = sale_credit_invoice_line.vat
where i.Id=p.Id
);
update pos_order as p set total_amount=
(
SELECT        SUM((((pos_order_line.price * pos_order_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - pos_order_line.discount))+COALESCE(commercial_revenue_stamp.value,0)
FROM
(select * from pos_order) as i LEFT OUTER JOIN
pos_order_line ON pos_order_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = pos_order_line.vat LEFT OUTER JOIN
commercial_revenue_stamp ON i.revenue_stamp = commercial_revenue_stamp.Id
where i.Id=p.Id
);
update pos_credit_order as p set total_amount=
(
SELECT        SUM((((pos_credit_order_line.price * pos_credit_order_line.quantity) * (1 +
coalesce(commercial_vat.value, 0) * i.tva_chec))
* (1 + coalesce(commercial_fodec.value, 0))) * (1 - pos_credit_order_line.discount))
FROM
(select * from pos_credit_order) as i LEFT OUTER JOIN
pos_credit_order_line ON pos_credit_order_line.piece=i.Id LEFT OUTER JOIN
commercial_fodec ON i.fodec = commercial_fodec.Id LEFT OUTER JOIN
commercial_vat  ON commercial_vat.Id = pos_credit_order_line.vat
where i.Id=p.Id
);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_batch_stock` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_batch_stock`(
        IN IdPiece INT, 
        IN piece_type VARCHAR(255)
    )
BEGIN
        -- Declarations
        DECLARE done INT DEFAULT 0;
        DECLARE c_range, c_product, p_warehouse, p_warehouse_out INT;
        DECLARE c_quantity DECIMAL(15,5);

        -- Cursors (same as original)
        DECLARE c_pos_order CURSOR FOR
            SELECT Id, product, quantity FROM pos_order_line WHERE piece = IdPiece;
        DECLARE c_pos_credit_order CURSOR FOR
            SELECT Id, product, quantity FROM pos_credit_order_line WHERE piece = IdPiece;
        DECLARE c_purchase_shipping CURSOR FOR
            SELECT `range`, product, quantity FROM purchase_shipping_line WHERE piece = IdPiece;
        DECLARE c_sale_shipping CURSOR FOR
            SELECT `range`, product, quantity FROM sale_shipping_line WHERE piece = IdPiece;
        DECLARE c_stock_entry CURSOR FOR
            SELECT `range`, product, quantity FROM commercial_stock_entry_line WHERE piece = IdPiece;
        DECLARE c_stock_out CURSOR FOR
            SELECT `range`, product, quantity FROM commercial_stock_out_line WHERE piece = IdPiece;
        DECLARE c_stock_mouvement CURSOR FOR
            SELECT `range`, product, quantity FROM commercial_stock_mouvement_line WHERE piece = IdPiece;
        DECLARE c_purchase_shipping_return CURSOR FOR
            SELECT `range`, product, quantity FROM purchase_shipping_return_line WHERE piece = IdPiece;
        DECLARE c_sale_shipping_return CURSOR FOR
            SELECT `range`, product, quantity FROM sale_shipping_return_line WHERE piece = IdPiece;

        DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

        -- Main logic
        CASE piece_type
            /*WHEN 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                IF ((SELECT COUNT(pos_order.Id) FROM pos_order 
                    INNER JOIN sale_invoice ON pos_order.invoice = sale_invoice.Id AND sale_invoice.validated = 1
                    WHERE pos_order.Id = IdPiece) = 0) THEN
                    SET checThehorical = 1;
                END IF;
                
                SET done = 0;
                OPEN c_pos_order;
                REPEAT
                    FETCH c_pos_order INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        SET p_warehouse = get_warehouse_by_piece_line(c_Id);
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_pos_order;
                SET done = 0;

            WHEN 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SET done = 0;
                OPEN c_pos_credit_order;
                REPEAT
                    FETCH c_pos_credit_order INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        SET p_warehouse = get_warehouse_by_credit_order_line(c_Id);
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, -c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_pos_credit_order;
                SET done = 0;*/

            WHEN 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SELECT warehouse INTO p_warehouse FROM sale_shipping WHERE Id = IdPiece;
                SET done = 0;
                OPEN c_sale_shipping;
                REPEAT
                    FETCH c_sale_shipping INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, -c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_sale_shipping;
                SET done = 0;

            WHEN 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SELECT warehouse INTO p_warehouse FROM purchase_shipping WHERE Id = IdPiece;
                SET done = 0;
                OPEN c_purchase_shipping;
                REPEAT
                    FETCH c_purchase_shipping INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_purchase_shipping;
                SET done = 0;

            WHEN 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SELECT warehouse INTO p_warehouse FROM commercial_stock_entry WHERE Id = IdPiece;
                SET done = 0;
                OPEN c_stock_entry;
                REPEAT
                    FETCH c_stock_entry INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_stock_entry;
                SET done = 0;

            WHEN 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SELECT warehouse INTO p_warehouse FROM commercial_stock_out WHERE Id = IdPiece;
                SET done = 0;
                OPEN c_stock_out;
                REPEAT
                    FETCH c_stock_out INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, -c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_stock_out;
                SET done = 0;

            WHEN 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SELECT warehouse_in, warehouse_out INTO p_warehouse, p_warehouse_out FROM commercial_stock_mouvement WHERE Id = IdPiece;
                SET done = 0;
                OPEN c_stock_mouvement;
                REPEAT
                    FETCH c_stock_mouvement INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, c_quantity, IdPiece, p_warehouse, 'insert');
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, -c_quantity, IdPiece, p_warehouse_out, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_stock_mouvement;
                SET done = 0;

            WHEN 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SELECT warehouse INTO p_warehouse FROM purchase_shipping_return WHERE Id = IdPiece;
                SET done = 0;
                OPEN c_purchase_shipping_return;
                REPEAT
                    FETCH c_purchase_shipping_return INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, -c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_purchase_shipping_return;
                SET done = 0;

            WHEN 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' THEN
                SELECT warehouse INTO p_warehouse FROM sale_shipping_return WHERE Id = IdPiece;
                SET done = 0;
                OPEN c_sale_shipping_return;
                REPEAT
                    FETCH c_sale_shipping_return INTO c_range, c_product, c_quantity;
                    IF NOT done THEN
                        
                        CALL insert_batch_product_stock(c_range, piece_type, c_product, c_quantity, IdPiece, p_warehouse, 'insert');
                    END IF;
                UNTIL done END REPEAT;
                CLOSE c_sale_shipping_return;
                SET done = 0;
            ELSE
                SET done = 0;
        END CASE;
    END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_pieces_on_transfert` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_pieces_on_transfert`(p_action VARCHAR(255), p_table VARCHAR(255), p_piece_type VARCHAR(255), p_IdPiece_transfered INT, p_IdPiece INT)
BEGIN
    IF (p_action = 'update') THEN
        CASE p_table
            WHEN 'purchase_invoice' THEN
                CASE p_piece_type
                    WHEN 'order' THEN
                    UPDATE purchase_shipping SET `order` = p_IdPiece_transfered WHERE invoice = p_IdPiece;
                    WHEN 'quotation' THEN
                      UPDATE purchase_shipping SET quotation = p_IdPiece_transfered WHERE invoice = p_IdPiece;
                      UPDATE purchase_order SET quotation = p_IdPiece_transfered WHERE Id = (SELECT `order` FROM purchase_invoice WHERE Id = p_IdPiece);
                END CASE;
            WHEN 'purchase_order' THEN
                UPDATE purchase_invoice SET quotation = p_IdPiece_transfered WHERE `order` = p_IdPiece;
                UPDATE purchase_shipping SET quotation = p_IdPiece_transfered WHERE `order` = p_IdPiece;
            WHEN 'purchase_shipping' THEN
                CASE p_piece_type
                    WHEN 'order' THEN
                      UPDATE purchase_invoice SET `order` = p_IdPiece_transfered WHERE Id = (SELECT invoice FROM purchase_shipping WHERE Id = p_IdPiece);
                    WHEN 'quotation' THEN
                      UPDATE purchase_invoice SET quotation = p_IdPiece_transfered WHERE Id = (SELECT invoice FROM purchase_shipping WHERE Id = p_IdPiece);
                      UPDATE purchase_order SET quotation = p_IdPiece_transfered WHERE Id = (SELECT `order` FROM purchase_shipping WHERE Id = p_IdPiece);
                END CASE;
            WHEN 'sale_invoice' THEN
                CASE p_piece_type
                    WHEN 'order' THEN
                      UPDATE sale_shipping SET `order` = p_IdPiece_transfered WHERE invoice = p_IdPiece;
                    WHEN 'quotation' THEN
                      UPDATE sale_shipping SET quotation = p_IdPiece_transfered WHERE invoice = p_IdPiece;
                      UPDATE sale_order SET quotation = p_IdPiece_transfered WHERE Id = (SELECT `order` FROM sale_invoice WHERE Id = p_IdPiece);
                END CASE;
            WHEN 'sale_order' THEN
                UPDATE sale_invoice SET quotation = p_IdPiece_transfered WHERE `order` = p_IdPiece;
                UPDATE sale_shipping SET quotation = p_IdPiece_transfered WHERE `order` = p_IdPiece;
            WHEN 'sale_shipping' THEN
                CASE p_piece_type
                    WHEN 'order' THEN
                      UPDATE sale_invoice SET `order` = p_IdPiece_transfered WHERE Id = (SELECT invoice FROM sale_shipping WHERE Id = p_IdPiece);
                    WHEN 'quotation' THEN
                      UPDATE sale_invoice SET quotation = p_IdPiece_transfered WHERE Id = (SELECT invoice FROM sale_shipping WHERE Id = p_IdPiece);
                      UPDATE sale_order SET quotation = p_IdPiece_transfered WHERE Id = (SELECT `order` FROM sale_shipping WHERE Id = p_IdPiece);
                END CASE;
        END CASE;
    ELSE
        CASE p_table
            WHEN 'purchase_invoice' THEN
                CASE p_piece_type
                    WHEN 'order' THEN
                   do null; --    UPDATE purchase_shipping SET invoice = p_IdPiece_transfered WHERE `order` = p_IdPiece;
                    WHEN 'quotation' THEN
                      do null;-- UPDATE purchase_shipping SET invoice = p_IdPiece_transfered WHERE quotation = p_IdPiece;
                END CASE;
            WHEN 'purchase_order' THEN
                do null;-- UPDATE purchase_invoice SET `order` = p_IdPiece_transfered WHERE quotation = p_IdPiece;
                do null;-- UPDATE purchase_shipping SET `order` = p_IdPiece_transfered WHERE quotation = p_IdPiece;
            WHEN 'sale_invoice' THEN
                CASE p_piece_type
                    WHEN 'order' THEN
                    do null; --   UPDATE sale_shipping SET invoice = p_IdPiece_transfered WHERE `order` = p_IdPiece;
                    WHEN 'quotation' THEN
                      do null;-- UPDATE sale_shipping SET invoice = p_IdPiece_transfered WHERE quotation = p_IdPiece;
                END CASE;
            WHEN 'sale_order' THEN
              do null;-- UPDATE sale_invoice SET `order` = p_IdPiece_transfered WHERE quotation = p_IdPiece;
              do null;-- UPDATE sale_shipping SET `order` = p_IdPiece_transfered WHERE quotation = p_IdPiece;
        END CASE;
    END IF;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_product_stock_on_delete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_product_stock_on_delete`(p_Id_piece_line int,piece_type varchar(255), p_product int, quantity decimal(15,5), IdPiece int, p_warehouse int)
BEGIN
declare p_stock decimal(15,5) default 0;
declare p_th_stock decimal(15,5) default 0;
declare p_cump decimal(15,5) default 0;
declare c_product int;
DECLARE p_quantity decimal(15,5) default 0;
DECLARE p_th_quantity decimal(15,5) default 0;
DECLARE actual bool default 0;
DECLARE theorical bool default 0;
declare IdOrder int default 0;
declare IdInvoice int default 0;
case piece_type
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set theorical = 1;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set theorical = 1;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set actual = 1;
set IdInvoice = (select  (case coalesce(purchase_shipping.invoice ,0)  when  0 then coalesce(purchase_invoice_1.Id,0) else coalesce(purchase_shipping.invoice,0) end)
FROM purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id  LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=1 LEFT OUTER JOIN
purchase_invoice purchase_invoice_1 ON purchase_order.Id = purchase_invoice_1.`order` and purchase_invoice_1.validated=1 AND purchase_invoice_1.`order` <> 0
where purchase_shipping.Id = IdPiece);
if(IdInvoice=0) then
set IdOrder = (select  (case coalesce(purchase_shipping.`order`,0)  when  0 then coalesce(purchase_order_1.Id,0) else coalesce(purchase_shipping.`order`,0) end)
FROM            purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id and purchase_order.validated=1 and purchase_order.delivred= 0 LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=0 LEFT OUTER JOIN
purchase_order purchase_order_1 ON purchase_invoice.`order` = purchase_order_1.Id  and purchase_order_1.validated=1 and purchase_order_1.delivred= 0 AND purchase_invoice.`order` <> 0
where purchase_shipping.Id = IdPiece);
end if;
if(IdOrder=0 and IdInvoice=0)then
set theorical = 1;
end if;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set theorical = 1;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set theorical = 1;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set actual = 1;
set IdInvoice = (select  (case coalesce(sale_shipping.invoice ,0)  when  0 then coalesce(sale_invoice_1.Id,0) else coalesce(sale_shipping.invoice,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id  LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=1 LEFT OUTER JOIN
sale_invoice sale_invoice_1 ON sale_order.Id = sale_invoice_1.`order` and sale_invoice_1.validated=1 AND sale_invoice_1.`order` <> 0
where sale_shipping.Id = IdPiece);
if(IdInvoice=0) then
set IdOrder = (select  (case coalesce(sale_shipping.`order`,0)  when  0 then coalesce(sale_order_1.Id,0) else coalesce(sale_shipping.`order`,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id and sale_order.validated=1 and sale_order.delivred= 0 LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=0 LEFT OUTER JOIN
sale_order sale_order_1 ON sale_invoice.`order` = sale_order_1.Id  and sale_order_1.validated=1 and sale_order_1.delivred= 0 AND sale_invoice.`order` <> 0
where sale_shipping.Id = IdPiece);
end if;
if(IdOrder=0 and IdInvoice=0)then
set theorical = 1;
end if;
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set actual = 1;
set IdInvoice = (select  coalesce(pos_order.invoice ,0)
FROM  pos_order LEFT OUTER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id and sale_invoice.validated=1 and pos_order.invoice<>0
where pos_order.Id = IdPiece);
if(IdInvoice=0) then
set theorical = 1;
end if;
else
set theorical = 1;
set actual = 1;
end case;
call get_all_stock_by_warehouse(p_product, p_warehouse, @p_stock, @p_th_stock, @p_cump);
set p_stock=@p_stock;
set p_th_stock=@p_th_stock;
set p_cump=@p_cump;
if (actual) then
SET p_quantity=p_stock+quantity;
else
SET p_quantity=p_stock;
end if;
if (theorical) then
SET p_th_quantity=p_th_stock+quantity;
else
SET p_th_quantity=p_th_stock;
end if;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select p_Id_piece_line, piece_type, -quantity, p_quantity, p_th_quantity, p_product,now() ,IdPiece, 'delete', p_warehouse, p_cump);
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_sale_rest_amount` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_sale_rest_amount`(p_IdPartner int)
BEGIN
declare c_rest_amount decimal(15,5) default 0;
declare c_due_date datetime;
declare c_customer bool;
select customer into c_customer from commercial_partner where Id=p_IdPartner;
if(p_IdPartner<>0 AND c_customer) then
select SUM(rest_amount), MIN(due_date) into c_rest_amount, c_due_date from
(
select Id, create_date, (total_amount-paied_amount) as rest_amount, due_date, partner
from sale_invoice where partner=p_IdPartner and (total_amount-paied_amount)>0
Union
select Id, create_date, (total_amount-paied_amount) as rest_amount, due_date, partner
from sale_shipping where invoice =0 and partner=p_IdPartner and (total_amount-paied_amount)>0
Union
select Id, create_date, (total_amount-paied_amount) as rest_amount, due_date, partner
from sale_order where (total_amount-paied_amount)>0 and partner=p_IdPartner and Id not in
(select `order` from sale_invoice where `order`=sale_order.Id
union select `order` from sale_shipping where `order`=sale_order.Id)
Union
select Id, create_date, (total_amount-paied_amount) as rest_amount, due_date, partner
from pos_order where invoice =0 and (total_amount-paied_amount)>0 and partner=p_IdPartner
) X group by partner;
update commercial_partner set rest_amount=c_rest_amount, due_date=c_due_date where Id=p_IdPartner;
end if;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_stock_correction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_stock_correction`(IdPiece int, piece_type varchar(255))
BEGIN
declare done int default 0;
declare c_Id int;
declare c_product int;
declare c_quantity decimal(15,5) default 0;
declare done_holder int;
declare p_warehouse int default 0;
declare p_warehouse_out int default 0;
declare p_order int default 0;
declare p_invoice int default 0;
declare p_shipping int default 0;
declare p_pos_order int default 0;
declare p_delivred boolean default 0;
declare checFreind boolean default 0;
declare checThehorical boolean default 0;
declare c_pos_order cursor for
SELECT        pos_order_line.Id, pos_order_line.product, pos_order_line.quantity
FROM            pos_order_line
WHERE        (pos_order_line.piece = IdPiece);
declare c_pos_credit_order cursor for
SELECT        pos_credit_order_line.Id, pos_credit_order_line.product, pos_credit_order_line.quantity
FROM            pos_credit_order_line
WHERE        (pos_credit_order_line.piece = IdPiece);
declare c_purchase_shipping cursor for
SELECT        purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.quantity
FROM            purchase_shipping_line
WHERE        (purchase_shipping_line.piece = IdPiece);
declare c_sale_shipping cursor for
SELECT        sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.quantity
FROM            sale_shipping_line
WHERE        (sale_shipping_line.piece = IdPiece);
declare c_purchase_invoice cursor for
SELECT        purchase_invoice_line.Id, purchase_invoice_line.product, purchase_invoice_line.quantity
FROM            purchase_invoice_line
WHERE        (purchase_invoice_line.piece = IdPiece);
declare c_sale_invoice cursor for
SELECT        sale_invoice_line.Id, sale_invoice_line.product, sale_invoice_line.quantity
FROM            sale_invoice_line
WHERE        (sale_invoice_line.piece = IdPiece);
declare c_sale_credit_invoice cursor for
SELECT        sale_credit_invoice_line.Id, sale_credit_invoice_line.product, sale_credit_invoice_line.quantity
FROM            sale_credit_invoice_line
WHERE        (sale_credit_invoice_line.piece = IdPiece);
declare c_purchase_credit_invoice cursor for
SELECT        purchase_credit_invoice_line.Id, purchase_credit_invoice_line.product, purchase_credit_invoice_line.quantity
FROM            purchase_credit_invoice_line
WHERE        (purchase_credit_invoice_line.piece = IdPiece);
declare c_purchase_order cursor for
SELECT        purchase_order_line.Id, purchase_order_line.product, purchase_order_line.quantity
FROM            purchase_order_line
WHERE        (purchase_order_line.piece = IdPiece);
declare c_sale_order cursor for
SELECT        sale_order_line.Id, sale_order_line.product, sale_order_line.quantity
FROM            sale_order_line
WHERE        (sale_order_line.piece = IdPiece);
declare c_stock_entry cursor for
SELECT        commercial_stock_entry_line.Id, commercial_stock_entry_line.product, commercial_stock_entry_line.quantity
FROM            commercial_stock_entry_line
WHERE        (commercial_stock_entry_line.piece = IdPiece);
declare c_stock_out cursor for
SELECT        commercial_stock_out_line.Id, commercial_stock_out_line.product, commercial_stock_out_line.quantity
FROM            commercial_stock_out_line
WHERE        (commercial_stock_out_line.piece = IdPiece);
declare c_stock_mouvement cursor for
SELECT        commercial_stock_mouvement_line.Id, commercial_stock_mouvement_line.product, commercial_stock_mouvement_line.quantity
FROM            commercial_stock_mouvement_line
WHERE        (commercial_stock_mouvement_line.piece = IdPiece);
declare c_purchase_shipping_of_invoice cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.invoice = IdPiece);
declare c_purchase_shipping_of_order cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.`order` = IdPiece);
declare c_sale_shipping_of_invoice cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.invoice = IdPiece);
declare c_sale_shipping_of_order cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.`order` = IdPiece);
declare c_pos_order_of_invoice cursor for
SELECT        pos_order.Id
FROM            pos_order
WHERE        (pos_order.invoice = IdPiece);
declare continue handler for sqlstate '02000' set done=1;
case piece_type
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
DECLARE theorical bool default 0;
declare IdInvoice int default 0;
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
pos_order ON commercial_product_stock.piece = pos_order.Id and
commercial_product_stock.piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(pos_order.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert'
and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  coalesce(pos_order.invoice ,0)
FROM  pos_order LEFT OUTER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id and sale_invoice.validated=1 and pos_order.invoice<>0
where pos_order.Id = IdPiece);
if(IdInvoice=0) then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical = 1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock
WHERE commercial_product_stock.piece_type='POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Restoration.Consomation_table, Restoration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
DECLARE theorical bool default 0;
declare IdInvoice int default 0;
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT       commercial_product_stock,Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock
WHERE commercial_product_stock.piece_type='Restoration.Consomation_table, Restoration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  coalesce(pos_order.invoice ,0)
FROM  pos_order LEFT OUTER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id and sale_invoice.validated=1 and pos_order.invoice<>0
where pos_order.Id = IdPiece);
if(IdInvoice=0) then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical = 1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
DECLARE theorical bool default 0;
declare IdOrder int default 0;
declare IdInvoice int default 0;
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
purchase_shipping ON commercial_product_stock.piece = purchase_shipping.Id and
commercial_product_stock.piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(purchase_shipping.Id = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  (case coalesce(purchase_shipping.invoice ,0)  when  0 then coalesce(purchase_invoice_1.Id,0) else coalesce(purchase_shipping.invoice,0) end)
FROM purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id  LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=1 LEFT OUTER JOIN
purchase_invoice purchase_invoice_1 ON purchase_order.Id = purchase_invoice_1.`order` and purchase_invoice_1.validated=1 AND purchase_invoice_1.`order` <> 0
where purchase_shipping.Id = IdPiece);
if(IdInvoice=0) then
set IdOrder = (select  (case coalesce(purchase_shipping.`order`,0)  when  0 then coalesce(purchase_order_1.Id,0) else coalesce(purchase_shipping.`order`,0) end)
FROM            purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id and purchase_order.validated=1 and purchase_order.delivred= 0 LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=0 LEFT OUTER JOIN
purchase_order purchase_order_1 ON purchase_invoice.`order` = purchase_order_1.Id  and purchase_order_1.validated=1 and purchase_order_1.delivred= 0 AND purchase_invoice.`order` <> 0
where purchase_shipping.Id = IdPiece);
end if;
if(IdOrder=0 and IdInvoice=0)then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical=1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int ;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
purchase_invoice ON commercial_product_stock.piece = purchase_invoice.Id and
commercial_product_stock.piece_type='Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(purchase_invoice.Id = IdPiece) and commercial_product_stock.`action`<>'correction' and
commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id,  piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
purchase_shipping_return ON commercial_product_stock.piece = purchase_shipping_return.Id and
commercial_product_stock.piece_type='Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(purchase_shipping_return.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete'  and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock  WHERE
commercial_product_stock.piece_type='Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
DECLARE theorical bool default 0;
declare IdOrder int default 0;
declare IdInvoice int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id,  piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
sale_shipping ON commercial_product_stock.piece = sale_shipping.Id and
commercial_product_stock.piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(sale_shipping.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  (case coalesce(sale_shipping.invoice ,0)  when  0 then coalesce(sale_invoice_1.Id,0) else coalesce(sale_shipping.invoice,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id  LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=1 LEFT OUTER JOIN
sale_invoice sale_invoice_1 ON sale_order.Id = sale_invoice_1.`order` and sale_invoice_1.validated=1 AND sale_invoice_1.`order` <> 0
where sale_shipping.Id = IdPiece);
if(IdInvoice=0) then
set IdOrder = (select  (case coalesce(sale_shipping.`order`,0)  when  0 then coalesce(sale_order_1.Id,0) else coalesce(sale_shipping.`order`,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id and sale_order.validated=1 and sale_order.delivred= 0 LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=0 LEFT OUTER JOIN
sale_order sale_order_1 ON sale_invoice.`order` = sale_order_1.Id  and sale_order_1.validated=1 and sale_order_1.delivred= 0 AND sale_invoice.`order` <> 0
where sale_shipping.Id = IdPiece);
end if;
if(IdOrder=0 and IdInvoice=0)then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical = 1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id , piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
sale_invoice ON commercial_product_stock.piece = sale_invoice.Id and
commercial_product_stock.piece_type='Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(sale_invoice.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int default 0;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
sale_shipping_return ON commercial_product_stock.piece = sale_shipping_return.Id and
commercial_product_stock.piece_type='Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(sale_shipping_return.Id = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT       commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM      commercial_product_stock LEFT OUTER JOIN
sale_order ON commercial_product_stock.piece = sale_order.Id and
commercial_product_stock.piece_type='Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE        (sale_order.Id = IdPiece)  and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock+s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int default 0;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT       commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
commercial_stock_out ON commercial_product_stock.piece = commercial_stock_out.Id and
commercial_product_stock.piece_type='Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(commercial_stock_out.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int ;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
commercial_stock_entry ON commercial_product_stock.piece = commercial_stock_entry.Id and
commercial_product_stock.piece_type='Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(commercial_stock_entry.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'correction', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare p_stock_in int ;
declare p_stock_out int ;
select stock_in, stock_out into p_stock_in, p_stock_out from commercial_stock_mouvement where Id=IdPiece;
call update_stock_correction(p_stock_in, 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
delete from commercial_stock_entry where Id=p_stock_in;
delete from commercial_stock_entry_line where piece=p_stock_in;
call update_stock_correction(p_stock_in, 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
delete from commercial_stock_entry where Id=p_stock_out;
delete from commercial_stock_entry_line where piece=p_stock_out;
end;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_stock_end_correction` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_stock_end_correction`(IdPiece int, piece_type varchar(255))
BEGIN
declare done int default 0;
declare c_Id int;
declare c_product int;
declare c_quantity decimal(15,5) default 0;
declare done_holder int;
declare p_warehouse int default 0;
declare p_warehouse_out int default 0;
declare p_order int default 0;
declare p_invoice int default 0;
declare p_shipping int default 0;
declare p_pos_order int default 0;
declare p_delivred boolean default 0;
declare checFreind boolean default 0;
declare checThehorical boolean default 0;
declare c_pos_order cursor for
SELECT        pos_order_line.Id, pos_order_line.product, pos_order_line.quantity
FROM            pos_order_line
WHERE        (pos_order_line.piece = IdPiece);
declare c_pos_credit_order cursor for
SELECT        pos_credit_order_line.Id, pos_credit_order_line.product, pos_credit_order_line.quantity
FROM            pos_credit_order_line
WHERE        (pos_credit_order_line.piece = IdPiece);
declare c_purchase_shipping cursor for
SELECT        purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.quantity
FROM            purchase_shipping_line
WHERE        (purchase_shipping_line.piece = IdPiece);
declare c_sale_shipping cursor for
SELECT        sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.quantity
FROM            sale_shipping_line
WHERE        (sale_shipping_line.piece = IdPiece);
declare c_purchase_invoice cursor for
SELECT        purchase_invoice_line.Id, purchase_invoice_line.product, purchase_invoice_line.quantity
FROM            purchase_invoice_line
WHERE        (purchase_invoice_line.piece = IdPiece);
declare c_sale_invoice cursor for
SELECT        sale_invoice_line.Id, sale_invoice_line.product, sale_invoice_line.quantity
FROM            sale_invoice_line
WHERE        (sale_invoice_line.piece = IdPiece);
declare c_sale_shipping_return cursor for
SELECT        sale_shipping_return_line.Id, sale_shipping_return_line.product, sale_shipping_return_line.quantity
FROM            sale_shipping_return_line
WHERE        (sale_shipping_return_line.piece = IdPiece);
declare c_purchase_shipping_return cursor for
SELECT        purchase_shipping_return_line.Id, purchase_shipping_return_line.product, purchase_shipping_return_line.quantity
FROM            purchase_shipping_return_line
WHERE        (purchase_shipping_return_line.piece = IdPiece);
declare c_purchase_order cursor for
SELECT        purchase_order_line.Id, purchase_order_line.product, purchase_order_line.quantity
FROM            purchase_order_line
WHERE        (purchase_order_line.piece = IdPiece);
declare c_sale_order cursor for
SELECT        sale_order_line.Id, sale_order_line.product, sale_order_line.quantity
FROM            sale_order_line
WHERE        (sale_order_line.piece = IdPiece);
declare c_stock_entry cursor for
SELECT        commercial_stock_entry_line.Id, commercial_stock_entry_line.product, commercial_stock_entry_line.quantity
FROM            commercial_stock_entry_line
WHERE        (commercial_stock_entry_line.piece = IdPiece);
declare c_stock_out cursor for
SELECT        commercial_stock_out_line.Id, commercial_stock_out_line.product, commercial_stock_out_line.quantity
FROM            commercial_stock_out_line
WHERE        (commercial_stock_out_line.piece = IdPiece);
declare c_stock_mouvement cursor for
SELECT        commercial_stock_mouvement_line.Id, commercial_stock_mouvement_line.product, commercial_stock_mouvement_line.quantity
FROM            commercial_stock_mouvement_line
WHERE        (commercial_stock_mouvement_line.piece = IdPiece);
declare c_purchase_shipping_of_invoice cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.invoice = IdPiece);
declare c_purchase_shipping_of_order cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.`order` = IdPiece);
declare c_sale_shipping_of_invoice cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.invoice = IdPiece);
declare c_sale_shipping_of_order cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.`order` = IdPiece);
declare c_pos_order_of_invoice cursor for
SELECT        pos_order.Id
FROM            pos_order
WHERE        (pos_order.invoice = IdPiece);
declare continue handler for sqlstate '02000' set done=1;
case piece_type
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if((SELECT        COUNT(pos_order.Id)
FROM            pos_order INNER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id AND sale_invoice.validated = 1
WHERE        (pos_order.Id = IdPiece))=0)
then
set checThehorical=1;
end if;
set done=0;
open c_pos_order;
repeat
fetch c_pos_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
set p_warehouse= get_warehouse_by_piece_line(c_Id);
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, checThehorical, p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_pos_order;
SET done=0;
when 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set done=0;
open c_pos_credit_order;
repeat
fetch c_pos_credit_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
set p_warehouse= get_warehouse_by_credit_order_line(c_Id);
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true, p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_pos_credit_order;
SET done=0;
when 'Restoration.Consomation_table, Restoration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
if((SELECT        COUNT(pos_order.Id)
FROM            pos_order INNER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id AND sale_invoice.validated = 1
WHERE        (pos_order.Id = IdPiece))=0)
then
set checThehorical=1;
end if;
set done=0;
open c_pos_order;
repeat
fetch c_pos_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
set p_warehouse= get_warehouse_by_piece_line(c_Id);
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, checThehorical, p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_pos_order;
SET done=0;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from sale_shipping where Id=IdPiece;
if not check_sale_shipping_freind(IdPiece) then
set done=0;
open c_sale_shipping;
repeat
fetch c_sale_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping;
SET done=0;
else
set done=0;
open c_sale_shipping;
repeat
fetch c_sale_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, false,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping;
SET done=0;
end if;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set done=0;
open c_sale_invoice;
repeat
fetch c_sale_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_invoice;
SET done=0;
when 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from sale_shipping_return where Id=IdPiece;
set done=0;
open c_sale_shipping_return;
repeat
fetch c_sale_shipping_return into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_shipping_return;
SET done=0;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select count(*) into p_invoice from sale_invoice
WHERE   (sale_invoice.`order` = IdPiece) and sale_invoice.validated = 1;
if (p_invoice=0) then
set done=0;
open c_sale_order;
repeat
fetch c_sale_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_sale_order;
SET done=0;
end if;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from purchase_shipping where Id=IdPiece;
if not check_Purchase_shipping_freind(IdPiece) then
set done=0;
open c_purchase_shipping;
repeat
fetch c_purchase_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping;
SET done=0;
else
set done=0;
open c_purchase_shipping;
repeat
fetch c_purchase_shipping into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, false,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping;
SET done=0;
end if;
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
set done=0;
open c_purchase_invoice;
repeat
fetch c_purchase_invoice into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_invoice;
SET done=0;
when 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from purchase_shipping_return where Id=IdPiece;
set done=0;
open c_purchase_shipping_return;
repeat
fetch c_purchase_shipping_return into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_shipping_return;
SET done=0;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select count(*) into p_invoice from purchase_invoice
WHERE   (purchase_invoice.`order` = IdPiece) and purchase_invoice.validated = 1;
if (p_invoice=0) then
set done=0;
open c_purchase_order;
repeat
fetch c_purchase_order into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, false, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_purchase_order;
SET done=0;
end if;
when 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from commercial_stock_out where Id=IdPiece;
set done=0;
open c_stock_out;
repeat
fetch c_stock_out into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_stock_out;
SET done=0;
when 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse into p_warehouse from commercial_stock_entry where Id=IdPiece;
set done=0;
open c_stock_entry;
repeat
fetch c_stock_entry into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true,p_warehouse, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_stock_entry;
SET done=0;
when 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select warehouse_in, warehouse_out into p_warehouse, p_warehouse_out from commercial_stock_mouvement where Id=IdPiece;
set done=0;
open c_stock_mouvement;
repeat
fetch c_stock_mouvement into c_Id, c_product, c_quantity;
if not done then
set done_holder=done;
call insert_product_stock(c_Id, piece_type, c_product, c_quantity, IdPiece, true, true, p_warehouse, 'insert');
call insert_product_stock(c_Id, piece_type, c_product, -c_quantity, IdPiece, true, true, p_warehouse_out, 'insert');
set done=done_holder;
end if;
until done end repeat;
close c_stock_mouvement;
SET done=0;
else set done=0 ;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_stock_on_delete` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_stock_on_delete`(IdPiece int, piece_type varchar(255))
BEGIN
declare done int default 0;
declare c_Id int;
declare c_product int;
declare c_quantity decimal(15,5) default 0;
declare done_holder int;
declare p_warehouse int default 0;
declare p_warehouse_out int default 0;
declare p_order int default 0;
declare p_invoice int default 0;
declare p_shipping int default 0;
declare p_pos_order int default 0;
declare p_delivred boolean default 0;
declare checFreind boolean default 0;
declare checThehorical boolean default 0;
declare c_pos_order cursor for
SELECT        pos_order_line.Id, pos_order_line.product, pos_order_line.quantity
FROM            pos_order_line
WHERE        (pos_order_line.piece = IdPiece);
declare c_pos_credit_order cursor for
SELECT        pos_credit_order_line.Id, pos_credit_order_line.product, pos_credit_order_line.quantity
FROM            pos_credit_order_line
WHERE        (pos_credit_order_line.piece = IdPiece);
declare c_purchase_shipping cursor for
SELECT        purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.quantity
FROM            purchase_shipping_line
WHERE        (purchase_shipping_line.piece = IdPiece);
declare c_sale_shipping cursor for
SELECT        sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.quantity
FROM            sale_shipping_line
WHERE        (sale_shipping_line.piece = IdPiece);
declare c_purchase_invoice cursor for
SELECT        purchase_invoice_line.Id, purchase_invoice_line.product, purchase_invoice_line.quantity
FROM            purchase_invoice_line
WHERE        (purchase_invoice_line.piece = IdPiece);
declare c_sale_invoice cursor for
SELECT        sale_invoice_line.Id, sale_invoice_line.product, sale_invoice_line.quantity
FROM            sale_invoice_line
WHERE        (sale_invoice_line.piece = IdPiece);
declare c_sale_credit_invoice cursor for
SELECT        sale_credit_invoice_line.Id, sale_credit_invoice_line.product, sale_credit_invoice_line.quantity
FROM            sale_credit_invoice_line
WHERE        (sale_credit_invoice_line.piece = IdPiece);
declare c_purchase_credit_invoice cursor for
SELECT        purchase_credit_invoice_line.Id, purchase_credit_invoice_line.product, purchase_credit_invoice_line.quantity
FROM            purchase_credit_invoice_line
WHERE        (purchase_credit_invoice_line.piece = IdPiece);
declare c_purchase_order cursor for
SELECT        purchase_order_line.Id, purchase_order_line.product, purchase_order_line.quantity
FROM            purchase_order_line
WHERE        (purchase_order_line.piece = IdPiece);
declare c_sale_order cursor for
SELECT        sale_order_line.Id, sale_order_line.product, sale_order_line.quantity
FROM            sale_order_line
WHERE        (sale_order_line.piece = IdPiece);
declare c_stock_entry cursor for
SELECT        commercial_stock_entry_line.Id, commercial_stock_entry_line.product, commercial_stock_entry_line.quantity
FROM            commercial_stock_entry_line
WHERE        (commercial_stock_entry_line.piece = IdPiece);
declare c_stock_out cursor for
SELECT        commercial_stock_out_line.Id, commercial_stock_out_line.product, commercial_stock_out_line.quantity
FROM            commercial_stock_out_line
WHERE        (commercial_stock_out_line.piece = IdPiece);
declare c_stock_mouvement cursor for
SELECT        commercial_stock_mouvement_line.Id, commercial_stock_mouvement_line.product, commercial_stock_mouvement_line.quantity
FROM            commercial_stock_mouvement_line
WHERE        (commercial_stock_mouvement_line.piece = IdPiece);
declare c_purchase_shipping_of_invoice cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.invoice = IdPiece);
declare c_purchase_shipping_of_order cursor for
SELECT        purchase_shipping.Id
FROM            purchase_shipping
WHERE        (purchase_shipping.`order` = IdPiece);
declare c_sale_shipping_of_invoice cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.invoice = IdPiece);
declare c_sale_shipping_of_order cursor for
SELECT        sale_shipping.Id
FROM            sale_shipping
WHERE        (sale_shipping.`order` = IdPiece);
declare c_pos_order_of_invoice cursor for
SELECT        pos_order.Id
FROM            pos_order
WHERE        (pos_order.invoice = IdPiece);
declare continue handler for sqlstate '02000' set done=1;
case piece_type
when 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
DECLARE theorical bool default 0;
declare IdInvoice int default 0;
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
pos_order ON commercial_product_stock.piece = pos_order.Id and
commercial_product_stock.piece_type='POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(pos_order.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert'
and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  coalesce(pos_order.invoice ,0)
FROM  pos_order LEFT OUTER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id and sale_invoice.validated=1 and pos_order.invoice<>0
where pos_order.Id = IdPiece);
if(IdInvoice=0) then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical = 1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock
WHERE commercial_product_stock.piece_type='POS.Credit_order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Restoration.Consomation_table, Restoration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
DECLARE theorical bool default 0;
declare IdInvoice int default 0;
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT       commercial_product_stock,Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock
WHERE commercial_product_stock.piece_type='Restoration.Consomation_table, Restoration, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  coalesce(pos_order.invoice ,0)
FROM  pos_order LEFT OUTER JOIN
sale_invoice ON pos_order.invoice = sale_invoice.Id and sale_invoice.validated=1 and pos_order.invoice<>0
where pos_order.Id = IdPiece);
if(IdInvoice=0) then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical = 1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
DECLARE theorical bool default 0;
declare IdOrder int default 0;
declare IdInvoice int default 0;
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
purchase_shipping ON commercial_product_stock.piece = purchase_shipping.Id and
commercial_product_stock.piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(purchase_shipping.Id = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  (case coalesce(purchase_shipping.invoice ,0)  when  0 then coalesce(purchase_invoice_1.Id,0) else coalesce(purchase_shipping.invoice,0) end)
FROM purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id  LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=1 LEFT OUTER JOIN
purchase_invoice purchase_invoice_1 ON purchase_order.Id = purchase_invoice_1.`order` and purchase_invoice_1.validated=1 AND purchase_invoice_1.`order` <> 0
where purchase_shipping.Id = IdPiece);
if(IdInvoice=0) then
set IdOrder = (select  (case coalesce(purchase_shipping.`order`,0)  when  0 then coalesce(purchase_order_1.Id,0) else coalesce(purchase_shipping.`order`,0) end)
FROM            purchase_shipping LEFT OUTER JOIN
purchase_order ON purchase_shipping.`order` = purchase_order.Id and purchase_order.validated=1 and purchase_order.delivred= 0 LEFT OUTER JOIN
purchase_invoice ON purchase_shipping.invoice = purchase_invoice.Id and purchase_invoice.validated=0 LEFT OUTER JOIN
purchase_order purchase_order_1 ON purchase_invoice.`order` = purchase_order_1.Id  and purchase_order_1.validated=1 and purchase_order_1.delivred= 0 AND purchase_invoice.`order` <> 0
where purchase_shipping.Id = IdPiece);
end if;
if(IdOrder=0 and IdInvoice=0)then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical=1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int ;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
purchase_invoice ON commercial_product_stock.piece = purchase_invoice.Id and
commercial_product_stock.piece_type='Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(purchase_invoice.Id = IdPiece) and commercial_product_stock.`action`<>'correction' and
commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id,  piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
purchase_shipping_return ON commercial_product_stock.piece = purchase_shipping_return.Id and
commercial_product_stock.piece_type='Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(purchase_shipping_return.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete'  and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock  WHERE
commercial_product_stock.piece_type='Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
DECLARE theorical bool default 0;
declare IdOrder int default 0;
declare IdInvoice int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id,  piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
sale_shipping ON commercial_product_stock.piece = sale_shipping.Id and
commercial_product_stock.piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(sale_shipping.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set IdInvoice = (select  (case coalesce(sale_shipping.invoice ,0)  when  0 then coalesce(sale_invoice_1.Id,0) else coalesce(sale_shipping.invoice,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id  LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=1 LEFT OUTER JOIN
sale_invoice sale_invoice_1 ON sale_order.Id = sale_invoice_1.`order` and sale_invoice_1.validated=1 AND sale_invoice_1.`order` <> 0
where sale_shipping.Id = IdPiece);
if(IdInvoice=0) then
set IdOrder = (select  (case coalesce(sale_shipping.`order`,0)  when  0 then coalesce(sale_order_1.Id,0) else coalesce(sale_shipping.`order`,0) end)
FROM            sale_shipping LEFT OUTER JOIN
sale_order ON sale_shipping.`order` = sale_order.Id and sale_order.validated=1 and sale_order.delivred= 0 LEFT OUTER JOIN
sale_invoice ON sale_shipping.invoice = sale_invoice.Id and sale_invoice.validated=0 LEFT OUTER JOIN
sale_order sale_order_1 ON sale_invoice.`order` = sale_order_1.Id  and sale_order_1.validated=1 and sale_order_1.delivred= 0 AND sale_invoice.`order` <> 0
where sale_shipping.Id = IdPiece);
end if;
if(IdOrder=0 and IdInvoice=0)then
set theorical = 1;
end if;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
if(theorical = 1) then
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
else
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
end if;
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT      commercial_product_stock.Id , piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
sale_invoice ON commercial_product_stock.piece = sale_invoice.Id and
commercial_product_stock.piece_type='Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(sale_invoice.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int default 0;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
sale_shipping_return ON commercial_product_stock.piece = sale_shipping_return.Id and
commercial_product_stock.piece_type='Sale.Shipping_return, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(sale_shipping_return.Id = IdPiece) and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT       commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM      commercial_product_stock LEFT OUTER JOIN
sale_order ON commercial_product_stock.piece = sale_order.Id and
commercial_product_stock.piece_type='Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE        (sale_order.Id = IdPiece)  and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock, s_th_stock+s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int default 0;
declare s_piece_line int default 0;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  ;
declare s_commercial_product_stock cursor for
SELECT       commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
commercial_stock_out ON commercial_product_stock.piece = commercial_stock_out.Id and
commercial_product_stock.piece_type='Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(commercial_stock_out.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare s_Id int ;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5)  ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int ;
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, commercial_product_stock.warehouse
FROM                        commercial_product_stock LEFT OUTER JOIN
commercial_stock_entry ON commercial_product_stock.piece = commercial_stock_entry.Id and
commercial_product_stock.piece_type='Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
WHERE(commercial_stock_entry.Id = IdPiece) and  commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and commercial_product_stock.`action`<>'transfert' and  commercial_product_stock.`action`<>'canceled';
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
update commercial_product_stock set `action`= 'canceled' where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line,s_piece_type, -s_quantity, s_reel_stock + s_quantity, s_th_stock + s_quantity, s_product,now() ,s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
end;
when 'Commercial.Stock_mouvement, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
begin
declare p_stock_in int ;
declare p_stock_out int ;
select stock_in, stock_out into p_stock_in, p_stock_out from commercial_stock_mouvement where Id=IdPiece;
call update_stock_correction(p_stock_in, 'Commercial.Stock_entry, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
delete from commercial_stock_entry where Id=p_stock_in;
delete from commercial_stock_entry_line where piece=p_stock_in;
call update_stock_correction(p_stock_in, 'Commercial.Stock_out, Commercial, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null');
delete from commercial_stock_entry where Id=p_stock_out;
delete from commercial_stock_entry_line where piece=p_stock_out;
end;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;
/*!50003 DROP PROCEDURE IF EXISTS `update_stock_on_delivred_changed` */;
/*!50003 SET @saved_cs_client      = @@character_set_client */ ;
/*!50003 SET @saved_cs_results     = @@character_set_results */ ;
/*!50003 SET @saved_col_connection = @@collation_connection */ ;
/*!50003 SET character_set_client  = utf8 */ ;
/*!50003 SET character_set_results = utf8 */ ;
/*!50003 SET collation_connection  = utf8_general_ci */ ;
/*!50003 SET @saved_sql_mode       = @@sql_mode */ ;
/*!50003 SET sql_mode              = 'STRICT_TRANS_TABLES,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION' */ ;
DELIMITER ;;
/*!50003 CREATE*/ /*!50020 DEFINER=`root`@`localhost`*/ /*!50003 PROCEDURE `update_stock_on_delivred_changed`(IdPiece int, piece_type varchar(255), delivred tinyint(1))
BEGIN
declare p_invoice int default 0;
declare done int default 0;
declare p_stock decimal(15,5) default 0;
declare p_th_stock decimal(15,5) default 0;
declare p_cump decimal(15,5) default 0;
declare done_holder int;
declare s_Id int ;
declare s_piece_line int ;
declare s_piece_type varchar(255) ;
declare s_quantity decimal(15,5) ;
declare s_actual_stock decimal(15,5)  ;
declare s_theoretical_stock decimal(15,5) ;
declare s_reel_stock decimal(15,5)  ;
declare s_th_stock decimal(15,5)  ;
declare s_cump decimal(15,5)  ;
declare s_product int  ;
declare s_date datetime ;
declare s_piece int ;
declare s_warehouse int  default 0;
declare continue handler for sqlstate '02000' set done=1;
case piece_type
when 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select count(*) into p_invoice from purchase_invoice
WHERE   (purchase_invoice.`order` = IdPiece) and purchase_invoice.validated = 1;
if (p_invoice=0) then
if(delivred) then
begin
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock  WHERE
commercial_product_stock.piece_type='Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and `action`<>'correction' and `action`<>'delete' and `action`<>'delivred';
declare s_purchase_shipping_line cursor for
select purchase_shipping_line.Id, purchase_shipping_line.product, purchase_shipping_line.quantity, purchase_shipping_line.piece
from purchase_shipping_line left outer join
purchase_shipping on purchase_shipping_line.piece = purchase_shipping.Id left outer join
purchase_order on purchase_shipping.`order`= purchase_order.Id  left outer join
purchase_invoice on purchase_shipping.invoice= purchase_invoice.Id  and purchase_shipping.invoice<>0  left outer join
purchase_order purchase_order_2 on purchase_invoice.`order` =purchase_order_2.Id and purchase_invoice.`order`<>0
where
(purchase_shipping.`order`=IdPiece or purchase_order_2.Id=IdPiece)and  purchase_shipping.validated=1;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
delete from commercial_product_stock where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line, s_piece_type, s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() , IdPiece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
open s_purchase_shipping_line;
repeat
fetch s_purchase_shipping_line into s_piece_line, s_product, s_quantity, s_piece;
if not done then
set done_holder=done;
delete from commercial_product_stock where commercial_product_stock.piece_line=s_piece_line and commercial_product_stock.piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
call insert_product_stock(s_piece_line, 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', s_product, -s_quantity, s_piece, false, true, s_warehouse, 'deliver');
set done=done_holder;
end if;
until done end repeat;
close s_purchase_shipping_line;
SET done=0;
end;
else
begin
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, commercial_product_stock.piece, commercial_product_stock.warehouse
FROM  commercial_product_stock LEFT OUTER JOIN
purchase_shipping on commercial_product_stock.piece=purchase_shipping.Id LEFT OUTER JOIN
purchase_invoice on purchase_invoice.`order`=IdPiece and purchase_invoice.validated=true and purchase_invoice.`order`<>0
WHERE
commercial_product_stock.piece_type='Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (purchase_shipping.`order` = IdPiece or purchase_invoice.`order`=IdPiece) and purchase_shipping.validated=true and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and `action`<>'delivred';
declare s_purchase_order_line cursor for
select Id, product, quantity from purchase_order_line where piece=IdPiece;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
delete from commercial_product_stock where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line, 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() , s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
open s_purchase_order_line;
repeat
fetch s_purchase_order_line into s_Id, s_product, s_quantity;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set p_stock=@p_stock;
set p_th_stock=@p_th_stock;
set p_cump=@p_cump;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity,  actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_Id, piece_type, -s_quantity, p_stock, p_th_stock+s_quantity, s_product,now() ,IdPiece, 'undeliver', s_warehouse, p_cump);
set done=done_holder;
end if;
until done end repeat;
close s_purchase_order_line;
SET done=0;
end;
end if;
end if;
when 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' then
select count(*) into p_invoice from sale_invoice
WHERE   (sale_invoice.`order` = IdPiece) and sale_invoice.validated = 1;
if (p_invoice=0) then
if(delivred) then
begin
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, piece, warehouse
FROM                        commercial_product_stock  WHERE
commercial_product_stock.piece_type='Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (piece = IdPiece) and `action`<>'correction' and `action`<>'delete' and `action`<>'delivred';
declare s_sale_shipping_line cursor for
select sale_shipping_line.Id, sale_shipping_line.product, sale_shipping_line.quantity, sale_shipping_line.piece
from sale_shipping_line left outer join
sale_shipping on sale_shipping_line.piece = sale_shipping.Id left outer join
sale_order on sale_shipping.`order`= sale_order.Id  left outer join
sale_invoice on sale_shipping.invoice= sale_invoice.Id  and sale_shipping.invoice<>0  left outer join
sale_order sale_order_2 on sale_invoice.`order` =sale_order_2.Id and sale_invoice.`order`<>0
where
(sale_shipping.`order`=IdPiece or sale_order_2.Id=IdPiece)and  sale_shipping.validated=1;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
delete from commercial_product_stock where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line, s_piece_type, s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() , IdPiece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
open s_sale_shipping_line;
repeat
fetch s_sale_shipping_line into s_piece_line, s_product, s_quantity, s_piece;
if not done then
set done_holder=done;
delete from commercial_product_stock where commercial_product_stock.piece_line=s_piece_line and commercial_product_stock.piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null';
call insert_product_stock(s_piece_line, 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', s_product, s_quantity, s_piece, false, true, s_warehouse, 'deliver');
set done=done_holder;
end if;
until done end repeat;
close s_sale_shipping_line;
SET done=0;
end;
else
begin
declare s_commercial_product_stock cursor for
SELECT        commercial_product_stock.Id, piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, commercial_product_stock.`date`, commercial_product_stock.piece, commercial_product_stock.warehouse
FROM  commercial_product_stock LEFT OUTER JOIN
sale_shipping on commercial_product_stock.piece=sale_shipping.Id LEFT OUTER JOIN
sale_invoice on sale_invoice.`order`=IdPiece and sale_invoice.validated=true and sale_invoice.`order`<>0
WHERE
commercial_product_stock.piece_type='Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null'
and (sale_shipping.`order` = IdPiece or sale_invoice.`order`=IdPiece) and sale_shipping.validated=true and commercial_product_stock.`action`<>'correction'
and commercial_product_stock.`action`<>'delete' and `action`<>'delivred';
declare s_sale_order_line cursor for
select Id, product, quantity from sale_order_line where piece=IdPiece;
set done=0;
open s_commercial_product_stock;
repeat
fetch s_commercial_product_stock into s_Id, s_piece_line, s_piece_type, s_quantity, s_actual_stock, s_theoretical_stock, s_product, s_date, s_piece, s_warehouse;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set s_reel_stock=@p_stock;
set s_th_stock=@p_th_stock;
set s_cump=@p_cump;
delete from commercial_product_stock where commercial_product_stock.Id=s_Id;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity, actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_piece_line, 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null', s_quantity, s_reel_stock, s_th_stock + s_quantity, s_product,now() , s_piece, 'delete', s_warehouse, s_cump);
set done=done_holder;
end if;
until done end repeat;
close s_commercial_product_stock;
SET done=0;
open s_sale_order_line;
repeat
fetch s_sale_order_line into s_Id, s_product, s_quantity;
if not done then
set done_holder=done;
call get_all_stock_by_warehouse(s_product, s_warehouse, @p_stock, @p_th_stock, @p_cump);
set p_stock=@p_stock;
set p_th_stock=@p_th_stock;
set p_cump=@p_cump;
INSERT INTO commercial_product_stock
(piece_line, piece_type, quantity,  actual_stock, theoretical_stock, product, `date`, piece, `action`, warehouse, cump)
(select s_Id, piece_type, s_quantity, p_stock, p_th_stock-s_quantity, s_product,now() ,IdPiece, 'undeliver', s_warehouse, p_cump);
set done=done_holder;
end if;
until done end repeat;
close s_sale_order_line;
SET done=0;
end;
end if;
end if;
end case;
END */;;
DELIMITER ;
/*!50003 SET sql_mode              = @saved_sql_mode */ ;
/*!50003 SET character_set_client  = @saved_cs_client */ ;
/*!50003 SET character_set_results = @saved_cs_results */ ;
/*!50003 SET collation_connection  = @saved_col_connection */ ;

--
-- Final view structure for view `booking_dashboard`
--

/*!50001 DROP TABLE IF EXISTS `booking_dashboard`*/;
/*!50001 DROP VIEW IF EXISTS `booking_dashboard`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `booking_dashboard` AS select `booking_reservation`.`Id` AS `Id`,`atooerp_person`.`first_name` AS `first_name`,`atooerp_person`.`last_name` AS `last_name`,`booking_room`.`name` AS `Room`,`atooerp_person`.`birth_date` AS `birth_date`,`atooerp_person_sex`.`name` AS `Genre`,`atooerp_country`.`name_fr_fr` AS `Nationalite`,`atooerp_domain`.`name` AS `Desipline`,`atooerp_function`.`name` AS `Niveau`,`atooerp_establishment`.`name` AS `Etablissement`,`booking_reservation_type`.`name` AS `Type`,`booking_reservation`.`begin_date` AS `begin_date`,`booking_reservation`.`end_date` AS `end_date`,`booking_category`.`name` AS `name`,`booking_reservation`.`stirred` AS `stirred`,`residence_in`.`name` AS `residence_in`,`residence_out`.`name` AS `residence_out` from ((((((((((((((`booking_reservation` left join `booking_category` on((`booking_reservation`.`category` = `booking_category`.`Id`))) left join `atooerp_establishment` `residence_in` on((`booking_reservation`.`residence_in` = `residence_in`.`Id`))) left join `atooerp_establishment` `residence_out` on((`booking_reservation`.`residence_out` = `residence_out`.`Id`))) left join `booking_guest` on((`booking_reservation`.`guest` = `booking_guest`.`Id`))) left join `booking_reservation_type` on((`booking_reservation`.`type` = `booking_reservation_type`.`Id`))) left join `atooerp_person` on((`booking_guest`.`Id` = `atooerp_person`.`Id`))) left join `atooerp_person_identity` on(((`atooerp_person`.`Id` = `atooerp_person_identity`.`person`) and (`atooerp_person_identity`.`default` = 1)))) left join `atooerp_person_sex` on((`atooerp_person`.`sex` = `atooerp_person_sex`.`Id`))) left join `atooerp_person_function` on(((`atooerp_person`.`Id` = `atooerp_person_function`.`person`) and (`atooerp_person_function`.`default` = 1)))) left join `atooerp_domain` on((`atooerp_person`.`primary_occupation` = `atooerp_domain`.`Id`))) left join `atooerp_country` on((`atooerp_person_identity`.`country` = `atooerp_country`.`Id`))) left join `atooerp_establishment` on((`atooerp_person_function`.`establishment` = `atooerp_establishment`.`Id`))) left join `booking_room` on((`booking_reservation`.`room` = `booking_room`.`Id`))) left join `atooerp_function` on((`atooerp_person_function`.`function` = `atooerp_function`.`Id`))) where ((`booking_reservation`.`reservation_state` = 2) or (`booking_reservation`.`reservation_state` = 3)) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `category_tree`
--

/*!50001 DROP TABLE IF EXISTS `category_tree`*/;
/*!50001 DROP VIEW IF EXISTS `category_tree`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `category_tree` AS select `commercial_category_3`.`Id` AS `Id`,`commercial_category_9`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((((((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) join `commercial_category` `commercial_category_7` on((`commercial_category_6`.`parent` = `commercial_category_7`.`Id`))) join `commercial_category` `commercial_category_8` on((`commercial_category_7`.`parent` = `commercial_category_8`.`Id`))) join `commercial_category` `commercial_category_9` on((`commercial_category_8`.`parent` = `commercial_category_9`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0) and (`commercial_category_6`.`parent` <> 0) and (`commercial_category_7`.`parent` <> 0) and (`commercial_category_8`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_8`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join (((((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) join `commercial_category` `commercial_category_7` on((`commercial_category_6`.`parent` = `commercial_category_7`.`Id`))) join `commercial_category` `commercial_category_8` on((`commercial_category_7`.`parent` = `commercial_category_8`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0) and (`commercial_category_6`.`parent` <> 0) and (`commercial_category_7`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_7`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) join `commercial_category` `commercial_category_7` on((`commercial_category_6`.`parent` = `commercial_category_7`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0) and (`commercial_category_6`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_6`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join (((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_5`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_4`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join (((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_3`.`parent` <> 0) and (`commercial_category_1`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0)) union select `commercial_category_4`.`Id` AS `Id`,`commercial_category_2`.`Id` AS `Parent` from (`commercial_category` `commercial_category_4` left join (`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) on((`commercial_category_1`.`Id` = `commercial_category_4`.`parent`))) where ((`commercial_category_4`.`parent` <> 0) and (`commercial_category_1`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_1`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join `commercial_category` `commercial_category_1` on((`commercial_category_3`.`parent` = `commercial_category_1`.`Id`))) where (`commercial_category_3`.`parent` <> 0) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_3`.`parent` AS `Parent` from `commercial_category` `commercial_category_3` where (`commercial_category_3`.`parent` = 0) union select `commercial_category`.`Id` AS `Id`,`commercial_category`.`Id` AS `Parent` from `commercial_category` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `commercial_category_tree`
--

/*!50001 DROP TABLE IF EXISTS `commercial_category_tree`*/;
/*!50001 DROP VIEW IF EXISTS `commercial_category_tree`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `commercial_category_tree` AS select `commercial_category_3`.`Id` AS `Id`,`commercial_category_9`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((((((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) join `commercial_category` `commercial_category_7` on((`commercial_category_6`.`parent` = `commercial_category_7`.`Id`))) join `commercial_category` `commercial_category_8` on((`commercial_category_7`.`parent` = `commercial_category_8`.`Id`))) join `commercial_category` `commercial_category_9` on((`commercial_category_8`.`parent` = `commercial_category_9`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0) and (`commercial_category_6`.`parent` <> 0) and (`commercial_category_7`.`parent` <> 0) and (`commercial_category_8`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_8`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join (((((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) join `commercial_category` `commercial_category_7` on((`commercial_category_6`.`parent` = `commercial_category_7`.`Id`))) join `commercial_category` `commercial_category_8` on((`commercial_category_7`.`parent` = `commercial_category_8`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0) and (`commercial_category_6`.`parent` <> 0) and (`commercial_category_7`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_7`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) join `commercial_category` `commercial_category_7` on((`commercial_category_6`.`parent` = `commercial_category_7`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0) and (`commercial_category_6`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_6`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join (((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) join `commercial_category` `commercial_category_6` on((`commercial_category_5`.`parent` = `commercial_category_6`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_5`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_5`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) join `commercial_category` `commercial_category_5` on((`commercial_category_4`.`parent` = `commercial_category_5`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0) and (`commercial_category_4`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_4`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join (((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) join `commercial_category` `commercial_category_4` on((`commercial_category`.`parent` = `commercial_category_4`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_1`.`parent` <> 0) and (`commercial_category_3`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0) and (`commercial_category`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join ((`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) join `commercial_category` on((`commercial_category_2`.`parent` = `commercial_category`.`Id`))) on((`commercial_category_1`.`Id` = `commercial_category_3`.`parent`))) where ((`commercial_category_3`.`parent` <> 0) and (`commercial_category_1`.`parent` <> 0) and (`commercial_category_2`.`parent` <> 0)) union select `commercial_category_4`.`Id` AS `Id`,`commercial_category_2`.`Id` AS `Parent` from (`commercial_category` `commercial_category_4` left join (`commercial_category` `commercial_category_2` join `commercial_category` `commercial_category_1` on((`commercial_category_2`.`Id` = `commercial_category_1`.`parent`))) on((`commercial_category_1`.`Id` = `commercial_category_4`.`parent`))) where ((`commercial_category_4`.`parent` <> 0) and (`commercial_category_1`.`parent` <> 0)) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_1`.`Id` AS `Parent` from (`commercial_category` `commercial_category_3` left join `commercial_category` `commercial_category_1` on((`commercial_category_3`.`parent` = `commercial_category_1`.`Id`))) where (`commercial_category_3`.`parent` <> 0) union select `commercial_category_3`.`Id` AS `Id`,`commercial_category_3`.`parent` AS `Parent` from `commercial_category` `commercial_category_3` where (`commercial_category_3`.`parent` = 0) union select `commercial_category`.`Id` AS `Id`,`commercial_category`.`Id` AS `Parent` from `commercial_category` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `commercial_soldes_product_current`
--

/*!50001 DROP TABLE IF EXISTS `commercial_soldes_product_current`*/;
/*!50001 DROP VIEW IF EXISTS `commercial_soldes_product_current`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `commercial_soldes_product_current` AS select `commercial_soldes_product`.`Id` AS `Id`,`commercial_soldes`.`discount` AS `discount`,`commercial_soldes_product`.`product` AS `product`,`commercial_soldes`.`begining_date` AS `begining_date`,`commercial_soldes`.`end_date` AS `end_date` from (`commercial_soldes` join `commercial_soldes_product` on(((`commercial_soldes_product`.`soldes` = `commercial_soldes`.`Id`) and (`commercial_soldes`.`active` = 1) and (now() >= coalesce(`commercial_soldes`.`begining_date`,now())) and (now() <= coalesce(`commercial_soldes`.`end_date`,now()))))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `commercial_soldes_product_discount_current`
--

/*!50001 DROP TABLE IF EXISTS `commercial_soldes_product_discount_current`*/;
/*!50001 DROP VIEW IF EXISTS `commercial_soldes_product_discount_current`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `commercial_soldes_product_discount_current` AS select `commercial_soldes_product_current`.`Id` AS `Id`,`commercial_soldes_product_current`.`discount` AS `discount`,`commercial_soldes_product_current`.`product` AS `product`,`commercial_soldes_product_current`.`begining_date` AS `begining_date`,`commercial_soldes_product_current`.`end_date` AS `end_date` from `commercial_soldes_product_current` where (`commercial_soldes_product_current`.`begining_date` = (select max(`commercial_soldes_product_current_1`.`begining_date`) AS `Expr1` from `commercial_soldes_product_current` `commercial_soldes_product_current_1` where (`commercial_soldes_product_current`.`product` = `commercial_soldes_product_current_1`.`product`))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `pos_canceled_state`
--

/*!50001 DROP TABLE IF EXISTS `pos_canceled_state`*/;
/*!50001 DROP VIEW IF EXISTS `pos_canceled_state`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `pos_canceled_state` AS select 'Avoir' AS `Type`,`pos_credit_order_line`.`Id` AS `Id`,`pos_credit_order_line`.`product` AS `product`,`pos_credit_order_line`.`description` AS `description`,`pos_credit_order_line`.`quantity` AS `quantity`,((`pos_credit_order_line`.`price` * (1 + (coalesce(`commercial_fodec`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `pos_credit_order`.`tva_chec`))) AS `PrixUnitaire`,(((`pos_credit_order_line`.`price` * `pos_credit_order_line`.`quantity`) * (1 + (coalesce(`commercial_fodec`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `pos_credit_order`.`tva_chec`))) AS `PrixTotal`,`pos_credit_order`.`date` AS `date`,`commercial_partner`.`name` AS `PartnerName`,`pos_credit_order`.`partner` AS `partner`,`pos_motif`.`name` AS `Motif`,`pos_point_of_sale`.`name` AS `POS`,`atooerp_user`.`login` AS `User`,`pos_session`.`pos` AS `IdPOS`,`pos_order`.`session` AS `IdSession`,`pos_order`.`reference` AS `reference`,`commercial_product`.`reference` AS `productReference`,`commercial_product`.`barcode` AS `barcode`,`commercial_unite`.`name` AS `uniteName`,0 AS `display` from (((((((((((`pos_credit_order_line` left join `pos_credit_order` on((`pos_credit_order_line`.`piece` = `pos_credit_order`.`Id`))) left join `commercial_fodec` on((`pos_credit_order`.`fodec` = `commercial_fodec`.`Id`))) left join `commercial_partner` on((`pos_credit_order`.`partner` = `commercial_partner`.`Id`))) left join `commercial_vat` on((`pos_credit_order_line`.`vat` = `commercial_vat`.`Id`))) left join `pos_motif` on((`pos_credit_order_line`.`motif` = `pos_motif`.`Id`))) left join `pos_order` on((`pos_credit_order`.`order` = `pos_order`.`Id`))) left join `pos_session` on((`pos_order`.`session` = `pos_session`.`Id`))) left join `pos_point_of_sale` on((`pos_session`.`pos` = `pos_point_of_sale`.`Id`))) left join `atooerp_user` on((`pos_session`.`user` = `atooerp_user`.`Id`))) left join `commercial_product` on((`commercial_product`.`Id` = `pos_credit_order_line`.`product`))) left join `commercial_unite` on((`commercial_product`.`unite` = `commercial_unite`.`Id`))) union select 'Avoir' AS `Type`,`pos_order_line`.`Id` AS `Id`,`pos_order_line`.`product` AS `product`,`pos_order_line`.`description` AS `description`,`pos_order_line`.`quantity` AS `quantity`,((`pos_order_line`.`price` * (1 + (coalesce(`commercial_fodec`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `pos_order`.`tva_chec`))) AS `PrixUnitaire`,(((`pos_order_line`.`price` * `pos_order_line`.`quantity`) * (1 + (coalesce(`commercial_fodec`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `pos_order`.`tva_chec`))) AS `PrixTotal`,`pos_order`.`date` AS `date`,`commercial_partner`.`name` AS `PartnerName`,`pos_order`.`partner` AS `partner`,'Avoir-Indiv' AS `Motif`,`pos_point_of_sale`.`name` AS `POS`,`atooerp_user`.`login` AS `User`,`pos_session`.`pos` AS `IdPOS`,`pos_order`.`session` AS `IdSession`,`pos_order`.`reference` AS `reference`,`commercial_product`.`reference` AS `productReference`,`commercial_product`.`barcode` AS `barcode`,`commercial_unite`.`name` AS `uniteName`,0 AS `display` from (((((((((`pos_order_line` left join `pos_order` on((`pos_order_line`.`piece` = `pos_order`.`Id`))) left join `commercial_fodec` on((`pos_order`.`fodec` = `commercial_fodec`.`Id`))) left join `commercial_partner` on((`pos_order`.`partner` = `commercial_partner`.`Id`))) left join `commercial_vat` on((`pos_order_line`.`vat` = `commercial_vat`.`Id`))) left join `pos_session` on((`pos_order`.`session` = `pos_session`.`Id`))) left join `pos_point_of_sale` on((`pos_session`.`pos` = `pos_point_of_sale`.`Id`))) left join `atooerp_user` on((`pos_session`.`user` = `atooerp_user`.`Id`))) left join `commercial_product` on((`commercial_product`.`Id` = `pos_order_line`.`product`))) left join `commercial_unite` on((`commercial_product`.`unite` = `commercial_unite`.`Id`))) union select 'Canceled' AS `Type`,`pos_order_line_canceled`.`Id` AS `Id`,`pos_order_line_canceled`.`product` AS `product`,`pos_order_line_canceled`.`description` AS `description`,`pos_order_line_canceled`.`quantity` AS `quantity`,((`pos_order_line_canceled`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order_1`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order_1`.`tva_chec`))) AS `PrixUnitaire`,(((`pos_order_line_canceled`.`price` * `pos_order_line_canceled`.`quantity`) * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order_1`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order_1`.`tva_chec`))) AS `PrixTotal`,`pos_order_line_canceled`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`pos_order_1`.`partner` AS `partner`,`pos_motif_1`.`name` AS `Motif`,`pos_point_of_sale_1`.`name` AS `POS`,`atooerp_user_1`.`login` AS `User`,`pos_session_1`.`pos` AS `IdPOS`,`pos_order_line_canceled`.`session` AS `IdSession`,`pos_order_1`.`reference` AS `reference`,`commercial_product_1`.`reference` AS `productReference`,`commercial_product_1`.`barcode` AS `barcode`,`commercial_unite_1`.`name` AS `uniteName`,`pos_order_line_canceled`.`display` AS `display` from ((((((((((`pos_order_line_canceled` left join `pos_order` `pos_order_1` on((`pos_order_line_canceled`.`piece` = `pos_order_1`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`pos_order_1`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`pos_order_1`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`pos_order_line_canceled`.`vat` = `commercial_vat_1`.`Id`))) left join `pos_motif` `pos_motif_1` on((`pos_order_line_canceled`.`motif` = `pos_motif_1`.`Id`))) left join `pos_session` `pos_session_1` on((`pos_order_line_canceled`.`session` = `pos_session_1`.`Id`))) left join `pos_point_of_sale` `pos_point_of_sale_1` on((`pos_session_1`.`pos` = `pos_point_of_sale_1`.`Id`))) left join `atooerp_user` `atooerp_user_1` on((`pos_session_1`.`user` = `atooerp_user_1`.`Id`))) left join `commercial_product` `commercial_product_1` on((`commercial_product_1`.`Id` = `pos_order_line_canceled`.`product`))) left join `commercial_unite` `commercial_unite_1` on((`commercial_product_1`.`unite` = `commercial_unite_1`.`Id`))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `pos_credit_order_list`
--

/*!50001 DROP TABLE IF EXISTS `pos_credit_order_list`*/;
/*!50001 DROP VIEW IF EXISTS `pos_credit_order_list`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `pos_credit_order_list` AS select `pos_credit_order`.`Id` AS `Id`,`pos_credit_order`.`code` AS `code`,`pos_credit_order`.`reference` AS `reference`,`pos_credit_order`.`date` AS `date`,`pos_credit_order`.`partner` AS `partner`,`pos_credit_order`.`validated` AS `validated`,`commercial_partner`.`name` AS `Partnaire`,`pos_order`.`session` AS `session`,round(`pos_credit_order`.`total_amount`,(select `atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from `atooerp_currency` where (`atooerp_currency`.`principal` = 1))) AS `MontantTotal`,`pos_credit_order_line`.`motif` AS `motif` from ((((`pos_credit_order` left join `pos_order` on((`pos_credit_order`.`order` = `pos_order`.`Id`))) left join `commercial_partner` on((`pos_credit_order`.`partner` = `commercial_partner`.`Id`))) left join `pos_credit_order_line` on((`pos_credit_order`.`Id` = `pos_credit_order_line`.`piece`))) join `atooerp_currency`) where (`atooerp_currency`.`principal` = 1) group by `pos_credit_order`.`Id` order by `pos_credit_order`.`Id` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `pos_order_list`
--

/*!50001 DROP TABLE IF EXISTS `pos_order_list`*/;
/*!50001 DROP VIEW IF EXISTS `pos_order_list`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `pos_order_list` AS select `pos_order`.`Id` AS `Id`,`pos_order`.`code` AS `code`,`pos_order`.`reference` AS `reference`,`pos_order`.`date` AS `date`,`pos_order`.`partner` AS `partner`,`pos_order`.`validated` AS `validated`,`commercial_partner`.`name` AS `Partnaire`,`pos_order`.`session` AS `session`,round(`pos_order`.`total_amount`,(select `atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from `atooerp_currency` where (`atooerp_currency`.`principal` = 1))) AS `MontantTotal`,round(`pos_order`.`paied_amount`,(select `atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from `atooerp_currency` where (`atooerp_currency`.`principal` = 1))) AS `Payment`,round((`pos_order`.`total_amount` - `pos_order`.`paied_amount`),(select `atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from `atooerp_currency` where (`atooerp_currency`.`principal` = 1))) AS `Rest`,(case `pos_order`.`invoice` when 0 then NULL else `sale_invoice`.`code` end) AS `Invoice`,`pos_order`.`due_date` AS `DateEcheance` from (((`pos_order` left join `sale_invoice` on((`pos_order`.`invoice` = `sale_invoice`.`Id`))) left join `commercial_partner` on((`pos_order`.`partner` = `commercial_partner`.`Id`))) join `atooerp_currency`) where (`atooerp_currency`.`principal` = 1) group by `pos_order`.`Id` order by `pos_order`.`Id` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `pos_sale_product`
--

/*!50001 DROP TABLE IF EXISTS `pos_sale_product`*/;
/*!50001 DROP VIEW IF EXISTS `pos_sale_product`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `pos_sale_product` AS select `pos_order_line`.`Id` AS `Id`,`pos_order_line`.`product` AS `product`,`pos_order_line`.`description` AS `description`,`pos_order_line`.`quantity` AS `quantity`,((`pos_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order`.`tva_chec`))) AS `PrixUnitaire`,(((`pos_order_line`.`price` * `pos_order_line`.`quantity`) * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order`.`tva_chec`))) AS `PrixTotal`,((((`pos_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order`.`tva_chec`))) - (`commercial_product`.`price_purchase` * (1 + coalesce(`commercial_vat_2`.`value`,0)))) * `pos_order_line`.`quantity`) AS `profit`,`pos_order`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`pos_order`.`partner` AS `partner`,`commercial_category`.`name` AS `categoryName`,`commercial_category`.`Id` AS `IdCategory`,`pos_order`.`session` AS `session` from (((((((`pos_order_line` left join `commercial_product` on((`pos_order_line`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `commercial_vat` `commercial_vat_2` on((`commercial_product`.`taxe_purchase` = `commercial_vat_2`.`Id`))) left join `pos_order` on((`pos_order_line`.`piece` = `pos_order`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`pos_order`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`pos_order`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`pos_order_line`.`vat` = `commercial_vat_1`.`Id`))) union select `pos_credit_order_line`.`Id` AS `Id`,`pos_credit_order_line`.`product` AS `product`,`pos_credit_order_line`.`description` AS `description`,-(`pos_credit_order_line`.`quantity`) AS `quantity`,-(((`pos_credit_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_credit_order`.`tva_chec`)))) AS `PrixUnitaire`,-((((`pos_credit_order_line`.`price` * `pos_credit_order_line`.`quantity`) * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_credit_order`.`tva_chec`)))) AS `PrixTotal`,-(((((`pos_credit_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_credit_order`.`tva_chec`))) - (`commercial_product_3`.`price_purchase` * (1 + coalesce(`commercial_vat_2`.`value`,0)))) * `pos_credit_order_line`.`quantity`)) AS `profit`,`pos_credit_order`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`pos_credit_order`.`partner` AS `partner`,`commercial_category_3`.`name` AS `categoryName`,`commercial_category_3`.`Id` AS `IdCategory`,`pos_order`.`session` AS `session` from ((((((((`pos_credit_order_line` left join `commercial_product` `commercial_product_3` on((`pos_credit_order_line`.`product` = `commercial_product_3`.`Id`))) left join `commercial_category` `commercial_category_3` on((`commercial_product_3`.`category` = `commercial_category_3`.`Id`))) left join `commercial_vat` `commercial_vat_2` on((`commercial_product_3`.`taxe_purchase` = `commercial_vat_2`.`Id`))) left join `pos_credit_order` on((`pos_credit_order_line`.`piece` = `pos_credit_order`.`Id`))) left join `pos_order` on((`pos_credit_order`.`order` = `pos_order`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`pos_credit_order`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`pos_credit_order`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`pos_credit_order_line`.`vat` = `commercial_vat_1`.`Id`))) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `pos_user_point_of_sale`
--

/*!50001 DROP TABLE IF EXISTS `pos_user_point_of_sale`*/;
/*!50001 DROP VIEW IF EXISTS `pos_user_point_of_sale`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `pos_user_point_of_sale` AS select `pos_point_of_sale`.`Id` AS `point_of_sale`,`atooerp_user_module_group`.`user` AS `user` from (`pos_point_of_sale` join `atooerp_user_module_group`) where (`atooerp_user_module_group`.`group` = 16) union select `pos_point_of_sale_user`.`point_of_sale` AS `point_of_sale`,`pos_point_of_sale_user`.`user` AS `user` from (`pos_point_of_sale_user` join `atooerp_user_module_group` on((`atooerp_user_module_group`.`user` = `pos_point_of_sale_user`.`user`))) where (`atooerp_user_module_group`.`group` = 6) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `product_warehouse_actual_stock`
--

/*!50001 DROP TABLE IF EXISTS `product_warehouse_actual_stock`*/;
/*!50001 DROP VIEW IF EXISTS `product_warehouse_actual_stock`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `product_warehouse_actual_stock` AS select `product_warehouse_stock`.`Id` AS `Id`,`product_warehouse_stock`.`piece_line` AS `piece_line`,`product_warehouse_stock`.`piece_type` AS `piece_type`,`product_warehouse_stock`.`actual_stock` AS `actual_stock`,`product_warehouse_stock`.`theoretical_stock` AS `theoretical_stock`,`product_warehouse_stock`.`werhouseStockValue` AS `werhouseStockValue`,`product_warehouse_stock`.`product` AS `product`,`product_warehouse_stock`.`date` AS `date`,`product_warehouse_stock`.`piece` AS `piece`,`product_warehouse_stock`.`action` AS `action`,`product_warehouse_stock`.`warehouse` AS `warehouse`,`product_warehouse_stock`.`warehouseName` AS `warehouseName`,`product_warehouse_stock`.`totalActual_stock` AS `totalActual_stock`,`product_warehouse_stock`.`totalTheoretical_stock` AS `totalTheoretical_stock`,`product_warehouse_stock`.`totalStockValue` AS `totalStockValue`,`product_warehouse_stock`.`name` AS `name`,`product_warehouse_stock`.`categoryName` AS `categoryName`,`product_warehouse_stock`.`IdCategory` AS `IdCategory` from `product_warehouse_stock` group by `product_warehouse_stock`.`product`,`product_warehouse_stock`.`warehouse`,`product_warehouse_stock`.`categoryName` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `product_warehouse_stock`
--

/*!50001 DROP TABLE IF EXISTS `product_warehouse_stock`*/;
/*!50001 DROP VIEW IF EXISTS `product_warehouse_stock`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `product_warehouse_stock` AS select `commercial_product_stock`.`Id` AS `Id`,`commercial_product_stock`.`piece_line` AS `piece_line`,`commercial_product_stock`.`piece_type` AS `piece_type`,`commercial_product_stock`.`actual_stock` AS `actual_stock`,`commercial_product_stock`.`theoretical_stock` AS `theoretical_stock`,((`commercial_product`.`price_purchase` * (1 + coalesce(`commercial_vat`.`value`,0))) * `commercial_product_stock`.`actual_stock`) AS `werhouseStockValue`,`commercial_product_stock`.`product` AS `product`,`commercial_product_stock`.`date` AS `date`,`commercial_product_stock`.`piece` AS `piece`,`commercial_product_stock`.`action` AS `action`,`commercial_product_stock`.`warehouse` AS `warehouse`,coalesce(`commercial_warehouse`.`name`,'Depot Central') AS `warehouseName`,`commercial_product`.`actual_stock` AS `totalActual_stock`,`commercial_product`.`theoretical_stock` AS `totalTheoretical_stock`,((`commercial_product`.`price_purchase` * (1 + coalesce(`commercial_vat`.`value`,0))) * `commercial_product`.`actual_stock`) AS `totalStockValue`,`commercial_product`.`name` AS `name`,`commercial_category`.`name` AS `categoryName`,`commercial_product`.`category` AS `IdCategory` from ((((`commercial_product_stock` left join `commercial_product` on((`commercial_product_stock`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `commercial_vat` on((`commercial_vat`.`Id` = `commercial_product`.`taxe_purchase`))) left join `commercial_warehouse` on((`commercial_product_stock`.`warehouse` = `commercial_warehouse`.`Id`))) order by `commercial_product_stock`.`Id` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `purchase_balance`
--

/*!50001 DROP TABLE IF EXISTS `purchase_balance`*/;
/*!50001 DROP VIEW IF EXISTS `purchase_balance`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `purchase_balance` AS select 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'FACTURE ACHAT' AS `piece_typeName`,`purchase_invoice`.`Id` AS `Id`,`purchase_invoice`.`code` AS `code`,`purchase_invoice`.`reference` AS `reference`,`purchase_invoice`.`date` AS `Date`,`purchase_invoice`.`partner` AS `IdPartner`,`commercial_partner`.`name` AS `partnerName`,`commercial_payment_condition`.`name` AS `payment_conditionName`,`commercial_payment_method`.`name` AS `payment_methodName`,`purchase_invoice`.`total_amount` AS `total_amount`,`purchase_invoice`.`paied_amount` AS `paied_amount`,(`purchase_invoice`.`total_amount` - `purchase_invoice`.`paied_amount`) AS `restAmount`,`purchase_invoice`.`due_date` AS `due_date`,concat(`atooerp_person`.`first_name`,' ',`atooerp_person`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`atooerp_currency`.`Id` AS `IdCurrency`,`atooerp_currency`.`symbol` AS `currencySymbol`,`atooerp_currency`.`name` AS `currencyName`,`atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from ((((((((`purchase_invoice` left join `commercial_partner` on((`purchase_invoice`.`partner` = `commercial_partner`.`Id`))) left join `commercial_payment_condition` on((`purchase_invoice`.`payment_condition` = `commercial_payment_condition`.`Id`))) left join `commercial_payment_method` on((`purchase_invoice`.`payment_method` = `commercial_payment_method`.`Id`))) left join `hr_employe` on((`hr_employe`.`Id` = `purchase_invoice`.`agent`))) left join `atooerp_person` on((`atooerp_person`.`Id` = `hr_employe`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` on((`purchase_invoice`.`currency` = `atooerp_currency`.`Id`))) where (`purchase_invoice`.`validated` = 1) union select 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'BR ACHAT' AS `piece_typeName`,`purchase_shipping`.`Id` AS `Id`,`purchase_shipping`.`code` AS `code`,`purchase_shipping`.`reference` AS `reference`,`purchase_shipping`.`date` AS `date`,`purchase_shipping`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,`purchase_shipping`.`total_amount` AS `total_amount`,`purchase_shipping`.`paied_amount` AS `paied_amount`,(`purchase_shipping`.`total_amount` - `purchase_shipping`.`paied_amount`) AS `restAmount`,`purchase_shipping`.`due_date` AS `due_date`,concat(`atooerp_person_3`.`first_name`,' ',`atooerp_person_3`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`atooerp_currency`.`Id` AS `IdCurrency`,`atooerp_currency`.`symbol` AS `currencySymbol`,`atooerp_currency`.`name` AS `currencyName`,`atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from ((((((((((`purchase_shipping` left join `commercial_partner` `commercial_partner_2` on((`purchase_shipping`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`purchase_shipping`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`purchase_shipping`.`payment_method` = `commercial_payment_method_2`.`Id`))) left join `purchase_order` on((`purchase_shipping`.`order` = `purchase_order`.`Id`))) left join `purchase_invoice` `purchase_invoice_2` on((`purchase_shipping`.`invoice` = `purchase_invoice_2`.`Id`))) left join `hr_employe` `hr_employe_3` on((`hr_employe_3`.`Id` = `purchase_shipping`.`agent`))) left join `atooerp_person` `atooerp_person_3` on((`atooerp_person_3`.`Id` = `hr_employe_3`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner_2`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` on((`purchase_shipping`.`currency` = `atooerp_currency`.`Id`))) where ((`purchase_shipping`.`validated` = 1) and (coalesce(`purchase_invoice_2`.`validated`,0) = 0) and ((coalesce(`purchase_order`.`delivred`,0) = 1) or (coalesce(`purchase_order`.`validated`,0) = 0))) union select 'Purchase.Shipping_return, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'Purchase.Shipping_return' AS `piece_typeName`,`purchase_shipping_return`.`Id` AS `Id`,`purchase_shipping_return`.`code` AS `code`,`purchase_shipping_return`.`reference` AS `reference`,`purchase_shipping_return`.`date` AS `date`,`purchase_shipping_return`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,-(`purchase_shipping_return`.`total_amount`) AS `total_amount`,`purchase_shipping_return`.`paied_amount` AS `paied_amount`,(-(`purchase_shipping_return`.`total_amount`) - `purchase_shipping_return`.`paied_amount`) AS `restAmount`,`purchase_shipping_return`.`due_date` AS `due_date`,concat(`atooerp_person_4`.`first_name`,' ',`atooerp_person_4`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`atooerp_currency`.`Id` AS `IdCurrency`,`atooerp_currency`.`symbol` AS `currencySymbol`,`atooerp_currency`.`name` AS `currencyName`,`atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from (((((((((((`purchase_shipping_return` left join `commercial_partner` `commercial_partner_2` on((`purchase_shipping_return`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`purchase_shipping_return`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`purchase_shipping_return`.`payment_method` = `commercial_payment_method_2`.`Id`))) left join `purchase_order` on((`purchase_shipping_return`.`order` = `purchase_order`.`Id`))) left join `purchase_invoice` `purchase_invoice_2` on((`purchase_shipping_return`.`invoice` = `purchase_invoice_2`.`Id`))) left join `purchase_credit_invoice` on((`purchase_shipping_return`.`credit_invoice` = `purchase_credit_invoice`.`Id`))) left join `hr_employe` `hr_employe_4` on((`hr_employe_4`.`Id` = `purchase_shipping_return`.`agent`))) left join `atooerp_person` `atooerp_person_4` on((`atooerp_person_4`.`Id` = `hr_employe_4`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner_2`.`purchase_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` on((`purchase_shipping_return`.`currency` = `atooerp_currency`.`Id`))) where ((`purchase_shipping_return`.`validated` = 1) and (coalesce(`purchase_credit_invoice`.`validated`,0) = 0) and (coalesce(`purchase_invoice_2`.`validated`,0) = 0) and ((coalesce(`purchase_order`.`delivred`,0) = 1) or (coalesce(`purchase_order`.`validated`,0) = 0))) union select 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'BC ACHAT' AS `piece_typeName`,`purchase_order_1`.`Id` AS `Id`,`purchase_order_1`.`code` AS `code`,`purchase_order_1`.`reference` AS `reference`,`purchase_order_1`.`date` AS `date`,`purchase_order_1`.`partner` AS `IdPartner`,`commercial_partner_1`.`name` AS `partnerName`,`commercial_payment_condition_1`.`name` AS `payment_conditionName`,`commercial_payment_method_1`.`name` AS `payment_methodName`,`purchase_order_1`.`total_amount` AS `total_amount`,`purchase_order_1`.`paied_amount` AS `paied_amount`,(`purchase_order_1`.`total_amount` - `purchase_order_1`.`paied_amount`) AS `restAmount`,`purchase_order_1`.`due_date` AS `due_date`,concat(`atooerp_person_2`.`first_name`,' ',`atooerp_person_2`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`atooerp_currency`.`Id` AS `IdCurrency`,`atooerp_currency`.`symbol` AS `currencySymbol`,`atooerp_currency`.`name` AS `currencyName`,`atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from (((((((((`purchase_order` `purchase_order_1` left join `commercial_partner` `commercial_partner_1` on((`purchase_order_1`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_1` on((`purchase_order_1`.`payment_condition` = `commercial_payment_condition_1`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_1` on((`purchase_order_1`.`payment_method` = `commercial_payment_method_1`.`Id`))) left join `purchase_invoice` `purchase_invoice_2` on((`purchase_order_1`.`invoice` = `purchase_invoice_2`.`Id`))) left join `hr_employe` `hr_employe_2` on((`hr_employe_2`.`Id` = `purchase_order_1`.`agent`))) left join `atooerp_person` `atooerp_person_2` on((`atooerp_person_2`.`Id` = `hr_employe_2`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner_1`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` on((`purchase_order_1`.`currency` = `atooerp_currency`.`Id`))) where ((`purchase_order_1`.`validated` = 1) and (`purchase_order_1`.`delivred` = 0) and (coalesce(`purchase_invoice_2`.`validated`,0) = 0)) union select 'Purchase.Credit_invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'FACTURE AVOIR ACHAT' AS `piece_typeName`,`purchase_credit_invoice`.`Id` AS `Id`,`purchase_credit_invoice`.`code` AS `code`,`purchase_credit_invoice`.`reference` AS `reference`,`purchase_credit_invoice`.`date` AS `Date`,`purchase_credit_invoice`.`partner` AS `IdPartner`,`commercial_partner_3`.`name` AS `partnerName`,`commercial_payment_condition_3`.`name` AS `payment_conditionName`,`commercial_payment_method_3`.`name` AS `payment_methodName`,-(`purchase_credit_invoice`.`total_amount`) AS `total_amount`,`purchase_credit_invoice`.`paied_amount` AS `paied_amount`,(-(`purchase_credit_invoice`.`total_amount`) - `purchase_credit_invoice`.`paied_amount`) AS `restAmount`,`purchase_credit_invoice`.`due_date` AS `due_date`,concat(`atooerp_person_1`.`first_name`,' ',`atooerp_person_1`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`atooerp_currency`.`Id` AS `IdCurrency`,`atooerp_currency`.`symbol` AS `currencySymbol`,`atooerp_currency`.`name` AS `currencyName`,`atooerp_currency`.`decimal_numbre` AS `decimal_numbre` from ((((((((`purchase_credit_invoice` left join `commercial_partner` `commercial_partner_3` on((`purchase_credit_invoice`.`partner` = `commercial_partner_3`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_3` on((`purchase_credit_invoice`.`payment_condition` = `commercial_payment_condition_3`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_3` on((`purchase_credit_invoice`.`payment_method` = `commercial_payment_method_3`.`Id`))) left join `hr_employe` `hr_employe_1` on((`hr_employe_1`.`Id` = `purchase_credit_invoice`.`agent`))) left join `atooerp_person` `atooerp_person_1` on((`atooerp_person_1`.`Id` = `hr_employe_1`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner_3`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` on((`purchase_credit_invoice`.`currency` = `atooerp_currency`.`Id`))) where (`purchase_credit_invoice`.`validated` = 1) order by `due_date` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `purchase_product`
--

/*!50001 DROP TABLE IF EXISTS `purchase_product`*/;
/*!50001 DROP VIEW IF EXISTS `purchase_product`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `purchase_product` AS select `purchase_shipping_line`.`Id` AS `Id`,`purchase_shipping_line`.`product` AS `product`,`commercial_product`.`name` AS `description`,`purchase_shipping_line`.`quantity` AS `quantity`,((`purchase_shipping_line`.`price` * (1 + (coalesce(`commercial_fodec`.`value`,0) * `purchase_shipping`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `purchase_shipping`.`tva_chec`))) AS `PrixUnitaire`,(((`purchase_shipping_line`.`price` * `purchase_shipping_line`.`quantity`) * (1 + (coalesce(`commercial_fodec`.`value`,0) * `purchase_shipping`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `purchase_shipping`.`tva_chec`))) AS `PrixTotal`,`purchase_shipping`.`date` AS `date`,`commercial_partner`.`name` AS `PartnerName`,`purchase_shipping`.`partner` AS `partner`,`commercial_category`.`name` AS `categoryName`,`commercial_category`.`Id` AS `IdCategory` from ((((((`purchase_shipping_line` left join `commercial_product` on((`purchase_shipping_line`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `purchase_shipping` on((`purchase_shipping_line`.`piece` = `purchase_shipping`.`Id`))) left join `commercial_fodec` on((`purchase_shipping`.`fodec` = `commercial_fodec`.`Id`))) left join `commercial_partner` on((`purchase_shipping`.`partner` = `commercial_partner`.`Id`))) left join `commercial_vat` on((`purchase_shipping_line`.`vat` = `commercial_vat`.`Id`))) where (`purchase_shipping`.`validated` = 1) union select `purchase_credit_invoice_line`.`Id` AS `Id`,`purchase_credit_invoice_line`.`product` AS `product`,`commercial_product_1`.`name` AS `description`,-(`purchase_credit_invoice_line`.`quantity`) AS `quantity`,-(((`purchase_credit_invoice_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `purchase_credit_invoice`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `purchase_credit_invoice`.`tva_chec`)))) AS `PrixUnitaire`,-((((`purchase_credit_invoice_line`.`price` * `purchase_credit_invoice_line`.`quantity`) * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `purchase_credit_invoice`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `purchase_credit_invoice`.`tva_chec`)))) AS `PrixTotal`,`purchase_credit_invoice`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`purchase_credit_invoice`.`partner` AS `partner`,`commercial_category_1`.`name` AS `categoryName`,`commercial_category_1`.`Id` AS `IdCategory` from ((((((`purchase_credit_invoice_line` left join `commercial_product` `commercial_product_1` on((`purchase_credit_invoice_line`.`product` = `commercial_product_1`.`Id`))) left join `commercial_category` `commercial_category_1` on((`commercial_product_1`.`category` = `commercial_category_1`.`Id`))) left join `purchase_credit_invoice` on((`purchase_credit_invoice_line`.`piece` = `purchase_credit_invoice`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`purchase_credit_invoice`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`purchase_credit_invoice`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`purchase_credit_invoice_line`.`vat` = `commercial_vat_1`.`Id`))) where (`purchase_credit_invoice`.`validated` = 1) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `purchase_state`
--

/*!50001 DROP TABLE IF EXISTS `purchase_state`*/;
/*!50001 DROP VIEW IF EXISTS `purchase_state`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `purchase_state` AS select 'Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'Facture achat' AS `piece_typeName`,`purchase_invoice`.`Id` AS `Id`,`purchase_invoice`.`code` AS `code`,`purchase_invoice`.`reference` AS `reference`,`purchase_invoice`.`date` AS `Date`,`purchase_invoice`.`partner` AS `IdPartner`,`commercial_partner`.`name` AS `partnerName`,`commercial_payment_condition`.`name` AS `payment_conditionName`,`commercial_payment_method`.`name` AS `payment_methodName`,`purchase_invoice`.`total_amount` AS `total_amount`,((coalesce((select sum(`commercial_payment_piece`.`amount`) AS `sum(amount)` from `commercial_payment_piece` where (('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' = `commercial_payment_piece`.`piece_type`) and (`commercial_payment_piece`.`piece` = `purchase_invoice`.`Id`))),0) + coalesce((select sum(`commercial_payment_piece`.`amount`) AS `sum(amount)` from `commercial_payment_piece` where (('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' = `commercial_payment_piece`.`piece_type`) and (`commercial_payment_piece`.`piece` = `purchase_invoice`.`order`))),0)) + coalesce((select sum(`commercial_payment_piece`.`amount`) AS `sum(amount)` from `commercial_payment_piece` where (('Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' = `commercial_payment_piece`.`piece_type`) and `commercial_payment_piece`.`piece` in (select `purchase_shipping`.`Id` AS `Id` from `purchase_shipping` where ((`purchase_shipping`.`invoice` = `purchase_invoice`.`Id`) or (`purchase_shipping`.`order` = `purchase_invoice`.`order`))))),0)) AS `paied_amount`,(case `purchase_invoice`.`payment_condition` when 0 then `purchase_invoice`.`date` when 1 then `purchase_invoice`.`date` when 2 then (`purchase_invoice`.`date` + interval 15 day) when 3 then last_day((`purchase_invoice`.`date` + interval 30 day)) when 4 then (`purchase_invoice`.`date` + interval 30 day) when 5 then last_day(`purchase_invoice`.`date`) when 6 then coalesce((select `x`.`date` AS `date` from `purchase_invoice` `x` where ((`x`.`Id` = `purchase_invoice`.`Id`) and (`x`.`validated` = 1))),(`purchase_invoice`.`date` + interval 90 day)) else `purchase_invoice`.`date` end) AS `due_date` from (((`purchase_invoice` left join `commercial_partner` on((`purchase_invoice`.`partner` = `commercial_partner`.`Id`))) left join `commercial_payment_condition` on((`purchase_invoice`.`payment_condition` = `commercial_payment_condition`.`Id`))) left join `commercial_payment_method` on((`purchase_invoice`.`payment_method` = `commercial_payment_method`.`Id`))) where (`purchase_invoice`.`validated` = 1) union select 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'BON DE RECEPTION' AS `piece_typeName`,`purchase_shipping`.`Id` AS `Id`,`purchase_shipping`.`code` AS `code`,`purchase_shipping`.`reference` AS `reference`,`purchase_shipping`.`date` AS `date`,`purchase_shipping`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,`purchase_shipping`.`total_amount` AS `total_amount`,coalesce((select sum(`commercial_payment_piece`.`amount`) AS `sum(amount)` from `commercial_payment_piece` where (('Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' = `commercial_payment_piece`.`piece_type`) and (`commercial_payment_piece`.`piece` = `purchase_shipping`.`Id`))),0) AS `paied_amount`,(case `purchase_shipping`.`payment_condition` when 0 then `purchase_shipping`.`date` when 1 then `purchase_shipping`.`date` when 2 then (`purchase_shipping`.`date` + interval 15 day) when 3 then last_day((`purchase_shipping`.`date` + interval 30 day)) when 4 then (`purchase_shipping`.`date` + interval 30 day) when 5 then last_day(`purchase_shipping`.`date`) when 6 then coalesce((select `x`.`date` AS `date` from `purchase_shipping` `x` where ((`x`.`Id` = `purchase_shipping`.`Id`) and (`x`.`validated` = 1))),(`purchase_shipping`.`date` + interval 90 day)) else `purchase_shipping`.`date` end) AS `due_date` from (((`purchase_shipping` left join `commercial_partner` `commercial_partner_2` on((`purchase_shipping`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`purchase_shipping`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`purchase_shipping`.`payment_method` = `commercial_payment_method_2`.`Id`))) where ((`purchase_shipping`.`validated` = 1) and (`purchase_shipping`.`invoice` = 0)) union select 'Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'Bon de commande' AS `piece_typeName`,`purchase_order`.`Id` AS `Id`,`purchase_order`.`code` AS `code`,`purchase_order`.`reference` AS `reference`,`purchase_order`.`date` AS `date`,`purchase_order`.`partner` AS `IdPartner`,`commercial_partner_1`.`name` AS `partnerName`,`commercial_payment_condition_1`.`name` AS `payment_conditionName`,`commercial_payment_method_1`.`name` AS `payment_methodName`,`purchase_order`.`total_amount` AS `total_amount`,((coalesce((select sum(`commercial_payment_piece`.`amount`) AS `sum(amount)` from `commercial_payment_piece` where (('Purchase.Order, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' = `commercial_payment_piece`.`piece_type`) and (`commercial_payment_piece`.`piece` = `purchase_order`.`Id`))),0) + coalesce((select sum(`commercial_payment_piece`.`amount`) AS `sum(amount)` from `commercial_payment_piece` where (('Purchase.Invoice, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' = `commercial_payment_piece`.`piece_type`) and (`commercial_payment_piece`.`piece` = (select `purchase_invoice`.`Id` AS `Id` from `purchase_invoice` where (`purchase_invoice`.`order` = `purchase_order`.`Id`))))),0)) + coalesce((select sum(`commercial_payment_piece`.`amount`) AS `sum(amount)` from `commercial_payment_piece` where (('Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' = `commercial_payment_piece`.`piece_type`) and `commercial_payment_piece`.`piece` in (select `purchase_shipping`.`Id` AS `Id` from `purchase_shipping` where ((`purchase_shipping`.`order` = `purchase_order`.`Id`) or (`purchase_shipping`.`invoice` = (select `purchase_invoice`.`Id` AS `Id` from `purchase_invoice` where (`purchase_invoice`.`order` = `purchase_order`.`Id`))))))),0)) AS `paied_amount`,(case `purchase_order`.`payment_condition` when 0 then `purchase_order`.`date` when 1 then `purchase_order`.`date` when 2 then (`purchase_order`.`date` + interval 15 day) when 3 then last_day((`purchase_order`.`date` + interval 30 day)) when 4 then (`purchase_order`.`date` + interval 30 day) when 5 then last_day(`purchase_order`.`date`) when 6 then coalesce((select `x`.`date` AS `date` from `purchase_order` `x` where ((`x`.`Id` = `purchase_order`.`Id`) and (`x`.`validated` = 1))),(`purchase_order`.`date` + interval 90 day)) else `purchase_order`.`date` end) AS `due_date` from (((`purchase_order` left join `commercial_partner` `commercial_partner_1` on((`purchase_order`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_1` on((`purchase_order`.`payment_condition` = `commercial_payment_condition_1`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_1` on((`purchase_order`.`payment_method` = `commercial_payment_method_1`.`Id`))) where ((`purchase_order`.`validated` = 1) and (not(`purchase_order`.`Id` in (select `purchase_invoice_1`.`order` AS `order` from `purchase_invoice` `purchase_invoice_1`))) and (not(`purchase_order`.`Id` in (select `purchase_shipping_1`.`order` AS `order` from `purchase_shipping` `purchase_shipping_1`)))) order by `due_date` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `purchase_transfering_shipping`
--

/*!50001 DROP TABLE IF EXISTS `purchase_transfering_shipping`*/;
/*!50001 DROP VIEW IF EXISTS `purchase_transfering_shipping`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `purchase_transfering_shipping` AS select 'Purchase.Shipping, Purchase, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'BON DE RECEPTION' AS `piece_typeName`,`purchase_shipping`.`Id` AS `Id`,`purchase_shipping`.`code` AS `code`,`purchase_shipping`.`reference` AS `reference`,`purchase_shipping`.`date` AS `date`,`purchase_shipping`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,`purchase_order`.`code` AS `BonDeCommande`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,`purchase_shipping`.`total_amount` AS `total_amount`,`purchase_shipping`.`paied_amount` AS `paied_amount`,(`purchase_shipping`.`total_amount` - `purchase_shipping`.`paied_amount`) AS `restAmount`,(case `purchase_shipping`.`payment_condition` when 0 then `purchase_shipping`.`date` when 1 then `purchase_shipping`.`date` when 2 then (`purchase_shipping`.`date` + interval 15 day) when 3 then last_day((`purchase_shipping`.`date` + interval 30 day)) when 4 then (`purchase_shipping`.`date` + interval 30 day) when 5 then last_day(`purchase_shipping`.`date`) when 6 then coalesce((select `x`.`date` AS `date` from `purchase_shipping` `x` where ((`x`.`Id` = `purchase_shipping`.`Id`) and (`x`.`validated` = 1))),(`purchase_shipping`.`date` + interval 90 day)) else `purchase_shipping`.`date` end) AS `due_date` from ((((`purchase_shipping` left join `purchase_order` on((`purchase_shipping`.`order` = `purchase_order`.`Id`))) left join `commercial_partner` `commercial_partner_2` on((`purchase_shipping`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`purchase_shipping`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`purchase_shipping`.`payment_method` = `commercial_payment_method_2`.`Id`))) where ((`purchase_shipping`.`validated` = 1) and (`purchase_shipping`.`invoice` = 0)) order by `purchase_shipping`.`date` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sale_balance`
--

/*!50001 DROP TABLE IF EXISTS `sale_balance`*/;
/*!50001 DROP VIEW IF EXISTS `sale_balance`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sale_balance` AS select 'Sale.Invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'FACTURE VENTE' AS `piece_typeName`,`sale_invoice`.`Id` AS `Id`,`sale_invoice`.`code` AS `code`,`sale_invoice`.`reference` AS `reference`,`sale_invoice`.`date` AS `Date`,`sale_invoice`.`partner` AS `IdPartner`,`commercial_partner`.`name` AS `partnerName`,`commercial_payment_condition`.`name` AS `payment_conditionName`,`commercial_payment_method`.`name` AS `payment_methodName`,`sale_invoice`.`total_amount` AS `total_amount`,`sale_invoice`.`paied_amount` AS `paied_amount`,(`sale_invoice`.`total_amount` - `sale_invoice`.`paied_amount`) AS `restAmount`,`sale_invoice`.`due_date` AS `due_date`,concat(`atooerp_person`.`first_name`,' ',`atooerp_person`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`ac`.`Id` AS `IdCurrency`,`ac`.`symbol` AS `currencySymbol`,`ac`.`name` AS `currencyName`,`ac`.`decimal_numbre` AS `decimal_numbre` from ((((((((`sale_invoice` left join `commercial_partner` on((`sale_invoice`.`partner` = `commercial_partner`.`Id`))) left join `commercial_payment_condition` on((`sale_invoice`.`payment_condition` = `commercial_payment_condition`.`Id`))) left join `commercial_payment_method` on((`sale_invoice`.`payment_method` = `commercial_payment_method`.`Id`))) left join `hr_employe` on((`hr_employe`.`Id` = `sale_invoice`.`agent`))) left join `atooerp_person` on((`atooerp_person`.`Id` = `hr_employe`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` `ac` on((`sale_invoice`.`currency` = `ac`.`Id`))) where (`sale_invoice`.`validated` = 1) union select 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'BL VENTE' AS `piece_typeName`,`sale_shipping`.`Id` AS `Id`,`sale_shipping`.`code` AS `code`,`sale_shipping`.`reference` AS `reference`,`sale_shipping`.`date` AS `date`,`sale_shipping`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,`sale_shipping`.`total_amount` AS `total_amount`,`sale_shipping`.`paied_amount` AS `paied_amount`,(`sale_shipping`.`total_amount` - `sale_shipping`.`paied_amount`) AS `restAmount`,`sale_shipping`.`due_date` AS `due_date`,concat(`atooerp_person`.`first_name`,' ',`atooerp_person`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`ac1`.`Id` AS `IdCurrency`,`ac1`.`symbol` AS `currencySymbol`,`ac1`.`name` AS `currencyName`,`ac1`.`decimal_numbre` AS `decimal_numbre` from ((((((((((`sale_shipping` left join `commercial_partner` `commercial_partner_2` on((`sale_shipping`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`sale_shipping`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`sale_shipping`.`payment_method` = `commercial_payment_method_2`.`Id`))) left join `sale_order` on((`sale_shipping`.`order` = `sale_order`.`Id`))) left join `sale_invoice` `sale_invoice_2` on((`sale_shipping`.`invoice` = `sale_invoice_2`.`Id`))) left join `hr_employe` on((`hr_employe`.`Id` = `sale_shipping`.`agent`))) left join `atooerp_person` on((`atooerp_person`.`Id` = `hr_employe`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner_2`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` `ac1` on((`sale_shipping`.`currency` = `ac1`.`Id`))) where ((`sale_shipping`.`validated` = 1) and (coalesce(`sale_invoice_2`.`validated`,0) = 0) and ((coalesce(`sale_order`.`delivred`,0) = 1) or (coalesce(`sale_order`.`validated`,0) = 0))) union select 'Sale.Order, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'BC Vente' AS `piece_typeName`,`sale_order_1`.`Id` AS `Id`,`sale_order_1`.`code` AS `code`,`sale_order_1`.`reference` AS `reference`,`sale_order_1`.`date` AS `date`,`sale_order_1`.`partner` AS `IdPartner`,`commercial_partner_1`.`name` AS `partnerName`,`commercial_payment_condition_1`.`name` AS `payment_conditionName`,`commercial_payment_method_1`.`name` AS `payment_methodName`,`sale_order_1`.`total_amount` AS `total_amount`,`sale_order_1`.`paied_amount` AS `paied_amount`,(`sale_order_1`.`total_amount` - `sale_order_1`.`paied_amount`) AS `restAmount`,`sale_order_1`.`due_date` AS `due_date`,concat(`atooerp_person`.`first_name`,' ',`atooerp_person`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`ac2`.`Id` AS `IdCurrency`,`ac2`.`symbol` AS `currencySymbol`,`ac2`.`name` AS `currencyName`,`ac2`.`decimal_numbre` AS `decimal_numbre` from (((((((((`sale_order` `sale_order_1` left join `commercial_partner` `commercial_partner_1` on((`sale_order_1`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_1` on((`sale_order_1`.`payment_condition` = `commercial_payment_condition_1`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_1` on((`sale_order_1`.`payment_method` = `commercial_payment_method_1`.`Id`))) left join `sale_invoice` `sale_invoice_2` on((`sale_order_1`.`invoice` = `sale_invoice_2`.`Id`))) left join `hr_employe` on((`hr_employe`.`Id` = `sale_order_1`.`agent`))) left join `atooerp_person` on((`atooerp_person`.`Id` = `hr_employe`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner_1`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` `ac2` on((`sale_order_1`.`currency` = `ac2`.`Id`))) where ((`sale_order_1`.`validated` = 1) and (`sale_order_1`.`delivred` = 0) and (coalesce(`sale_invoice_2`.`validated`,0) = 0)) union select 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'VENTE CAISSE' AS `piece_typeName`,`pos_order`.`Id` AS `Id`,`pos_order`.`code` AS `code`,`pos_order`.`reference` AS `reference`,`pos_order`.`date` AS `date`,`pos_order`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,`pos_order`.`total_amount` AS `total_amount`,`pos_order`.`paied_amount` AS `paied_amount`,(`pos_order`.`total_amount` - `pos_order`.`paied_amount`) AS `restAmount`,`pos_order`.`due_date` AS `due_date`,concat(`atooerp_person`.`first_name`,' ',`atooerp_person`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`ac3`.`Id` AS `IdCurrency`,`ac3`.`symbol` AS `currencySymbol`,`ac3`.`name` AS `currencyName`,`ac3`.`decimal_numbre` AS `decimal_numbre` from (((((((((`pos_order` left join `commercial_partner` `commercial_partner_2` on((`pos_order`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`pos_order`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`pos_order`.`payment_method` = `commercial_payment_method_2`.`Id`))) left join `sale_invoice` `sale_invoice_1` on((`pos_order`.`invoice` = `sale_invoice_1`.`Id`))) left join `hr_employe` on((`hr_employe`.`Id` = `pos_order`.`agent`))) left join `atooerp_person` on((`atooerp_person`.`Id` = `hr_employe`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner_2`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` `ac3` on((`ac3`.`principal` = 1))) where ((`pos_order`.`validated` = 1) and (coalesce(`sale_invoice_1`.`validated`,0) = 0)) union select 'Sale.Credit_invoice, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'FACTURE AVOIR VENTE' AS `piece_typeName`,`sale_credit_invoice`.`Id` AS `Id`,`sale_credit_invoice`.`code` AS `code`,`sale_credit_invoice`.`reference` AS `reference`,`sale_credit_invoice`.`date` AS `Date`,`sale_credit_invoice`.`partner` AS `IdPartner`,`commercial_partner`.`name` AS `partnerName`,`commercial_payment_condition`.`name` AS `payment_conditionName`,`commercial_payment_method`.`name` AS `payment_methodName`,-(`sale_credit_invoice`.`total_amount`) AS `total_amount`,-(`sale_credit_invoice`.`paied_amount`) AS `paied_amount`,-((`sale_credit_invoice`.`total_amount` - `sale_credit_invoice`.`paied_amount`)) AS `restAmount`,`sale_credit_invoice`.`due_date` AS `due_date`,concat(`atooerp_person`.`first_name`,' ',`atooerp_person`.`last_name`) AS `pieceAgent`,concat(`atooerp_person1`.`first_name`,' ',`atooerp_person1`.`last_name`) AS `partnerAgent`,`ac4`.`Id` AS `IdCurrency`,`ac4`.`symbol` AS `currencySymbol`,`ac4`.`name` AS `currencyName`,`ac4`.`decimal_numbre` AS `decimal_numbre` from ((((((((`sale_credit_invoice` left join `commercial_partner` on((`sale_credit_invoice`.`partner` = `commercial_partner`.`Id`))) left join `commercial_payment_condition` on((`sale_credit_invoice`.`payment_condition` = `commercial_payment_condition`.`Id`))) left join `commercial_payment_method` on((`sale_credit_invoice`.`payment_method` = `commercial_payment_method`.`Id`))) left join `hr_employe` on((`hr_employe`.`Id` = `sale_credit_invoice`.`agent`))) left join `atooerp_person` on((`atooerp_person`.`Id` = `hr_employe`.`Id`))) left join `hr_employe` `hr_employe1` on((`hr_employe1`.`Id` = `commercial_partner`.`sale_agent`))) left join `atooerp_person` `atooerp_person1` on((`atooerp_person1`.`Id` = `hr_employe1`.`Id`))) left join `atooerp_currency` `ac4` on((`sale_credit_invoice`.`currency` = `ac4`.`Id`))) where (`sale_credit_invoice`.`validated` = 1) order by `due_date` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sale_product`
--

/*!50001 DROP TABLE IF EXISTS `sale_product`*/;
/*!50001 DROP VIEW IF EXISTS `sale_product`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sale_product` AS select `pos_order_line`.`Id` AS `Id`,`pos_order_line`.`product` AS `product`,`commercial_product`.`name` AS `description`,`pos_order_line`.`quantity` AS `quantity`,((`pos_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order`.`tva_chec`))) AS `PrixUnitaire`,(((`pos_order_line`.`price` * `pos_order_line`.`quantity`) * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order`.`tva_chec`))) AS `PrixTotal`,((((`pos_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order`.`tva_chec`))) - (`commercial_product`.`price_purchase` * (1 + coalesce(`commercial_vat_2`.`value`,0)))) * `pos_order_line`.`quantity`) AS `profit`,`pos_order`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`pos_order`.`partner` AS `partner`,`commercial_category`.`name` AS `categoryName`,`commercial_category`.`Id` AS `IdCategory` from (((((((`pos_order_line` left join `commercial_product` on((`pos_order_line`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `commercial_vat` `commercial_vat_2` on((`commercial_product`.`taxe_purchase` = `commercial_vat_2`.`Id`))) left join `pos_order` on((`pos_order_line`.`piece` = `pos_order`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`pos_order`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`pos_order`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`pos_order_line`.`vat` = `commercial_vat_1`.`Id`))) where (`pos_order`.`validated` = 1) union select `sale_shipping_line`.`Id` AS `Id`,`sale_shipping_line`.`product` AS `product`,`commercial_product_1`.`name` AS `description`,`sale_shipping_line`.`quantity` AS `quantity`,((`sale_shipping_line`.`price` * (1 + (coalesce(`commercial_fodec`.`value`,0) * `sale_shipping`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `sale_shipping`.`tva_chec`))) AS `PrixUnitaire`,(((`sale_shipping_line`.`price` * `sale_shipping_line`.`quantity`) * (1 + (coalesce(`commercial_fodec`.`value`,0) * `sale_shipping`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `sale_shipping`.`tva_chec`))) AS `PrixTotal`,((((`sale_shipping_line`.`price` * (1 + (coalesce(`commercial_fodec`.`value`,0) * `sale_shipping`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat`.`value`,0) * `sale_shipping`.`tva_chec`))) - (`commercial_product_1`.`price_purchase` * (1 + coalesce(`commercial_vat_2`.`value`,0)))) * `sale_shipping_line`.`quantity`) AS `profit`,`sale_shipping`.`date` AS `date`,`commercial_partner`.`name` AS `PartnerName`,`sale_shipping`.`partner` AS `partner`,`commercial_category_1`.`name` AS `categoryName`,`commercial_category_1`.`Id` AS `IdCategory` from (((((((`sale_shipping_line` left join `commercial_product` `commercial_product_1` on((`sale_shipping_line`.`product` = `commercial_product_1`.`Id`))) left join `commercial_category` `commercial_category_1` on((`commercial_product_1`.`category` = `commercial_category_1`.`Id`))) left join `commercial_vat` `commercial_vat_2` on((`commercial_product_1`.`taxe_purchase` = `commercial_vat_2`.`Id`))) left join `sale_shipping` on((`sale_shipping_line`.`piece` = `sale_shipping`.`Id`))) left join `commercial_fodec` on((`sale_shipping`.`fodec` = `commercial_fodec`.`Id`))) left join `commercial_partner` on((`sale_shipping`.`partner` = `commercial_partner`.`Id`))) left join `commercial_vat` on((`sale_shipping_line`.`vat` = `commercial_vat`.`Id`))) where (`sale_shipping`.`validated` = 1) union select `pos_credit_order_line`.`Id` AS `Id`,`pos_credit_order_line`.`product` AS `product`,`commercial_product_3`.`name` AS `description`,-(`pos_credit_order_line`.`quantity`) AS `quantity`,-(((`pos_credit_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_credit_order`.`tva_chec`)))) AS `PrixUnitaire`,-((((`pos_credit_order_line`.`price` * `pos_credit_order_line`.`quantity`) * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_credit_order`.`tva_chec`)))) AS `PrixTotal`,-(((((`pos_credit_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_credit_order`.`tva_chec`))) - (`commercial_product_3`.`price_purchase` * (1 + coalesce(`commercial_vat_2`.`value`,0)))) * `pos_credit_order_line`.`quantity`)) AS `profit`,`pos_credit_order`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`pos_credit_order`.`partner` AS `partner`,`commercial_category_3`.`name` AS `categoryName`,`commercial_category_3`.`Id` AS `IdCategory` from (((((((`pos_credit_order_line` left join `commercial_product` `commercial_product_3` on((`pos_credit_order_line`.`product` = `commercial_product_3`.`Id`))) left join `commercial_category` `commercial_category_3` on((`commercial_product_3`.`category` = `commercial_category_3`.`Id`))) left join `commercial_vat` `commercial_vat_2` on((`commercial_product_3`.`taxe_purchase` = `commercial_vat_2`.`Id`))) left join `pos_credit_order` on((`pos_credit_order_line`.`piece` = `pos_credit_order`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`pos_credit_order`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`pos_credit_order`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`pos_credit_order_line`.`vat` = `commercial_vat_1`.`Id`))) where (`pos_credit_order`.`validated` = 1) union select `sale_credit_invoice_line`.`Id` AS `Id`,`sale_credit_invoice_line`.`product` AS `product`,`commercial_product_2`.`name` AS `description`,-(`sale_credit_invoice_line`.`quantity`) AS `quantity`,-(((`sale_credit_invoice_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `sale_credit_invoice`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `sale_credit_invoice`.`tva_chec`)))) AS `PrixUnitaire`,-((((`sale_credit_invoice_line`.`price` * `sale_credit_invoice_line`.`quantity`) * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `sale_credit_invoice`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `sale_credit_invoice`.`tva_chec`)))) AS `PrixTotal`,-(((((`sale_credit_invoice_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `sale_credit_invoice`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `sale_credit_invoice`.`tva_chec`))) - (`commercial_product_2`.`price_purchase` * (1 + coalesce(`commercial_vat_2`.`value`,0)))) * `sale_credit_invoice_line`.`quantity`)) AS `profit`,`sale_credit_invoice`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`sale_credit_invoice`.`partner` AS `partner`,`commercial_category_2`.`name` AS `categoryName`,`commercial_category_2`.`Id` AS `IdCategory` from (((((((`sale_credit_invoice_line` left join `commercial_product` `commercial_product_2` on((`sale_credit_invoice_line`.`product` = `commercial_product_2`.`Id`))) left join `commercial_category` `commercial_category_2` on((`commercial_product_2`.`category` = `commercial_category_2`.`Id`))) left join `commercial_vat` `commercial_vat_2` on((`commercial_product_2`.`taxe_purchase` = `commercial_vat_2`.`Id`))) left join `sale_credit_invoice` on((`sale_credit_invoice_line`.`piece` = `sale_credit_invoice`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`sale_credit_invoice`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`sale_credit_invoice`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`sale_credit_invoice_line`.`vat` = `commercial_vat_1`.`Id`))) where (`sale_credit_invoice`.`validated` = 1) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sale_product_state`
--

/*!50001 DROP TABLE IF EXISTS `sale_product_state`*/;
/*!50001 DROP VIEW IF EXISTS `sale_product_state`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sale_product_state` AS select `commercial_product_stock`.`piece_type` AS `piece_type`,`pos_order_line`.`piece` AS `piece`,`pos_order_line`.`Id` AS `Id`,`pos_order_line`.`product` AS `product`,`commercial_product`.`name` AS `description`,`pos_order_line`.`quantity` AS `quantity`,((`pos_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_order`.`tva_chec`))) AS `PrixUnitaire`,`commercial_product_stock`.`cump` AS `cump`,`pos_order`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`pos_order`.`partner` AS `partner`,`commercial_category`.`name` AS `categoryName`,`commercial_category`.`Id` AS `IdCategory` from (((((((`pos_order_line` join `pos_order` on((`pos_order_line`.`piece` = `pos_order`.`Id`))) left join `commercial_product` on((`pos_order_line`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`pos_order`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`pos_order`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`pos_order_line`.`vat` = `commercial_vat_1`.`Id`))) left join `commercial_product_stock` on(((`pos_order_line`.`Id` = `commercial_product_stock`.`piece_line`) and (`commercial_product_stock`.`piece_type` = 'VC')))) where (`pos_order`.`validated` = 1) union select `commercial_product_stock`.`piece_type` AS `piece_type`,`sale_shipping_line`.`piece` AS `piece`,`sale_shipping_line`.`Id` AS `Id`,`sale_shipping_line`.`product` AS `product`,`commercial_product`.`name` AS `description`,`sale_shipping_line`.`quantity` AS `quantity`,((`sale_shipping_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `sale_shipping`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `sale_shipping`.`tva_chec`))) AS `PrixUnitaire`,`commercial_product_stock`.`cump` AS `cump`,`sale_shipping`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`sale_shipping`.`partner` AS `partner`,`commercial_category`.`name` AS `categoryName`,`commercial_category`.`Id` AS `IdCategory` from (((((((`sale_shipping_line` join `sale_shipping` on((`sale_shipping_line`.`piece` = `sale_shipping`.`Id`))) left join `commercial_product` on((`sale_shipping_line`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`sale_shipping`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`sale_shipping`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`sale_shipping_line`.`vat` = `commercial_vat_1`.`Id`))) left join `commercial_product_stock` on(((`sale_shipping_line`.`Id` = `commercial_product_stock`.`piece_line`) and (`commercial_product_stock`.`piece_type` = 'BL')))) where (`sale_shipping`.`validated` = 1) union select `commercial_product_stock`.`piece_type` AS `piece_type`,`sale_credit_invoice_line`.`piece` AS `piece`,`sale_credit_invoice_line`.`Id` AS `Id`,`sale_credit_invoice_line`.`product` AS `product`,`commercial_product`.`name` AS `description`,`sale_credit_invoice_line`.`quantity` AS `quantity`,((`sale_credit_invoice_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `sale_credit_invoice`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `sale_credit_invoice`.`tva_chec`))) AS `PrixUnitaire`,`commercial_product_stock`.`cump` AS `cump`,`sale_credit_invoice`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`sale_credit_invoice`.`partner` AS `partner`,`commercial_category`.`name` AS `categoryName`,`commercial_category`.`Id` AS `IdCategory` from (((((((`sale_credit_invoice_line` join `sale_credit_invoice` on((`sale_credit_invoice_line`.`piece` = `sale_credit_invoice`.`Id`))) left join `commercial_product` on((`sale_credit_invoice_line`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`sale_credit_invoice`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`sale_credit_invoice`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`sale_credit_invoice_line`.`vat` = `commercial_vat_1`.`Id`))) left join `commercial_product_stock` on(((`sale_credit_invoice_line`.`Id` = `commercial_product_stock`.`piece_line`) and (`commercial_product_stock`.`piece_type` = 'FA')))) where (`sale_credit_invoice`.`validated` = 1) union select `commercial_product_stock`.`piece_type` AS `piece_type`,`pos_credit_order_line`.`piece` AS `piece`,`pos_credit_order_line`.`Id` AS `Id`,`pos_credit_order_line`.`product` AS `product`,`commercial_product`.`name` AS `description`,`pos_credit_order_line`.`quantity` AS `quantity`,((`pos_credit_order_line`.`price` * (1 + (coalesce(`commercial_fodec_1`.`value`,0) * `pos_credit_order`.`fodec_chec`))) * (1 + (coalesce(`commercial_vat_1`.`value`,0) * `pos_credit_order`.`tva_chec`))) AS `PrixUnitaire`,`commercial_product_stock`.`cump` AS `cump`,`pos_credit_order`.`date` AS `date`,`commercial_partner_1`.`name` AS `PartnerName`,`pos_credit_order`.`partner` AS `partner`,`commercial_category`.`name` AS `categoryName`,`commercial_category`.`Id` AS `IdCategory` from (((((((`pos_credit_order_line` join `pos_credit_order` on((`pos_credit_order_line`.`piece` = `pos_credit_order`.`Id`))) left join `commercial_product` on((`pos_credit_order_line`.`product` = `commercial_product`.`Id`))) left join `commercial_category` on((`commercial_product`.`category` = `commercial_category`.`Id`))) left join `commercial_fodec` `commercial_fodec_1` on((`pos_credit_order`.`fodec` = `commercial_fodec_1`.`Id`))) left join `commercial_partner` `commercial_partner_1` on((`pos_credit_order`.`partner` = `commercial_partner_1`.`Id`))) left join `commercial_vat` `commercial_vat_1` on((`pos_credit_order_line`.`vat` = `commercial_vat_1`.`Id`))) left join `commercial_product_stock` on(((`pos_credit_order_line`.`Id` = `commercial_product_stock`.`piece_line`) and (`commercial_product_stock`.`piece_type` = 'VCA')))) where (`pos_credit_order`.`validated` = 1) */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sale_transfering_shipping`
--

/*!50001 DROP TABLE IF EXISTS `sale_transfering_shipping`*/;
/*!50001 DROP VIEW IF EXISTS `sale_transfering_shipping`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sale_transfering_shipping` AS select 'POS.Order, POS, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'Vente Caisse' AS `piece_typeName`,`pos_order`.`Id` AS `Id`,`pos_order`.`code` AS `code`,`pos_order`.`reference` AS `reference`,`pos_order`.`date` AS `date`,`pos_order`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,NULL AS `BonDeCommande`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,`pos_order`.`total_amount` AS `total_amount`,`pos_order`.`paied_amount` AS `paied_amount`,(`pos_order`.`total_amount` - `pos_order`.`paied_amount`) AS `restAmount`,(case `pos_order`.`payment_condition` when 0 then `pos_order`.`date` when 1 then `pos_order`.`date` when 2 then (`pos_order`.`date` + interval 15 day) when 3 then last_day((`pos_order`.`date` + interval 30 day)) when 4 then (`pos_order`.`date` + interval 30 day) when 5 then last_day(`pos_order`.`date`) when 6 then coalesce((select `x`.`date` AS `date` from `pos_order` `x` where ((`x`.`Id` = (`pos_order`.`Id` + 1)) and (`x`.`validated` = 1))),(`pos_order`.`date` + interval 90 day)) else `pos_order`.`date` end) AS `due_date` from (((`pos_order` left join `commercial_partner` `commercial_partner_2` on((`pos_order`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`pos_order`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`pos_order`.`payment_method` = `commercial_payment_method_2`.`Id`))) where ((`pos_order`.`validated` = 1) and (`pos_order`.`invoice` = 0)) union select 'Sale.Shipping, Sale, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null' AS `piece_type`,'Bon de livraison' AS `piece_typeName`,`sale_shipping`.`Id` AS `Id`,`sale_shipping`.`code` AS `code`,`sale_shipping`.`reference` AS `reference`,`sale_shipping`.`date` AS `date`,`sale_shipping`.`partner` AS `IdPartner`,`commercial_partner_2`.`name` AS `partnerName`,`sale_order`.`code` AS `BonDeCommande`,`commercial_payment_condition_2`.`name` AS `payment_conditionName`,`commercial_payment_method_2`.`name` AS `payment_methodName`,`sale_shipping`.`total_amount` AS `total_amount`,`sale_shipping`.`paied_amount` AS `paied_amount`,(`sale_shipping`.`total_amount` - `sale_shipping`.`paied_amount`) AS `restAmount`,(case `sale_shipping`.`payment_condition` when 0 then `sale_shipping`.`date` when 1 then `sale_shipping`.`date` when 2 then (`sale_shipping`.`date` + interval 15 day) when 3 then last_day((`sale_shipping`.`date` + interval 30 day)) when 4 then (`sale_shipping`.`date` + interval 30 day) when 5 then last_day(`sale_shipping`.`date`) when 6 then coalesce((select `x`.`date` AS `date` from `sale_shipping` `x` where ((`x`.`Id` = (`sale_shipping`.`Id` + 1)) and (`x`.`validated` = 1))),(`sale_shipping`.`date` + interval 90 day)) else `sale_shipping`.`date` end) AS `due_date` from ((((`sale_shipping` left join `sale_order` on((`sale_shipping`.`order` = `sale_order`.`Id`))) left join `commercial_partner` `commercial_partner_2` on((`sale_shipping`.`partner` = `commercial_partner_2`.`Id`))) left join `commercial_payment_condition` `commercial_payment_condition_2` on((`sale_shipping`.`payment_condition` = `commercial_payment_condition_2`.`Id`))) left join `commercial_payment_method` `commercial_payment_method_2` on((`sale_shipping`.`payment_method` = `commercial_payment_method_2`.`Id`))) where ((`sale_shipping`.`validated` = 1) and (`sale_shipping`.`invoice` = 0)) order by `date` */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sigeo_bouclelist`
--

/*!50001 DROP TABLE IF EXISTS `sigeo_bouclelist`*/;
/*!50001 DROP VIEW IF EXISTS `sigeo_bouclelist`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sigeo_bouclelist` AS select `sigeo_boucle`.`Id` AS `Id`,`sigeo_boucle`.`code` AS `code`,`sigeo_boucle`.`date_ajout` AS `date_ajout`,`sigeo_boucle`.`position` AS `position`,`sigeo_boucle`.`couleur` AS `couleur`,`sigeo_boucle`.`ovin` AS `ovin`,`sigeo_boucle`.`type_boucle` AS `type_boucle`,`sigeo_boucle`.`date_pose` AS `date_pose`,`sigeo_boucle`.`perdu` AS `perdu`,`sigeo_boucle`.`date_perte` AS `date_perte` from `sigeo_boucle` where (`sigeo_boucle`.`type_boucle` <> 1) order by `sigeo_boucle`.`date_pose` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sigeo_flowdesc`
--

/*!50001 DROP TABLE IF EXISTS `sigeo_flowdesc`*/;
/*!50001 DROP VIEW IF EXISTS `sigeo_flowdesc`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sigeo_flowdesc` AS select `sigeo_flow`.`Id` AS `Id`,`sigeo_boucle`.`ovin` AS `ovin`,`sigeo_flow`.`in_out` AS `in_out`,`sigeo_boucle`.`code` AS `code`,`sigeo_boucle`.`Id` AS `IdBoucle`,`sigeo_flow`.`date` AS `date`,(case coalesce(`sigeo_flow`.`in_out`,0) when 1 then 'Entree' when 2 then 'Sortie' else '' end) AS `ES` from (`sigeo_flow` left join `sigeo_boucle` on((`sigeo_flow`.`ovin` = `sigeo_boucle`.`ovin`))) where ((`sigeo_flow`.`in_out` = 1) or (`sigeo_flow`.`in_out` = 2)) group by `sigeo_boucle`.`ovin`,`sigeo_flow`.`date` order by `sigeo_flow`.`Id` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sigeo_ovin_statutlist`
--

/*!50001 DROP TABLE IF EXISTS `sigeo_ovin_statutlist`*/;
/*!50001 DROP VIEW IF EXISTS `sigeo_ovin_statutlist`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sigeo_ovin_statutlist` AS select `sigeo_ovin_statut`.`Id` AS `Id`,`sigeo_ovin_statut`.`date_ajout` AS `date_ajout`,`sigeo_ovin_statut`.`date_affectation` AS `date_affectation`,`sigeo_ovin_statut`.`ovin` AS `ovin`,`sigeo_ovin_statut`.`statut` AS `statut` from `sigeo_ovin_statut` order by `sigeo_ovin_statut`.`date_affectation` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sigeo_ovinlist`
--

/*!50001 DROP TABLE IF EXISTS `sigeo_ovinlist`*/;
/*!50001 DROP VIEW IF EXISTS `sigeo_ovinlist`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sigeo_ovinlist` AS select `sigeo_ovinlistbouclestatutpoid`.`Id` AS `Id`,`sigeo_ovinlistbouclestatutpoid`.`code` AS `code`,`sigeo_ovinlistbouclestatutpoid`.`Boucle` AS `Boucle`,`sigeo_ovinlistbouclestatutpoid`.`TypeBoucle` AS `TypeBoucle`,`sigeo_ovinlistbouclestatutpoid`.`DateDeNaissance` AS `DateDeNaissance`,`sigeo_ovinlistbouclestatutpoid`.`AgeEnMois` AS `AgeEnMois`,`sigeo_ovinlistbouclestatutpoid`.`NbrJour` AS `NbrJour`,`sigeo_ovinlistbouclestatutpoid`.`Troupeau` AS `Troupeau`,`sigeo_ovinlistbouclestatutpoid`.`Sexe` AS `Sexe`,`sigeo_ovinlistbouclestatutpoid`.`Statut` AS `Statut`,`sigeo_ovinlistbouclestatutpoid`.`AReforme` AS `AReforme`,`sigeo_ovinlistbouclestatutpoid`.`DateSortie` AS `DateSortie`,`sigeo_ovinlistbouclestatutpoid`.`NatureDeSortie` AS `NatureDeSortie`,`sigeo_ovinlistbouclestatutpoid`.`pese` AS `pese`,`sigeo_ovinlistbouclestatutpoid`.`observation` AS `observation`,`sigeo_ovinlistbouclestatutpoid`.`sortie` AS `sortie`,`sigeo_ovinlistbouclestatutpoid`.`date_entree` AS `date_entree`,`sigeo_ovinlistbouclestatutpoid`.`date_reforme` AS `date_reforme`,`sigeo_ovinlistbouclestatutpoid`.`CauseReforme` AS `CauseReforme` from `sigeo_ovinlistbouclestatutpoid` group by `sigeo_ovinlistbouclestatutpoid`.`Id` order by `sigeo_ovinlistbouclestatutpoid`.`Id` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sigeo_ovinlistbouclestatutpoid`
--

/*!50001 DROP TABLE IF EXISTS `sigeo_ovinlistbouclestatutpoid`*/;
/*!50001 DROP VIEW IF EXISTS `sigeo_ovinlistbouclestatutpoid`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sigeo_ovinlistbouclestatutpoid` AS select `sigeo_ovin`.`Id` AS `Id`,`sigeo_ovin`.`code` AS `code`,`sigeo_boucle`.`code` AS `Boucle`,`sigeo_type_boucle`.`libelle` AS `TypeBoucle`,`sigeo_ovin`.`date_naissance` AS `DateDeNaissance`,timestampdiff(MONTH,`sigeo_ovin`.`date_naissance`,coalesce(`sigeo_ovin`.`date_sortie`,now())) AS `AgeEnMois`,timestampdiff(DAY,`sigeo_ovin`.`date_entree`,coalesce(`sigeo_ovin`.`date_sortie`,now())) AS `NbrJour`,`sigeo_troupeau`.`libelle` AS `Troupeau`,`sigeo_sexe`.`designation` AS `Sexe`,`sigeo_statut`.`libelle` AS `Statut`,`sigeo_ovin`.`reforme` AS `AReforme`,`sigeo_ovin`.`date_sortie` AS `DateSortie`,`sigeo_nature_sortie`.`libelle` AS `NatureDeSortie`,`sigeo_poids`.`pese` AS `pese`,`sigeo_ovin`.`observation` AS `observation`,`sigeo_ovin`.`sortie` AS `sortie`,`sigeo_ovin`.`date_entree` AS `date_entree`,`sigeo_ovin`.`date_reforme` AS `date_reforme`,`sigeo_reforme`.`libelle` AS `CauseReforme` from ((((((((((`sigeo_ovin` left join `sigeo_race` on((`sigeo_ovin`.`race` = `sigeo_race`.`Id`))) left join `sigeo_sexe` on((`sigeo_ovin`.`sexe` = `sigeo_sexe`.`Id`))) left join `sigeo_troupeau` on((`sigeo_troupeau`.`Id` = `sigeo_ovin`.`troupeau`))) left join `sigeo_ovin_statutlist` `sigeo_ovin_statut` on((`sigeo_ovin`.`statut` = `sigeo_ovin_statut`.`Id`))) left join `sigeo_statut` on((`sigeo_ovin_statut`.`statut` = `sigeo_statut`.`Id`))) left join `sigeo_boucle` on((`sigeo_boucle`.`Id` = `sigeo_ovin`.`boucle`))) left join `sigeo_type_boucle` on((`sigeo_type_boucle`.`Id` = `sigeo_boucle`.`type_boucle`))) left join `sigeo_nature_sortie` on((`sigeo_ovin`.`nature_sortie` = `sigeo_nature_sortie`.`Id`))) left join `sigeo_poids` on((`sigeo_ovin`.`poids` = `sigeo_poids`.`Id`))) left join `sigeo_reforme` on((`sigeo_ovin`.`cause_reforme` = `sigeo_reforme`.`Id`))) order by `sigeo_ovin`.`Id` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;

--
-- Final view structure for view `sigeo_poidslist`
--

/*!50001 DROP TABLE IF EXISTS `sigeo_poidslist`*/;
/*!50001 DROP VIEW IF EXISTS `sigeo_poidslist`*/;
/*!50001 SET @saved_cs_client          = @@character_set_client */;
/*!50001 SET @saved_cs_results         = @@character_set_results */;
/*!50001 SET @saved_col_connection     = @@collation_connection */;
/*!50001 SET character_set_client      = utf8 */;
/*!50001 SET character_set_results     = utf8 */;
/*!50001 SET collation_connection      = utf8_general_ci */;
/*!50001 CREATE ALGORITHM=UNDEFINED */
/*!50013 DEFINER=`root`@`localhost` SQL SECURITY DEFINER */
/*!50001 VIEW `sigeo_poidslist` AS select `sigeo_poids`.`Id` AS `Id`,`sigeo_poids`.`date_ajout` AS `date_ajout`,`sigeo_poids`.`date_pesee` AS `date_pesee`,`sigeo_poids`.`observation` AS `observation`,`sigeo_poids`.`pese` AS `pese`,`sigeo_poids`.`ovin` AS `ovin`,`sigeo_poids`.`type_pesee` AS `type_pesee` from `sigeo_poids` order by `sigeo_poids`.`date_pesee` desc */;
/*!50001 SET character_set_client      = @saved_cs_client */;
/*!50001 SET character_set_results     = @saved_cs_results */;
/*!50001 SET collation_connection      = @saved_col_connection */;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2025-05-10 17:04:28
